/*! mage version: 0.0.80, 04-06-2017 */
function Class(a, b) {
    var c = __upperCaseFirstLetter__(a);
    if (__pool__[c] = new __class__(c, b), !b[c]) throw "NO CONSTRUCTOR PROVIDED";
    window[c] = b[c];
    for (var d in b) d != a && (window[c].prototype[d] = b[d]);
    return window[c].prototype.__print__ = function() {
        console.table(this);
    }, __pool__[c];
}

function __class__(a, b) {
    this.name = a, this.methods = b;
}

function __upperCaseFirstLetter__(a) {
    return a.length > 2 ? a[0].toUpperCase() + a.substring(1, a.length) : a.toUpperCase();
}

function include(a, b) {
    for (var c, d, e, f = [], g = document.getElementsByTagName("script"), h = 0; h < g.length; h++) f.push(g[h].src);
    var i = function(a) {
        for (var b = 0; b < f.length; b++) if (-1 != f[b].indexOf(a)) return !0;
        return !1;
    };
    if (a instanceof Array) {
        var j = 0;
        if (0 == a.length) return void console.log("Why are you triyng to include 0 scripts? This makes me sad.");
        for (var k = function() {
            j == a.length && b();
        }, l = 0; l < a.length; l++) i(a[l]) ? b && k() : (c = document.createElement("script"), 
        c.type = "text/javascript", c.src = a[l] + ".js", b && (c.onload = c.onreadystatechange = function() {
            this.readyState && "complete" != this.readyState || (j++, k());
        }), e = document.getElementsByTagName("script")[0], e.parentNode.insertBefore(c, e));
    } else "string" == typeof a && (i(a) ? b && b() : (d = !1, c = document.createElement("script"), 
    c.type = "text/javascript", c.src = a + ".js", b && (c.onload = c.onreadystatechange = function() {
        d || this.readyState && "complete" != this.readyState || (d = !0, b());
    }), e = document.getElementsByTagName("script")[0], e.parentNode.insertBefore(c, e)));
}

function BEE() {
    this.options = void 0, this.nodes = [], this.size = 0, this.hasRoot = !1, this._idPool = [];
}

function _preEach(a, b, c) {
    if (c) {
        a(c, b + 1), _preEach(a, b, c.leftBranch), _preEach(a, b, c.rightBranch);
    }
}

function _postEach(a, b, c) {
    if (c) {
        console.log("inside _postEach"), _postEach(a, b, c.leftBranch), _postEach(a, b, c.rightBranch);
        a(c, b + 1);
    }
}

function _defEach(a, b, c) {
    if (c) {
        _defEach(a, b, c.leftBranch);
        a(c, b + 1), _defEach(a, b, c.rightBranch);
    }
}

function _hasLTR(a, b, c) {
    return !!b && (!!c(a.data, b.data) || (_hasLTR(e, b.leftBranch) || _hasLTR(e, b.rightBranch)));
}

function _hasRTL(a, b, c) {
    return !!b && (!!c(a.data, b.data) || (_hasRTL(e, b.rightBranch) || _hasRTL(e, b.leftBranch)));
}

function _orderedHas(a, b, c) {
    return !!b && (0 == c(a.data, b.data) || (c(a.data, b.data) < 0 ? _orderedHas(a, b.leftBranch) : _orderedHas(a, b.rightBranch)));
}

function height(a) {
    return a ? 1 + Math.max(_height(a.leftBranch), _height(a.rightBranch)) : 0;
}

function _orderedIns(a, b, c) {
    return b ? (c(a.data, b.data) < 0 || 0 == c(a.data, b.data) ? b.leftBranch = _orderedIns(a, b.leftBranch) : b.rightBranch = _orderedIns(a, b.rightBranch), 
    b) : buildNode(data, void 0, void 0);
}

function buildNode(a, b, c) {
    var d = this.createNode(a);
    return d.addLeaf(b, {
        branch: "left"
    }), d.addLeaf(c, {
        branch: "right"
    }), d;
}

function Node(a) {
    if (!(a.tree && a.tree instanceof BEE)) throw BEE.VALID_BEE;
    this.tree = a.tree;
    for (var b = Math.random().toString(BEE.MAX_ID_SIZE).slice(2); this.tree._idPool.indexOf(b) > -1; ) b = Math.random().toString(BEE.MAX_ID_SIZE).slice(2);
    this.tree._idPool.push(b), this._id = b, Object.defineProperty(this, "_id", {
        set: function() {
            throw BEE.UNTOUCHABLE;
        },
        get: function() {
            return b;
        }
    }), this.data = a.data, this.tree.size += 1, this.tree.nodes.push(this), this.leftBranch = void 0, 
    this.rightBranch = void 0, this.rightWeight = void 0, this.leftWeight = void 0, 
    this._isRoot = !1, this._isLeaf = !1, this._isParent = !1, this.children = 0, this.parents = 0, 
    this.parent = void 0;
}

function randomColor() {
    for (var a = "0123456789ABCDEF".split(""), b = "#", c = 0; c < 6; c++) b += a[Math.floor(16 * Math.random())];
    return b;
}

function componentToHex(a) {
    var b = a.toString(16);
    return 1 == b.length ? "0" + b : b;
}

function rgbToHex(a, b, c) {
    return "0x" + componentToHex(a) + componentToHex(b) + componentToHex(c);
}

function getIntValueFromHex(a) {
    return parseInt(a, 16);
}

function HashMap() {
    0 == arguments.length ? (this.total = 0, this.keys = new Array(), this.maxDimension = void 0) : 1 == arguments.length && (isNaN(arguments[0]) ? (this.total = 0, 
    this.keys = new Array(), this.maxDimension = void 0) : (this.total = 0, this.maxDimension = arguments[0], 
    this.keys = new Array())), this.map = {};
}

var license = "Copyright (c) 2017 by Marco Stagni < http://marcostagni.com mrc.stagni@gmail.com > and contributors.\n\nSome rights reserved. Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n* Redistributions of source code must retain the above copyright\n  notice, this list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above\n  copyright notice, this list of conditions and the following\n  disclaimer in the documentation and/or other materials provided\n  with the distribution.\n\n* The names of the contributors may not be used to endorse or\n  promote products derived from this software without specific\n  prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nMage contains third party software in the 'app/vendor' directory: each\nfile/module in this directory is distributed under its original license.\n\n", window, M;

"undefined" != typeof module && void 0 !== module.exports && (window = window || {
    asModule: !0,
    THREE: {},
    document: {}
}, document = window.document, M = window.M || {});

var __pool__ = {};

__class__.prototype.has = {}.hasOwnProperty, __class__.prototype._extends = function(a) {
    var b = (window[this.name], "string" == typeof a ? window[a] : a);
    if (!b) throw "NO UPPER CLASS";
    window[this.name].prototype = Object.create(b.prototype), window[this.name].prototype.constructor = window[this.name], 
    this._setMethods(), window[this.name].prototype.__getSuper = function() {
        return b;
    }, window.subClasses = window.subClasses || {}, window.subClasses[a] || (window.subClasses[a] = this.name), 
    window[this.name].prototype._super = "string" == typeof a ? window[a].call : a.call;
}, __class__.prototype._setMethods = function() {
    for (var a in this.methods) a != this.name && (window[__upperCaseFirstLetter__(this.name)].prototype[a] = this.methods[a]);
}, BEE.version = "0.1", BEE.authors = [ {
    name: "Marco Stagni",
    website: "http://marcostagni.com"
} ], BEE.MAX_CHILDREN_COUNT = 2, BEE.MAX_PARENTS_COUNT = 1, BEE.MAX_ID_SIZE = 12, 
BEE.MAX_ROOT_NUMBER = 1, BEE.VALID_BEE = "Please use a valid BEE object.", BEE.UNTOUCHABLE = "Untouchable value. Get away.", 
BEE.VALID_BRANCH = "Please specify a valid branch.", BEE.NO_MORE_CHILDREN = "No more children allowed for this node.", 
BEE.NO_MORE_PARENTS = "This node already have a parent.", BEE.ERROR_NO_LEAVES = "Sorry, something wrong in your BEE. There are no leaves :(", 
BEE.ERROR_NO_PARENTS = "Sorry, something wrong in your BEE. There are no leaves :(", 
BEE.ERROR_STRANGE_ROOTS = "Sorry, something wrong in your BEE. Strange number of root nodes", 
BEE.ERROR_ALREADY_LEFT = "Sorry, this node already have a left branch.", BEE.ERROR_ALREADY_RIGHT = "Sorry, this node already have a right branch.", 
BEE.BAD_ARGUMENTS = "BAD ARGUMENTS, please check them.", BEE.prototype.createNode = function(a) {
    return new Node({
        tree: this,
        data: a
    });
}, BEE.prototype.getAllLeaves = function() {
    var a = [];
    for (var b in this.nodes) this.nodes[b]._isLeaf && a.push(this.nodes[b]);
    if (0 == a.length) throw BEE.ERROR_NO_LEAVES;
    return a;
}, BEE.prototype.getRootNode = function() {
    var a = [];
    for (var b in this.nodes) this.nodes[b]._isRoot && a.push(this.nodes[b]);
    if (1 != a.length) throw BEE.ERROR_STRANGE_ROOTS;
    return a[0];
}, BEE.prototype.getAllParents = function() {
    var a = [];
    for (var b in this.nodes) this.nodes[b]._isParent && a.push(this.nodes[b]);
    if (0 == a.length) throw BEE.ERROR_NO_PARENTS;
    return a;
}, BEE.prototype.getPath = function(a) {
    var b, c, d = [];
    for (d.push({
        n: a,
        w: void 0
    }), b = a.parent, c = a; b; ) {
        var e = b.leftBranch._id == c._id ? b.leftWeight : b.rightWeight;
        d.push({
            n: b,
            w: e
        }), c = b, b = b.parent;
    }
    return d.reverse();
}, BEE.prototype.each = function(a, b) {
    var c = 0;
    if ("function" != typeof a) throw BEE.BAD_ARGUMENTS;
    "post" == b ? (console.log("inside post"), console.log(this.getRootNode()), _postEach(a, c, this.getRootNode())) : "pre" == b ? _preEach(a, c, this.getRootNode()) : _defEach(a, c, this.getRootNode());
}, BEE.prototype.has = function(a, b, c) {
    if ("function" != typeof b) throw BEE.BAD_ARGUMENTS;
    var d;
    if (c) if (_s = c.toLowerCase(), "ltr" == _s) d = _hasLTR(a, this.getRootNode(), b); else {
        if ("rtl" != _s) throw BEE.BAD_ARGUMENTS;
        d = _hasRTL(a, this.getRootNode(), b);
    } else d = _hasLTR(a, this.getRootNode(), b);
    return d;
}, BEE.prototype.orderedHas = function(a, b) {
    return _orderedIns(a, this.getRootNode(), b);
}, BEE.prototype.height = function() {
    return _height(this.getRootNode());
}, BEE.prototype.orderedIns = function(a, b) {
    try {
        _orderedIns(a, this.getRootNode(), b);
    } catch (a) {
        return console.log("Something bad happened in ordIns"), !1;
    }
}, BEE.prototype.buildNode = function(a, b, c) {
    var d = this.createNode(a);
    return d.addLeaf(b, {
        branch: "left"
    }), d.addLeaf(c, {
        branch: "right"
    }), d;
}, Node.prototype.setRoot = function(a) {
    this._isRoot = a;
}, Node.prototype.setParent = function(a) {
    this._isParent = a;
}, Node.prototype.setLeaf = function(a) {
    this._isLeaf = a;
}, Node.prototype.update = function() {
    0 == this.children ? 0 == this.parents ? (this.setLeaf(!1), this.setRoot(!0), this.setParent(!1)) : (this.setLeaf(!0), 
    this.setRoot(!1), this.setParent(!1)) : 0 == this.parents ? (this.setLeaf(!1), this.setRoot(!0), 
    this.setParent(!0)) : (this.setLeaf(!1), this.setRoot(!1), this.setParent(!0));
}, Node.prototype.addLeaf = function(a, b) {
    if (this.children + 1 > BEE.MAX_CHILDREN_COUNT) throw BEE.NO_MORE_CHILDREN;
    if (!b.branch) throw BEE.BAD_ARGUMENTS;
    if ("left" == b.branch) {
        if (this.leftBranch) throw BEE.ERROR_ALREADY_LEFT;
        this.leftBranch = a, this.leftWeight = b.weights && b.weights.l ? b.weights.l : 0;
    } else {
        if ("right" != b.branch) throw BEE.VALID_BRANCH;
        if (this.rightBranch) throw BEE.ERROR_ALREADY_RIGHT;
        this.rightBranch = a, this.rightWeight = b.weights && b.weights.r ? b.weights.r : 1;
    }
    this.children += 1, a.parent = this, a.parents = 1, this.update(), a.update();
}, Node.prototype.addParent = function(a, b) {
    if (this.parents + 1 > BEE.MAX_PARENTS_COUNT) throw BEE.NO_MORE_PARENTS;
    if (a.children + 1 > BEE.MAX_CHILDREN_COUNT) throw BEE.NO_MORE_CHILDREN;
    a.addLeaf(this, b);
};

var SPE = {
    distributions: {
        BOX: 1,
        SPHERE: 2,
        DISC: 3
    },
    valueOverLifetimeLength: 4
};

"function" == typeof define && define.amd ? define("spe", SPE) : "undefined" != typeof exports && "undefined" != typeof module && (module.exports = SPE), 
SPE.TypedArrayHelper = function(a, b, c, d) {
    "use strict";
    this.componentSize = c || 1, this.size = b || 1, this.TypedArrayConstructor = a || Float32Array, 
    this.array = new a(b * this.componentSize), this.indexOffset = d || 0;
}, SPE.TypedArrayHelper.constructor = SPE.TypedArrayHelper, SPE.TypedArrayHelper.prototype.setSize = function(a, b) {
    "use strict";
    var c = this.array.length;
    return b || (a *= this.componentSize), c > a ? this.shrink(a) : a > c ? this.grow(a) : void console.info("TypedArray is already of size:", a + ".", "Will not resize.");
}, SPE.TypedArrayHelper.prototype.shrink = function(a) {
    "use strict";
    return this.array = this.array.subarray(0, a), this.size = a, this;
}, SPE.TypedArrayHelper.prototype.grow = function(a) {
    "use strict";
    var b = this.array, c = new this.TypedArrayConstructor(a);
    return c.set(b), this.array = c, this.size = a, this;
}, SPE.TypedArrayHelper.prototype.splice = function(a, b) {
    "use strict";
    a *= this.componentSize, b *= this.componentSize;
    for (var c = [], d = this.array, e = d.length, f = 0; e > f; ++f) (a > f || f >= b) && c.push(d[f]);
    return this.setFromArray(0, c), this;
}, SPE.TypedArrayHelper.prototype.setFromArray = function(a, b) {
    "use strict";
    var c = b.length, d = a + c;
    return d > this.array.length ? this.grow(d) : d < this.array.length && this.shrink(d), 
    this.array.set(b, this.indexOffset + a), this;
}, SPE.TypedArrayHelper.prototype.setVec2 = function(a, b) {
    "use strict";
    return this.setVec2Components(a, b.x, b.y);
}, SPE.TypedArrayHelper.prototype.setVec2Components = function(a, b, c) {
    "use strict";
    var d = this.array, e = this.indexOffset + a * this.componentSize;
    return d[e] = b, d[e + 1] = c, this;
}, SPE.TypedArrayHelper.prototype.setVec3 = function(a, b) {
    "use strict";
    return this.setVec3Components(a, b.x, b.y, b.z);
}, SPE.TypedArrayHelper.prototype.setVec3Components = function(a, b, c, d) {
    "use strict";
    var e = this.array, f = this.indexOffset + a * this.componentSize;
    return e[f] = b, e[f + 1] = c, e[f + 2] = d, this;
}, SPE.TypedArrayHelper.prototype.setVec4 = function(a, b) {
    "use strict";
    return this.setVec4Components(a, b.x, b.y, b.z, b.w);
}, SPE.TypedArrayHelper.prototype.setVec4Components = function(a, b, c, d, e) {
    "use strict";
    var f = this.array, g = this.indexOffset + a * this.componentSize;
    return f[g] = b, f[g + 1] = c, f[g + 2] = d, f[g + 3] = e, this;
}, SPE.TypedArrayHelper.prototype.setMat3 = function(a, b) {
    "use strict";
    return this.setFromArray(this.indexOffset + a * this.componentSize, b.elements);
}, SPE.TypedArrayHelper.prototype.setMat4 = function(a, b) {
    "use strict";
    return this.setFromArray(this.indexOffset + a * this.componentSize, b.elements);
}, SPE.TypedArrayHelper.prototype.setColor = function(a, b) {
    "use strict";
    return this.setVec3Components(a, b.r, b.g, b.b);
}, SPE.TypedArrayHelper.prototype.setNumber = function(a, b) {
    "use strict";
    return this.array[this.indexOffset + a * this.componentSize] = b, this;
}, SPE.TypedArrayHelper.prototype.getValueAtIndex = function(a) {
    "use strict";
    return this.array[this.indexOffset + a];
}, SPE.TypedArrayHelper.prototype.getComponentValueAtIndex = function(a) {
    "use strict";
    return this.array.subarray(this.indexOffset + a * this.componentSize);
}, SPE.ShaderAttribute = function(a, b, c) {
    "use strict";
    var d = SPE.ShaderAttribute.typeSizeMap;
    this.type = "string" == typeof a && d.hasOwnProperty(a) ? a : "f", this.componentSize = d[this.type], 
    this.arrayType = c || Float32Array, this.typedArray = null, this.bufferAttribute = null, 
    this.dynamicBuffer = !!b, this.updateMin = 0, this.updateMax = 0;
}, SPE.ShaderAttribute.constructor = SPE.ShaderAttribute, SPE.ShaderAttribute.typeSizeMap = {
    f: 1,
    v2: 2,
    v3: 3,
    v4: 4,
    c: 3,
    m3: 9,
    m4: 16
}, SPE.ShaderAttribute.prototype.setUpdateRange = function(a, b) {
    "use strict";
    this.updateMin = Math.min(a * this.componentSize, this.updateMin * this.componentSize), 
    this.updateMax = Math.max(b * this.componentSize, this.updateMax * this.componentSize);
}, SPE.ShaderAttribute.prototype.flagUpdate = function() {
    "use strict";
    var a = this.bufferAttribute, b = a.updateRange;
    b.offset = this.updateMin, b.count = Math.min(this.updateMax - this.updateMin + this.componentSize, this.typedArray.array.length), 
    a.needsUpdate = !0;
}, SPE.ShaderAttribute.prototype.resetUpdateRange = function() {
    "use strict";
    this.updateMin = 0, this.updateMax = 0;
}, SPE.ShaderAttribute.prototype.resetDynamic = function() {
    "use strict";
    this.bufferAttribute.dynamic = this.dynamicBuffer;
}, SPE.ShaderAttribute.prototype.splice = function(a, b) {
    "use strict";
    this.typedArray.splice(a, b), this.forceUpdateAll();
}, SPE.ShaderAttribute.prototype.forceUpdateAll = function() {
    "use strict";
    this.bufferAttribute.array = this.typedArray.array, this.bufferAttribute.updateRange.offset = 0, 
    this.bufferAttribute.updateRange.count = -1, this.bufferAttribute.dynamic = !1, 
    this.bufferAttribute.needsUpdate = !0;
}, SPE.ShaderAttribute.prototype._ensureTypedArray = function(a) {
    "use strict";
    null !== this.typedArray && this.typedArray.size === a * this.componentSize || (null !== this.typedArray && this.typedArray.size !== a ? this.typedArray.setSize(a) : null === this.typedArray && (this.typedArray = new SPE.TypedArrayHelper(this.arrayType, a, this.componentSize)));
}, SPE.ShaderAttribute.prototype._createBufferAttribute = function(a) {
    "use strict";
    return this._ensureTypedArray(a), null !== this.bufferAttribute ? (this.bufferAttribute.array = this.typedArray.array, 
    parseFloat(THREE.REVISION) >= 81 && (this.bufferAttribute.count = this.bufferAttribute.array.length / this.bufferAttribute.itemSize), 
    void (this.bufferAttribute.needsUpdate = !0)) : (this.bufferAttribute = new THREE.BufferAttribute(this.typedArray.array, this.componentSize), 
    void (this.bufferAttribute.dynamic = this.dynamicBuffer));
}, SPE.ShaderAttribute.prototype.getLength = function() {
    "use strict";
    return null === this.typedArray ? 0 : this.typedArray.array.length;
}, SPE.shaderChunks = {
    defines: [ "#define PACKED_COLOR_SIZE 256.0", "#define PACKED_COLOR_DIVISOR 255.0" ].join("\n"),
    uniforms: [ "uniform float deltaTime;", "uniform float runTime;", "uniform sampler2D texture;", "uniform vec4 textureAnimation;", "uniform float scale;" ].join("\n"),
    attributes: [ "attribute vec4 acceleration;", "attribute vec3 velocity;", "attribute vec4 rotation;", "attribute vec3 rotationCenter;", "attribute vec4 params;", "attribute vec4 size;", "attribute vec4 angle;", "attribute vec4 color;", "attribute vec4 opacity;" ].join("\n"),
    varyings: [ "varying vec4 vColor;", "#ifdef SHOULD_ROTATE_TEXTURE", "    varying float vAngle;", "#endif", "#ifdef SHOULD_CALCULATE_SPRITE", "    varying vec4 vSpriteSheet;", "#endif" ].join("\n"),
    branchAvoidanceFunctions: [ "float when_gt(float x, float y) {", "    return max(sign(x - y), 0.0);", "}", "float when_lt(float x, float y) {", "    return min( max(1.0 - sign(x - y), 0.0), 1.0 );", "}", "float when_eq( float x, float y ) {", "    return 1.0 - abs( sign( x - y ) );", "}", "float when_ge(float x, float y) {", "  return 1.0 - when_lt(x, y);", "}", "float when_le(float x, float y) {", "  return 1.0 - when_gt(x, y);", "}", "float and(float a, float b) {", "    return a * b;", "}", "float or(float a, float b) {", "    return min(a + b, 1.0);", "}" ].join("\n"),
    unpackColor: [ "vec3 unpackColor( in float hex ) {", "   vec3 c = vec3( 0.0 );", "   float r = mod( (hex / PACKED_COLOR_SIZE / PACKED_COLOR_SIZE), PACKED_COLOR_SIZE );", "   float g = mod( (hex / PACKED_COLOR_SIZE), PACKED_COLOR_SIZE );", "   float b = mod( hex, PACKED_COLOR_SIZE );", "   c.r = r / PACKED_COLOR_DIVISOR;", "   c.g = g / PACKED_COLOR_DIVISOR;", "   c.b = b / PACKED_COLOR_DIVISOR;", "   return c;", "}" ].join("\n"),
    unpackRotationAxis: [ "vec3 unpackRotationAxis( in float hex ) {", "   vec3 c = vec3( 0.0 );", "   float r = mod( (hex / PACKED_COLOR_SIZE / PACKED_COLOR_SIZE), PACKED_COLOR_SIZE );", "   float g = mod( (hex / PACKED_COLOR_SIZE), PACKED_COLOR_SIZE );", "   float b = mod( hex, PACKED_COLOR_SIZE );", "   c.r = r / PACKED_COLOR_DIVISOR;", "   c.g = g / PACKED_COLOR_DIVISOR;", "   c.b = b / PACKED_COLOR_DIVISOR;", "   c *= vec3( 2.0 );", "   c -= vec3( 1.0 );", "   return c;", "}" ].join("\n"),
    floatOverLifetime: [ "float getFloatOverLifetime( in float positionInTime, in vec4 attr ) {", "    highp float value = 0.0;", "    float deltaAge = positionInTime * float( VALUE_OVER_LIFETIME_LENGTH - 1 );", "    float fIndex = 0.0;", "    float shouldApplyValue = 0.0;", "    value += attr[ 0 ] * when_eq( deltaAge, 0.0 );", "", "    for( int i = 0; i < VALUE_OVER_LIFETIME_LENGTH - 1; ++i ) {", "       fIndex = float( i );", "       shouldApplyValue = and( when_gt( deltaAge, fIndex ), when_le( deltaAge, fIndex + 1.0 ) );", "       value += shouldApplyValue * mix( attr[ i ], attr[ i + 1 ], deltaAge - fIndex );", "    }", "", "    return value;", "}" ].join("\n"),
    colorOverLifetime: [ "vec3 getColorOverLifetime( in float positionInTime, in vec3 color1, in vec3 color2, in vec3 color3, in vec3 color4 ) {", "    vec3 value = vec3( 0.0 );", "    value.x = getFloatOverLifetime( positionInTime, vec4( color1.x, color2.x, color3.x, color4.x ) );", "    value.y = getFloatOverLifetime( positionInTime, vec4( color1.y, color2.y, color3.y, color4.y ) );", "    value.z = getFloatOverLifetime( positionInTime, vec4( color1.z, color2.z, color3.z, color4.z ) );", "    return value;", "}" ].join("\n"),
    paramFetchingFunctions: [ "float getAlive() {", "   return params.x;", "}", "float getAge() {", "   return params.y;", "}", "float getMaxAge() {", "   return params.z;", "}", "float getWiggle() {", "   return params.w;", "}" ].join("\n"),
    forceFetchingFunctions: [ "vec4 getPosition( in float age ) {", "   return modelViewMatrix * vec4( position, 1.0 );", "}", "vec3 getVelocity( in float age ) {", "   return velocity * age;", "}", "vec3 getAcceleration( in float age ) {", "   return acceleration.xyz * age;", "}" ].join("\n"),
    rotationFunctions: [ "#ifdef SHOULD_ROTATE_PARTICLES", "   mat4 getRotationMatrix( in vec3 axis, in float angle) {", "       axis = normalize(axis);", "       float s = sin(angle);", "       float c = cos(angle);", "       float oc = 1.0 - c;", "", "       return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,", "                   oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,", "                   oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,", "                   0.0,                                0.0,                                0.0,                                1.0);", "   }", "", "   vec3 getRotation( in vec3 pos, in float positionInTime ) {", "      if( rotation.y == 0.0 ) {", "           return pos;", "      }", "", "      vec3 axis = unpackRotationAxis( rotation.x );", "      vec3 center = rotationCenter;", "      vec3 translated;", "      mat4 rotationMatrix;", "      float angle = 0.0;", "      angle += when_eq( rotation.z, 0.0 ) * rotation.y;", "      angle += when_gt( rotation.z, 0.0 ) * mix( 0.0, rotation.y, positionInTime );", "      translated = rotationCenter - pos;", "      rotationMatrix = getRotationMatrix( axis, angle );", "      return center - vec3( rotationMatrix * vec4( translated, 0.0 ) );", "   }", "#endif" ].join("\n"),
    rotateTexture: [ "    vec2 vUv = vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y );", "", "    #ifdef SHOULD_ROTATE_TEXTURE", "       float x = gl_PointCoord.x - 0.5;", "       float y = 1.0 - gl_PointCoord.y - 0.5;", "       float c = cos( -vAngle );", "       float s = sin( -vAngle );", "       vUv = vec2( c * x + s * y + 0.5, c * y - s * x + 0.5 );", "    #endif", "", "    #ifdef SHOULD_CALCULATE_SPRITE", "        float framesX = vSpriteSheet.x;", "        float framesY = vSpriteSheet.y;", "        float columnNorm = vSpriteSheet.z;", "        float rowNorm = vSpriteSheet.w;", "        vUv.x = gl_PointCoord.x * framesX + columnNorm;", "        vUv.y = 1.0 - (gl_PointCoord.y * framesY + rowNorm);", "    #endif", "", "    vec4 rotatedTexture = texture2D( texture, vUv );" ].join("\n")
}, SPE.shaders = {
    vertex: [ SPE.shaderChunks.defines, SPE.shaderChunks.uniforms, SPE.shaderChunks.attributes, SPE.shaderChunks.varyings, THREE.ShaderChunk.common, THREE.ShaderChunk.logdepthbuf_pars_vertex, THREE.ShaderChunk.fog_pars_vertex, SPE.shaderChunks.branchAvoidanceFunctions, SPE.shaderChunks.unpackColor, SPE.shaderChunks.unpackRotationAxis, SPE.shaderChunks.floatOverLifetime, SPE.shaderChunks.colorOverLifetime, SPE.shaderChunks.paramFetchingFunctions, SPE.shaderChunks.forceFetchingFunctions, SPE.shaderChunks.rotationFunctions, "void main() {", "    highp float age = getAge();", "    highp float alive = getAlive();", "    highp float maxAge = getMaxAge();", "    highp float positionInTime = (age / maxAge);", "    highp float isAlive = when_gt( alive, 0.0 );", "    #ifdef SHOULD_WIGGLE_PARTICLES", "        float wiggleAmount = positionInTime * getWiggle();", "        float wiggleSin = isAlive * sin( wiggleAmount );", "        float wiggleCos = isAlive * cos( wiggleAmount );", "    #endif", "    vec3 vel = getVelocity( age );", "    vec3 accel = getAcceleration( age );", "    vec3 force = vec3( 0.0 );", "    vec3 pos = vec3( position );", "    float drag = 1.0 - (positionInTime * 0.5) * acceleration.w;", "    force += vel;", "    force *= drag;", "    force += accel * age;", "    pos += force;", "    #ifdef SHOULD_WIGGLE_PARTICLES", "        pos.x += wiggleSin;", "        pos.y += wiggleCos;", "        pos.z += wiggleSin;", "    #endif", "    #ifdef SHOULD_ROTATE_PARTICLES", "        pos = getRotation( pos, positionInTime );", "    #endif", "    vec4 mvPosition = modelViewMatrix * vec4( pos, 1.0 );", "    highp float pointSize = getFloatOverLifetime( positionInTime, size ) * isAlive;", "    #ifdef HAS_PERSPECTIVE", "        float perspective = scale / length( mvPosition.xyz );", "    #else", "        float perspective = 1.0;", "    #endif", "    float pointSizePerspective = pointSize * perspective;", "    #ifdef COLORIZE", "       vec3 c = isAlive * getColorOverLifetime(", "           positionInTime,", "           unpackColor( color.x ),", "           unpackColor( color.y ),", "           unpackColor( color.z ),", "           unpackColor( color.w )", "       );", "    #else", "       vec3 c = vec3(1.0);", "    #endif", "    float o = isAlive * getFloatOverLifetime( positionInTime, opacity );", "    vColor = vec4( c, o );", "    #ifdef SHOULD_ROTATE_TEXTURE", "        vAngle = isAlive * getFloatOverLifetime( positionInTime, angle );", "    #endif", "    #ifdef SHOULD_CALCULATE_SPRITE", "        float framesX = textureAnimation.x;", "        float framesY = textureAnimation.y;", "        float loopCount = textureAnimation.w;", "        float totalFrames = textureAnimation.z;", "        float frameNumber = mod( (positionInTime * loopCount) * totalFrames, totalFrames );", "        float column = floor(mod( frameNumber, framesX ));", "        float row = floor( (frameNumber - column) / framesX );", "        float columnNorm = column / framesX;", "        float rowNorm = row / framesY;", "        vSpriteSheet.x = 1.0 / framesX;", "        vSpriteSheet.y = 1.0 / framesY;", "        vSpriteSheet.z = columnNorm;", "        vSpriteSheet.w = rowNorm;", "    #endif", "    gl_PointSize = pointSizePerspective;", "    gl_Position = projectionMatrix * mvPosition;", THREE.ShaderChunk.logdepthbuf_vertex, THREE.ShaderChunk.fog_vertex, "}" ].join("\n"),
    fragment: [ SPE.shaderChunks.uniforms, THREE.ShaderChunk.common, THREE.ShaderChunk.fog_pars_fragment, THREE.ShaderChunk.logdepthbuf_pars_fragment, SPE.shaderChunks.varyings, SPE.shaderChunks.branchAvoidanceFunctions, "void main() {", "    vec3 outgoingLight = vColor.xyz;", "    ", "    #ifdef ALPHATEST", "       if ( vColor.w < float(ALPHATEST) ) discard;", "    #endif", SPE.shaderChunks.rotateTexture, THREE.ShaderChunk.logdepthbuf_fragment, "    outgoingLight = vColor.xyz * rotatedTexture.xyz;", "    gl_FragColor = vec4( outgoingLight.xyz, rotatedTexture.w * vColor.w );", THREE.ShaderChunk.fog_fragment, "}" ].join("\n")
}, SPE.utils = {
    types: {
        BOOLEAN: "boolean",
        STRING: "string",
        NUMBER: "number",
        OBJECT: "object"
    },
    ensureTypedArg: function(a, b, c) {
        "use strict";
        return typeof a === b ? a : c;
    },
    ensureArrayTypedArg: function(a, b, c) {
        "use strict";
        if (Array.isArray(a)) {
            for (var d = a.length - 1; d >= 0; --d) if (typeof a[d] !== b) return c;
            return a;
        }
        return this.ensureTypedArg(a, b, c);
    },
    ensureInstanceOf: function(a, b, c) {
        "use strict";
        return void 0 !== b && a instanceof b ? a : c;
    },
    ensureArrayInstanceOf: function(a, b, c) {
        "use strict";
        if (Array.isArray(a)) {
            for (var d = a.length - 1; d >= 0; --d) if (void 0 !== b && a[d] instanceof b == 0) return c;
            return a;
        }
        return this.ensureInstanceOf(a, b, c);
    },
    ensureValueOverLifetimeCompliance: function(a, b, c) {
        "use strict";
        b = b || 3, c = c || 3, !1 === Array.isArray(a._value) && (a._value = [ a._value ]), 
        !1 === Array.isArray(a._spread) && (a._spread = [ a._spread ]);
        var d = this.clamp(a._value.length, b, c), e = this.clamp(a._spread.length, b, c), f = Math.max(d, e);
        a._value.length !== f && (a._value = this.interpolateArray(a._value, f)), a._spread.length !== f && (a._spread = this.interpolateArray(a._spread, f));
    },
    interpolateArray: function(a, b) {
        "use strict";
        for (var c = a.length, d = [ "function" == typeof a[0].clone ? a[0].clone() : a[0] ], e = (c - 1) / (b - 1), f = 1; b - 1 > f; ++f) {
            var g = f * e, h = Math.floor(g), i = Math.ceil(g), j = g - h;
            d[f] = this.lerpTypeAgnostic(a[h], a[i], j);
        }
        return d.push("function" == typeof a[c - 1].clone ? a[c - 1].clone() : a[c - 1]), 
        d;
    },
    clamp: function(a, b, c) {
        "use strict";
        return Math.max(b, Math.min(a, c));
    },
    zeroToEpsilon: function(a, b) {
        "use strict";
        var c = 1e-5, d = a;
        return d = b ? Math.random() * c * 10 : c, 0 > a && a > -c && (d = -d), d;
    },
    lerpTypeAgnostic: function(a, b, c) {
        "use strict";
        var d, e = this.types;
        return typeof a === e.NUMBER && typeof b === e.NUMBER ? a + (b - a) * c : a instanceof THREE.Vector2 && b instanceof THREE.Vector2 ? (d = a.clone(), 
        d.x = this.lerp(a.x, b.x, c), d.y = this.lerp(a.y, b.y, c), d) : a instanceof THREE.Vector3 && b instanceof THREE.Vector3 ? (d = a.clone(), 
        d.x = this.lerp(a.x, b.x, c), d.y = this.lerp(a.y, b.y, c), d.z = this.lerp(a.z, b.z, c), 
        d) : a instanceof THREE.Vector4 && b instanceof THREE.Vector4 ? (d = a.clone(), 
        d.x = this.lerp(a.x, b.x, c), d.y = this.lerp(a.y, b.y, c), d.z = this.lerp(a.z, b.z, c), 
        d.w = this.lerp(a.w, b.w, c), d) : a instanceof THREE.Color && b instanceof THREE.Color ? (d = a.clone(), 
        d.r = this.lerp(a.r, b.r, c), d.g = this.lerp(a.g, b.g, c), d.b = this.lerp(a.b, b.b, c), 
        d) : void console.warn("Invalid argument types, or argument types do not match:", a, b);
    },
    lerp: function(a, b, c) {
        "use strict";
        return a + (b - a) * c;
    },
    roundToNearestMultiple: function(a, b) {
        "use strict";
        var c = 0;
        return 0 === b ? a : (c = Math.abs(a) % b, 0 === c ? a : 0 > a ? -(Math.abs(a) - c) : a + b - c);
    },
    arrayValuesAreEqual: function(a) {
        "use strict";
        for (var b = 0; b < a.length - 1; ++b) if (a[b] !== a[b + 1]) return !1;
        return !0;
    },
    randomFloat: function(a, b) {
        "use strict";
        return a + b * (Math.random() - .5);
    },
    randomVector3: function(a, b, c, d, e) {
        "use strict";
        var f = c.x + (Math.random() * d.x - .5 * d.x), g = c.y + (Math.random() * d.y - .5 * d.y), h = c.z + (Math.random() * d.z - .5 * d.z);
        e && (f = .5 * -e.x + this.roundToNearestMultiple(f, e.x), g = .5 * -e.y + this.roundToNearestMultiple(g, e.y), 
        h = .5 * -e.z + this.roundToNearestMultiple(h, e.z)), a.typedArray.setVec3Components(b, f, g, h);
    },
    randomColor: function(a, b, c, d) {
        "use strict";
        var e = c.r + Math.random() * d.x, f = c.g + Math.random() * d.y, g = c.b + Math.random() * d.z;
        e = this.clamp(e, 0, 1), f = this.clamp(f, 0, 1), g = this.clamp(g, 0, 1), a.typedArray.setVec3Components(b, e, f, g);
    },
    randomColorAsHex: function() {
        "use strict";
        var a = new THREE.Color();
        return function(b, c, d, e) {
            for (var f = d.length, g = [], h = 0; f > h; ++h) {
                var i = e[h];
                a.copy(d[h]), a.r += Math.random() * i.x - .5 * i.x, a.g += Math.random() * i.y - .5 * i.y, 
                a.b += Math.random() * i.z - .5 * i.z, a.r = this.clamp(a.r, 0, 1), a.g = this.clamp(a.g, 0, 1), 
                a.b = this.clamp(a.b, 0, 1), g.push(a.getHex());
            }
            b.typedArray.setVec4Components(c, g[0], g[1], g[2], g[3]);
        };
    }(),
    randomVector3OnSphere: function(a, b, c, d, e, f, g, h) {
        "use strict";
        var i = 2 * Math.random() - 1, j = 6.2832 * Math.random(), k = Math.sqrt(1 - i * i), l = this.randomFloat(d, e), m = 0, n = 0, o = 0;
        g && (l = Math.round(l / g) * g), m = k * Math.cos(j) * l, n = k * Math.sin(j) * l, 
        o = i * l, m *= f.x, n *= f.y, o *= f.z, m += c.x, n += c.y, o += c.z, a.typedArray.setVec3Components(b, m, n, o);
    },
    seededRandom: function(a) {
        var b = 1e4 * Math.sin(a);
        return b - (0 | b);
    },
    randomVector3OnDisc: function(a, b, c, d, e, f, g) {
        "use strict";
        var h = 6.2832 * Math.random(), i = Math.abs(this.randomFloat(d, e)), j = 0, k = 0, l = 0;
        g && (i = Math.round(i / g) * g), j = Math.cos(h) * i, k = Math.sin(h) * i, j *= f.x, 
        k *= f.y, j += c.x, k += c.y, l += c.z, a.typedArray.setVec3Components(b, j, k, l);
    },
    randomDirectionVector3OnSphere: function() {
        "use strict";
        var a = new THREE.Vector3();
        return function(b, c, d, e, f, g, h, i) {
            a.copy(g), a.x -= d, a.y -= e, a.z -= f, a.normalize().multiplyScalar(-this.randomFloat(h, i)), 
            b.typedArray.setVec3Components(c, a.x, a.y, a.z);
        };
    }(),
    randomDirectionVector3OnDisc: function() {
        "use strict";
        var a = new THREE.Vector3();
        return function(b, c, d, e, f, g, h, i) {
            a.copy(g), a.x -= d, a.y -= e, a.z -= f, a.normalize().multiplyScalar(-this.randomFloat(h, i)), 
            b.typedArray.setVec3Components(c, a.x, a.y, 0);
        };
    }(),
    getPackedRotationAxis: function() {
        "use strict";
        var a = new THREE.Vector3(), b = new THREE.Vector3(), c = new THREE.Color(), d = new THREE.Vector3(1, 1, 1);
        return function(e, f) {
            return a.copy(e).normalize(), b.copy(f).normalize(), a.x += .5 * -f.x + Math.random() * f.x, 
            a.y += .5 * -f.y + Math.random() * f.y, a.z += .5 * -f.z + Math.random() * f.z, 
            a.normalize().add(d).multiplyScalar(.5), c.setRGB(a.x, a.y, a.z), c.getHex();
        };
    }()
}, SPE.Group = function(a) {
    "use strict";
    var b = SPE.utils, c = b.types;
    a = b.ensureTypedArg(a, c.OBJECT, {}), a.texture = b.ensureTypedArg(a.texture, c.OBJECT, {}), 
    this.uuid = THREE.Math.generateUUID(), this.fixedTimeStep = b.ensureTypedArg(a.fixedTimeStep, c.NUMBER, .016), 
    this.texture = b.ensureInstanceOf(a.texture.value, THREE.Texture, null), this.textureFrames = b.ensureInstanceOf(a.texture.frames, THREE.Vector2, new THREE.Vector2(1, 1)), 
    this.textureFrameCount = b.ensureTypedArg(a.texture.frameCount, c.NUMBER, this.textureFrames.x * this.textureFrames.y), 
    this.textureLoop = b.ensureTypedArg(a.texture.loop, c.NUMBER, 1), this.textureFrames.max(new THREE.Vector2(1, 1)), 
    this.hasPerspective = b.ensureTypedArg(a.hasPerspective, c.BOOLEAN, !0), this.colorize = b.ensureTypedArg(a.colorize, c.BOOLEAN, !0), 
    this.maxParticleCount = b.ensureTypedArg(a.maxParticleCount, c.NUMBER, null), this.blending = b.ensureTypedArg(a.blending, c.NUMBER, THREE.AdditiveBlending), 
    this.transparent = b.ensureTypedArg(a.transparent, c.BOOLEAN, !0), this.alphaTest = parseFloat(b.ensureTypedArg(a.alphaTest, c.NUMBER, 0)), 
    this.depthWrite = b.ensureTypedArg(a.depthWrite, c.BOOLEAN, !1), this.depthTest = b.ensureTypedArg(a.depthTest, c.BOOLEAN, !0), 
    this.fog = b.ensureTypedArg(a.fog, c.BOOLEAN, !0), this.scale = b.ensureTypedArg(a.scale, c.NUMBER, 300), 
    this.emitters = [], this.emitterIDs = [], this._pool = [], this._poolCreationSettings = null, 
    this._createNewWhenPoolEmpty = 0, this._attributesNeedRefresh = !1, this._attributesNeedDynamicReset = !1, 
    this.particleCount = 0, this.uniforms = {
        texture: {
            type: "t",
            value: this.texture
        },
        textureAnimation: {
            type: "v4",
            value: new THREE.Vector4(this.textureFrames.x, this.textureFrames.y, this.textureFrameCount, Math.max(Math.abs(this.textureLoop), 1))
        },
        fogColor: {
            type: "c",
            value: null
        },
        fogNear: {
            type: "f",
            value: 10
        },
        fogFar: {
            type: "f",
            value: 200
        },
        fogDensity: {
            type: "f",
            value: .5
        },
        deltaTime: {
            type: "f",
            value: 0
        },
        runTime: {
            type: "f",
            value: 0
        },
        scale: {
            type: "f",
            value: this.scale
        }
    }, this.defines = {
        HAS_PERSPECTIVE: this.hasPerspective,
        COLORIZE: this.colorize,
        VALUE_OVER_LIFETIME_LENGTH: SPE.valueOverLifetimeLength,
        SHOULD_ROTATE_TEXTURE: !1,
        SHOULD_ROTATE_PARTICLES: !1,
        SHOULD_WIGGLE_PARTICLES: !1,
        SHOULD_CALCULATE_SPRITE: this.textureFrames.x > 1 || this.textureFrames.y > 1
    }, this.attributes = {
        position: new SPE.ShaderAttribute("v3", !0),
        acceleration: new SPE.ShaderAttribute("v4", !0),
        velocity: new SPE.ShaderAttribute("v3", !0),
        rotation: new SPE.ShaderAttribute("v4", !0),
        rotationCenter: new SPE.ShaderAttribute("v3", !0),
        params: new SPE.ShaderAttribute("v4", !0),
        size: new SPE.ShaderAttribute("v4", !0),
        angle: new SPE.ShaderAttribute("v4", !0),
        color: new SPE.ShaderAttribute("v4", !0),
        opacity: new SPE.ShaderAttribute("v4", !0)
    }, this.attributeKeys = Object.keys(this.attributes), this.attributeCount = this.attributeKeys.length, 
    this.material = new THREE.ShaderMaterial({
        uniforms: this.uniforms,
        vertexShader: SPE.shaders.vertex,
        fragmentShader: SPE.shaders.fragment,
        blending: this.blending,
        transparent: this.transparent,
        alphaTest: this.alphaTest,
        depthWrite: this.depthWrite,
        depthTest: this.depthTest,
        defines: this.defines,
        fog: this.fog
    }), this.geometry = new THREE.BufferGeometry(), this.mesh = new THREE.Points(this.geometry, this.material), 
    null === this.maxParticleCount && console.warn("SPE.Group: No maxParticleCount specified. Adding emitters after rendering will probably cause errors.");
}, SPE.Group.constructor = SPE.Group, SPE.Group.prototype._updateDefines = function() {
    "use strict";
    var a, b = this.emitters, c = b.length - 1, d = this.defines;
    for (c; c >= 0; --c) a = b[c], d.SHOULD_CALCULATE_SPRITE || (d.SHOULD_ROTATE_TEXTURE = d.SHOULD_ROTATE_TEXTURE || !!Math.max(Math.max.apply(null, a.angle.value), Math.max.apply(null, a.angle.spread))), 
    d.SHOULD_ROTATE_PARTICLES = d.SHOULD_ROTATE_PARTICLES || !!Math.max(a.rotation.angle, a.rotation.angleSpread), 
    d.SHOULD_WIGGLE_PARTICLES = d.SHOULD_WIGGLE_PARTICLES || !!Math.max(a.wiggle.value, a.wiggle.spread);
    this.material.needsUpdate = !0;
}, SPE.Group.prototype._applyAttributesToGeometry = function() {
    "use strict";
    var a, b, c = this.attributes, d = this.geometry, e = d.attributes;
    for (var f in c) c.hasOwnProperty(f) && (a = c[f], b = e[f], b ? b.array = a.typedArray.array : d.addAttribute(f, a.bufferAttribute), 
    a.bufferAttribute.needsUpdate = !0);
    this.geometry.setDrawRange(0, this.particleCount);
}, SPE.Group.prototype.addEmitter = function(a) {
    "use strict";
    if (a instanceof SPE.Emitter == 0) return void console.error("`emitter` argument must be instance of SPE.Emitter. Was provided with:", a);
    if (this.emitterIDs.indexOf(a.uuid) > -1) return void console.error("Emitter already exists in this group. Will not add again.");
    if (null !== a.group) return void console.error("Emitter already belongs to another group. Will not add to requested group.");
    var b = this.attributes, c = this.particleCount, d = c + a.particleCount;
    this.particleCount = d, null !== this.maxParticleCount && this.particleCount > this.maxParticleCount && console.warn("SPE.Group: maxParticleCount exceeded. Requesting", this.particleCount, "particles, can support only", this.maxParticleCount), 
    a._calculatePPSValue(a.maxAge._value + a.maxAge._spread), a._setBufferUpdateRanges(this.attributeKeys), 
    a._setAttributeOffset(c), a.group = this, a.attributes = this.attributes;
    for (var e in b) b.hasOwnProperty(e) && b[e]._createBufferAttribute(null !== this.maxParticleCount ? this.maxParticleCount : this.particleCount);
    for (var f = c; d > f; ++f) a._assignPositionValue(f), a._assignForceValue(f, "velocity"), 
    a._assignForceValue(f, "acceleration"), a._assignAbsLifetimeValue(f, "opacity"), 
    a._assignAbsLifetimeValue(f, "size"), a._assignAngleValue(f), a._assignRotationValue(f), 
    a._assignParamsValue(f), a._assignColorValue(f);
    return this._applyAttributesToGeometry(), this.emitters.push(a), this.emitterIDs.push(a.uuid), 
    this._updateDefines(a), this.material.needsUpdate = !0, this.geometry.needsUpdate = !0, 
    this._attributesNeedRefresh = !0, this;
}, SPE.Group.prototype.removeEmitter = function(a) {
    "use strict";
    var b = this.emitterIDs.indexOf(a.uuid);
    if (a instanceof SPE.Emitter == 0) return void console.error("`emitter` argument must be instance of SPE.Emitter. Was provided with:", a);
    if (-1 === b) return void console.error("Emitter does not exist in this group. Will not remove.");
    for (var c = a.attributeOffset, d = c + a.particleCount, e = this.attributes.params.typedArray, f = c; d > f; ++f) e.array[4 * f] = 0, 
    e.array[4 * f + 1] = 0;
    this.emitters.splice(b, 1), this.emitterIDs.splice(b, 1);
    for (var g in this.attributes) this.attributes.hasOwnProperty(g) && this.attributes[g].splice(c, d);
    this.particleCount -= a.particleCount, a._onRemove(), this._attributesNeedRefresh = !0;
}, SPE.Group.prototype.getFromPool = function() {
    "use strict";
    var a = this._pool, b = this._createNewWhenPoolEmpty;
    if (a.length) return a.pop();
    if (b) {
        var c = new SPE.Emitter(this._poolCreationSettings);
        return this.addEmitter(c), c;
    }
    return null;
}, SPE.Group.prototype.releaseIntoPool = function(a) {
    "use strict";
    return a instanceof SPE.Emitter == 0 ? void console.error("Argument is not instanceof SPE.Emitter:", a) : (a.reset(), 
    this._pool.unshift(a), this);
}, SPE.Group.prototype.getPool = function() {
    "use strict";
    return this._pool;
}, SPE.Group.prototype.addPool = function(a, b, c) {
    "use strict";
    var d;
    this._poolCreationSettings = b, this._createNewWhenPoolEmpty = !!c;
    for (var e = 0; a > e; ++e) d = Array.isArray(b) ? new SPE.Emitter(b[e]) : new SPE.Emitter(b), 
    this.addEmitter(d), this.releaseIntoPool(d);
    return this;
}, SPE.Group.prototype._triggerSingleEmitter = function(a) {
    "use strict";
    var b = this.getFromPool(), c = this;
    return null === b ? void console.log("SPE.Group pool ran out.") : (a instanceof THREE.Vector3 && (b.position.value.copy(a), 
    b.position.value = b.position.value), b.enable(), setTimeout(function() {
        b.disable(), c.releaseIntoPool(b);
    }, 1e3 * Math.max(b.duration, b.maxAge.value + b.maxAge.spread)), this);
}, SPE.Group.prototype.triggerPoolEmitter = function(a, b) {
    "use strict";
    if ("number" == typeof a && a > 1) for (var c = 0; a > c; ++c) this._triggerSingleEmitter(b); else this._triggerSingleEmitter(b);
    return this;
}, SPE.Group.prototype._updateUniforms = function(a) {
    "use strict";
    this.uniforms.runTime.value += a, this.uniforms.deltaTime.value = a;
}, SPE.Group.prototype._resetBufferRanges = function() {
    "use strict";
    var a = this.attributeKeys, b = this.attributeCount - 1, c = this.attributes;
    for (b; b >= 0; --b) c[a[b]].resetUpdateRange();
}, SPE.Group.prototype._updateBuffers = function(a) {
    "use strict";
    var b, c, d, e = this.attributeKeys, f = this.attributeCount - 1, g = this.attributes, h = a.bufferUpdateRanges;
    for (f; f >= 0; --f) b = e[f], c = h[b], d = g[b], d.setUpdateRange(c.min, c.max), 
    d.flagUpdate();
}, SPE.Group.prototype.tick = function(a) {
    "use strict";
    var b, c = this.emitters, d = c.length, e = a || this.fixedTimeStep, f = this.attributeKeys, g = this.attributes;
    if (this._updateUniforms(e), this._resetBufferRanges(), 0 !== d || !1 !== this._attributesNeedRefresh || !1 !== this._attributesNeedDynamicReset) {
        for (var h, b = 0; d > b; ++b) h = c[b], h.tick(e), this._updateBuffers(h);
        if (!0 === this._attributesNeedDynamicReset) {
            for (b = this.attributeCount - 1; b >= 0; --b) g[f[b]].resetDynamic();
            this._attributesNeedDynamicReset = !1;
        }
        if (!0 === this._attributesNeedRefresh) {
            for (b = this.attributeCount - 1; b >= 0; --b) g[f[b]].forceUpdateAll();
            this._attributesNeedRefresh = !1, this._attributesNeedDynamicReset = !0;
        }
    }
}, SPE.Group.prototype.dispose = function() {
    "use strict";
    return this.geometry.dispose(), this.material.dispose(), this;
}, SPE.Emitter = function(a) {
    "use strict";
    var b = SPE.utils, c = b.types, d = SPE.valueOverLifetimeLength;
    a = b.ensureTypedArg(a, c.OBJECT, {}), a.position = b.ensureTypedArg(a.position, c.OBJECT, {}), 
    a.velocity = b.ensureTypedArg(a.velocity, c.OBJECT, {}), a.acceleration = b.ensureTypedArg(a.acceleration, c.OBJECT, {}), 
    a.radius = b.ensureTypedArg(a.radius, c.OBJECT, {}), a.drag = b.ensureTypedArg(a.drag, c.OBJECT, {}), 
    a.rotation = b.ensureTypedArg(a.rotation, c.OBJECT, {}), a.color = b.ensureTypedArg(a.color, c.OBJECT, {}), 
    a.opacity = b.ensureTypedArg(a.opacity, c.OBJECT, {}), a.size = b.ensureTypedArg(a.size, c.OBJECT, {}), 
    a.angle = b.ensureTypedArg(a.angle, c.OBJECT, {}), a.wiggle = b.ensureTypedArg(a.wiggle, c.OBJECT, {}), 
    a.maxAge = b.ensureTypedArg(a.maxAge, c.OBJECT, {}), a.onParticleSpawn && console.warn("onParticleSpawn has been removed. Please set properties directly to alter values at runtime."), 
    this.uuid = THREE.Math.generateUUID(), this.type = b.ensureTypedArg(a.type, c.NUMBER, SPE.distributions.BOX), 
    this.position = {
        _value: b.ensureInstanceOf(a.position.value, THREE.Vector3, new THREE.Vector3()),
        _spread: b.ensureInstanceOf(a.position.spread, THREE.Vector3, new THREE.Vector3()),
        _spreadClamp: b.ensureInstanceOf(a.position.spreadClamp, THREE.Vector3, new THREE.Vector3()),
        _distribution: b.ensureTypedArg(a.position.distribution, c.NUMBER, this.type),
        _randomise: b.ensureTypedArg(a.position.randomise, c.BOOLEAN, !1),
        _radius: b.ensureTypedArg(a.position.radius, c.NUMBER, 10),
        _radiusScale: b.ensureInstanceOf(a.position.radiusScale, THREE.Vector3, new THREE.Vector3(1, 1, 1)),
        _distributionClamp: b.ensureTypedArg(a.position.distributionClamp, c.NUMBER, 0)
    }, this.velocity = {
        _value: b.ensureInstanceOf(a.velocity.value, THREE.Vector3, new THREE.Vector3()),
        _spread: b.ensureInstanceOf(a.velocity.spread, THREE.Vector3, new THREE.Vector3()),
        _distribution: b.ensureTypedArg(a.velocity.distribution, c.NUMBER, this.type),
        _randomise: b.ensureTypedArg(a.position.randomise, c.BOOLEAN, !1)
    }, this.acceleration = {
        _value: b.ensureInstanceOf(a.acceleration.value, THREE.Vector3, new THREE.Vector3()),
        _spread: b.ensureInstanceOf(a.acceleration.spread, THREE.Vector3, new THREE.Vector3()),
        _distribution: b.ensureTypedArg(a.acceleration.distribution, c.NUMBER, this.type),
        _randomise: b.ensureTypedArg(a.position.randomise, c.BOOLEAN, !1)
    }, this.drag = {
        _value: b.ensureTypedArg(a.drag.value, c.NUMBER, 0),
        _spread: b.ensureTypedArg(a.drag.spread, c.NUMBER, 0),
        _randomise: b.ensureTypedArg(a.position.randomise, c.BOOLEAN, !1)
    }, this.wiggle = {
        _value: b.ensureTypedArg(a.wiggle.value, c.NUMBER, 0),
        _spread: b.ensureTypedArg(a.wiggle.spread, c.NUMBER, 0)
    }, this.rotation = {
        _axis: b.ensureInstanceOf(a.rotation.axis, THREE.Vector3, new THREE.Vector3(0, 1, 0)),
        _axisSpread: b.ensureInstanceOf(a.rotation.axisSpread, THREE.Vector3, new THREE.Vector3()),
        _angle: b.ensureTypedArg(a.rotation.angle, c.NUMBER, 0),
        _angleSpread: b.ensureTypedArg(a.rotation.angleSpread, c.NUMBER, 0),
        _static: b.ensureTypedArg(a.rotation.static, c.BOOLEAN, !1),
        _center: b.ensureInstanceOf(a.rotation.center, THREE.Vector3, this.position._value.clone()),
        _randomise: b.ensureTypedArg(a.position.randomise, c.BOOLEAN, !1)
    }, this.maxAge = {
        _value: b.ensureTypedArg(a.maxAge.value, c.NUMBER, 2),
        _spread: b.ensureTypedArg(a.maxAge.spread, c.NUMBER, 0)
    }, this.color = {
        _value: b.ensureArrayInstanceOf(a.color.value, THREE.Color, new THREE.Color()),
        _spread: b.ensureArrayInstanceOf(a.color.spread, THREE.Vector3, new THREE.Vector3()),
        _randomise: b.ensureTypedArg(a.position.randomise, c.BOOLEAN, !1)
    }, this.opacity = {
        _value: b.ensureArrayTypedArg(a.opacity.value, c.NUMBER, 1),
        _spread: b.ensureArrayTypedArg(a.opacity.spread, c.NUMBER, 0),
        _randomise: b.ensureTypedArg(a.position.randomise, c.BOOLEAN, !1)
    }, this.size = {
        _value: b.ensureArrayTypedArg(a.size.value, c.NUMBER, 1),
        _spread: b.ensureArrayTypedArg(a.size.spread, c.NUMBER, 0),
        _randomise: b.ensureTypedArg(a.position.randomise, c.BOOLEAN, !1)
    }, this.angle = {
        _value: b.ensureArrayTypedArg(a.angle.value, c.NUMBER, 0),
        _spread: b.ensureArrayTypedArg(a.angle.spread, c.NUMBER, 0),
        _randomise: b.ensureTypedArg(a.position.randomise, c.BOOLEAN, !1)
    }, this.particleCount = b.ensureTypedArg(a.particleCount, c.NUMBER, 100), this.duration = b.ensureTypedArg(a.duration, c.NUMBER, null), 
    this.isStatic = b.ensureTypedArg(a.isStatic, c.BOOLEAN, !1), this.activeMultiplier = b.ensureTypedArg(a.activeMultiplier, c.NUMBER, 1), 
    this.direction = b.ensureTypedArg(a.direction, c.NUMBER, 1), this.alive = b.ensureTypedArg(a.alive, c.BOOLEAN, !0), 
    this.particlesPerSecond = 0, this.activationIndex = 0, this.attributeOffset = 0, 
    this.attributeEnd = 0, this.age = 0, this.activeParticleCount = 0, this.group = null, 
    this.attributes = null, this.paramsArray = null, this.resetFlags = {
        position: b.ensureTypedArg(a.position.randomise, c.BOOLEAN, !1) || b.ensureTypedArg(a.radius.randomise, c.BOOLEAN, !1),
        velocity: b.ensureTypedArg(a.velocity.randomise, c.BOOLEAN, !1),
        acceleration: b.ensureTypedArg(a.acceleration.randomise, c.BOOLEAN, !1) || b.ensureTypedArg(a.drag.randomise, c.BOOLEAN, !1),
        rotation: b.ensureTypedArg(a.rotation.randomise, c.BOOLEAN, !1),
        rotationCenter: b.ensureTypedArg(a.rotation.randomise, c.BOOLEAN, !1),
        size: b.ensureTypedArg(a.size.randomise, c.BOOLEAN, !1),
        color: b.ensureTypedArg(a.color.randomise, c.BOOLEAN, !1),
        opacity: b.ensureTypedArg(a.opacity.randomise, c.BOOLEAN, !1),
        angle: b.ensureTypedArg(a.angle.randomise, c.BOOLEAN, !1)
    }, this.updateFlags = {}, this.updateCounts = {}, this.updateMap = {
        maxAge: "params",
        position: "position",
        velocity: "velocity",
        acceleration: "acceleration",
        drag: "acceleration",
        wiggle: "params",
        rotation: "rotation",
        size: "size",
        color: "color",
        opacity: "opacity",
        angle: "angle"
    };
    for (var e in this.updateMap) this.updateMap.hasOwnProperty(e) && (this.updateCounts[this.updateMap[e]] = 0, 
    this.updateFlags[this.updateMap[e]] = !1, this._createGetterSetters(this[e], e));
    this.bufferUpdateRanges = {}, this.attributeKeys = null, this.attributeCount = 0, 
    b.ensureValueOverLifetimeCompliance(this.color, d, d), b.ensureValueOverLifetimeCompliance(this.opacity, d, d), 
    b.ensureValueOverLifetimeCompliance(this.size, d, d), b.ensureValueOverLifetimeCompliance(this.angle, d, d);
}, SPE.Emitter.constructor = SPE.Emitter, SPE.Emitter.prototype._createGetterSetters = function(a, b) {
    "use strict";
    var c = this;
    for (var d in a) if (a.hasOwnProperty(d)) {
        var e = d.replace("_", "");
        Object.defineProperty(a, e, {
            get: function(a) {
                return function() {
                    return this[a];
                };
            }(d),
            set: function(a) {
                return function(d) {
                    var e = c.updateMap[b], f = this[a], g = SPE.valueOverLifetimeLength;
                    "_rotationCenter" === a ? (c.updateFlags.rotationCenter = !0, c.updateCounts.rotationCenter = 0) : "_randomise" === a ? c.resetFlags[e] = d : (c.updateFlags[e] = !0, 
                    c.updateCounts[e] = 0), c.group._updateDefines(), this[a] = d, Array.isArray(f) && SPE.utils.ensureValueOverLifetimeCompliance(c[b], g, g);
                };
            }(d)
        });
    }
}, SPE.Emitter.prototype._setBufferUpdateRanges = function(a) {
    "use strict";
    this.attributeKeys = a, this.attributeCount = a.length;
    for (var b = this.attributeCount - 1; b >= 0; --b) this.bufferUpdateRanges[a[b]] = {
        min: Number.POSITIVE_INFINITY,
        max: Number.NEGATIVE_INFINITY
    };
}, SPE.Emitter.prototype._calculatePPSValue = function(a) {
    "use strict";
    var b = this.particleCount;
    this.duration ? this.particlesPerSecond = b / (a < this.duration ? a : this.duration) : this.particlesPerSecond = b / a;
}, SPE.Emitter.prototype._setAttributeOffset = function(a) {
    this.attributeOffset = a, this.activationIndex = a, this.activationEnd = a + this.particleCount;
}, SPE.Emitter.prototype._assignValue = function(a, b) {
    "use strict";
    switch (a) {
      case "position":
        this._assignPositionValue(b);
        break;

      case "velocity":
      case "acceleration":
        this._assignForceValue(b, a);
        break;

      case "size":
      case "opacity":
        this._assignAbsLifetimeValue(b, a);
        break;

      case "angle":
        this._assignAngleValue(b);
        break;

      case "params":
        this._assignParamsValue(b);
        break;

      case "rotation":
        this._assignRotationValue(b);
        break;

      case "color":
        this._assignColorValue(b);
    }
}, SPE.Emitter.prototype._assignPositionValue = function(a) {
    "use strict";
    var b = SPE.distributions, c = SPE.utils, d = this.position, e = this.attributes.position, f = d._value, g = d._spread;
    switch (d._distribution) {
      case b.BOX:
        c.randomVector3(e, a, f, g, d._spreadClamp);
        break;

      case b.SPHERE:
        c.randomVector3OnSphere(e, a, f, d._radius, d._spread.x, d._radiusScale, d._spreadClamp.x, d._distributionClamp || this.particleCount);
        break;

      case b.DISC:
        c.randomVector3OnDisc(e, a, f, d._radius, d._spread.x, d._radiusScale, d._spreadClamp.x);
    }
}, SPE.Emitter.prototype._assignForceValue = function(a, b) {
    "use strict";
    var c, d, e, f, g, h = SPE.distributions, i = SPE.utils, j = this[b], k = j._value, l = j._spread;
    switch (j._distribution) {
      case h.BOX:
        i.randomVector3(this.attributes[b], a, k, l);
        break;

      case h.SPHERE:
        c = this.attributes.position.typedArray.array, g = 3 * a, d = c[g], e = c[g + 1], 
        f = c[g + 2], i.randomDirectionVector3OnSphere(this.attributes[b], a, d, e, f, this.position._value, j._value.x, j._spread.x);
        break;

      case h.DISC:
        c = this.attributes.position.typedArray.array, g = 3 * a, d = c[g], e = c[g + 1], 
        f = c[g + 2], i.randomDirectionVector3OnDisc(this.attributes[b], a, d, e, f, this.position._value, j._value.x, j._spread.x);
    }
    if ("acceleration" === b) {
        var m = i.clamp(i.randomFloat(this.drag._value, this.drag._spread), 0, 1);
        this.attributes.acceleration.typedArray.array[4 * a + 3] = m;
    }
}, SPE.Emitter.prototype._assignAbsLifetimeValue = function(a, b) {
    "use strict";
    var c, d = this.attributes[b].typedArray, e = this[b], f = SPE.utils;
    f.arrayValuesAreEqual(e._value) && f.arrayValuesAreEqual(e._spread) ? (c = Math.abs(f.randomFloat(e._value[0], e._spread[0])), 
    d.setVec4Components(a, c, c, c, c)) : d.setVec4Components(a, Math.abs(f.randomFloat(e._value[0], e._spread[0])), Math.abs(f.randomFloat(e._value[1], e._spread[1])), Math.abs(f.randomFloat(e._value[2], e._spread[2])), Math.abs(f.randomFloat(e._value[3], e._spread[3])));
}, SPE.Emitter.prototype._assignAngleValue = function(a) {
    "use strict";
    var b, c = this.attributes.angle.typedArray, d = this.angle, e = SPE.utils;
    e.arrayValuesAreEqual(d._value) && e.arrayValuesAreEqual(d._spread) ? (b = e.randomFloat(d._value[0], d._spread[0]), 
    c.setVec4Components(a, b, b, b, b)) : c.setVec4Components(a, e.randomFloat(d._value[0], d._spread[0]), e.randomFloat(d._value[1], d._spread[1]), e.randomFloat(d._value[2], d._spread[2]), e.randomFloat(d._value[3], d._spread[3]));
}, SPE.Emitter.prototype._assignParamsValue = function(a) {
    "use strict";
    this.attributes.params.typedArray.setVec4Components(a, this.isStatic ? 1 : 0, 0, Math.abs(SPE.utils.randomFloat(this.maxAge._value, this.maxAge._spread)), SPE.utils.randomFloat(this.wiggle._value, this.wiggle._spread));
}, SPE.Emitter.prototype._assignRotationValue = function(a) {
    "use strict";
    this.attributes.rotation.typedArray.setVec3Components(a, SPE.utils.getPackedRotationAxis(this.rotation._axis, this.rotation._axisSpread), SPE.utils.randomFloat(this.rotation._angle, this.rotation._angleSpread), this.rotation._static ? 0 : 1), 
    this.attributes.rotationCenter.typedArray.setVec3(a, this.rotation._center);
}, SPE.Emitter.prototype._assignColorValue = function(a) {
    "use strict";
    SPE.utils.randomColorAsHex(this.attributes.color, a, this.color._value, this.color._spread);
}, SPE.Emitter.prototype._resetParticle = function(a) {
    "use strict";
    for (var b, c, d = this.resetFlags, e = this.updateFlags, f = this.updateCounts, g = this.attributeKeys, h = this.attributeCount - 1; h >= 0; --h) b = g[h], 
    c = e[b], !0 !== d[b] && !0 !== c || (this._assignValue(b, a), this._updateAttributeUpdateRange(b, a), 
    !0 === c && f[b] === this.particleCount ? (e[b] = !1, f[b] = 0) : 1 == c && ++f[b]);
}, SPE.Emitter.prototype._updateAttributeUpdateRange = function(a, b) {
    "use strict";
    var c = this.bufferUpdateRanges[a];
    c.min = Math.min(b, c.min), c.max = Math.max(b, c.max);
}, SPE.Emitter.prototype._resetBufferRanges = function() {
    "use strict";
    var a, b = this.bufferUpdateRanges, c = this.bufferUpdateKeys, d = this.bufferUpdateCount - 1;
    for (d; d >= 0; --d) a = c[d], b[a].min = Number.POSITIVE_INFINITY, b[a].max = Number.NEGATIVE_INFINITY;
}, SPE.Emitter.prototype._onRemove = function() {
    "use strict";
    this.particlesPerSecond = 0, this.attributeOffset = 0, this.activationIndex = 0, 
    this.activeParticleCount = 0, this.group = null, this.attributes = null, this.paramsArray = null, 
    this.age = 0;
}, SPE.Emitter.prototype._decrementParticleCount = function() {
    "use strict";
    --this.activeParticleCount;
}, SPE.Emitter.prototype._incrementParticleCount = function() {
    "use strict";
    ++this.activeParticleCount;
}, SPE.Emitter.prototype._checkParticleAges = function(a, b, c, d) {
    "use strict";
    for (var e, f, g, h, i = b - 1; i >= a; --i) e = 4 * i, 0 !== (h = c[e]) && (g = c[e + 1], 
    f = c[e + 2], 1 === this.direction ? (g += d) >= f && (g = 0, h = 0, this._decrementParticleCount()) : 0 >= (g -= d) && (g = f, 
    h = 0, this._decrementParticleCount()), c[e] = h, c[e + 1] = g, this._updateAttributeUpdateRange("params", i));
}, SPE.Emitter.prototype._activateParticles = function(a, b, c, d) {
    "use strict";
    for (var e, f, g = this.direction, h = a; b > h; ++h) e = 4 * h, 0 != c[e] && 1 !== this.particleCount || (this._incrementParticleCount(), 
    c[e] = 1, this._resetParticle(h), f = d * (h - a), c[e + 1] = -1 === g ? c[e + 2] - f : f, 
    this._updateAttributeUpdateRange("params", h));
}, SPE.Emitter.prototype.tick = function(a) {
    "use strict";
    if (!this.isStatic) {
        null === this.paramsArray && (this.paramsArray = this.attributes.params.typedArray.array);
        var b = this.attributeOffset, c = b + this.particleCount, d = this.paramsArray, e = this.particlesPerSecond * this.activeMultiplier * a, f = this.activationIndex;
        if (this._resetBufferRanges(), this._checkParticleAges(b, c, d, a), !1 === this.alive) return void (this.age = 0);
        if (null !== this.duration && this.age > this.duration) return this.alive = !1, 
        void (this.age = 0);
        var g = 1 === this.particleCount ? f : 0 | f, h = Math.min(g + e, this.activationEnd), i = h - this.activationIndex | 0, j = i > 0 ? a / i : 0;
        this._activateParticles(g, h, d, j), this.activationIndex += e, this.activationIndex > c && (this.activationIndex = b), 
        this.age += a;
    }
}, SPE.Emitter.prototype.reset = function(a) {
    "use strict";
    if (this.age = 0, this.alive = !1, !0 === a) {
        for (var b, c = this.attributeOffset, d = c + this.particleCount, e = this.paramsArray, f = this.attributes.params.bufferAttribute, g = d - 1; g >= c; --g) b = 4 * g, 
        e[b] = 0, e[b + 1] = 0;
        f.updateRange.offset = 0, f.updateRange.count = -1, f.needsUpdate = !0;
    }
    return this;
}, SPE.Emitter.prototype.enable = function() {
    "use strict";
    return this.alive = !0, this;
}, SPE.Emitter.prototype.disable = function() {
    "use strict";
    return this.alive = !1, this;
}, SPE.Emitter.prototype.remove = function() {
    "use strict";
    return null !== this.group ? this.group.removeEmitter(this) : console.error("Emitter does not belong to a group, cannot remove."), 
    this;
}, HashMap.prototype.clear = function() {
    for (key in this.map) this.map["" + key] = void 0;
    this.total = 0, this.keys = new Array();
}, HashMap.prototype.clone = function() {
    var a = new HashMap();
    for (key in this.map) a.map["" + key] = this.map["" + key];
    return a;
}, HashMap.prototype.containsKey = function(a) {
    var b = !1;
    for (innerkey in this.map) if (innerkey == a) {
        b = !0;
        break;
    }
    return b;
}, HashMap.prototype.containsValue = function(a) {
    var b = !1;
    for (key in this.map) if (this.map["" + key] == a) {
        b = !0;
        break;
    }
    return b;
}, HashMap.prototype.get = function(a) {
    for (innerkey in this.map) if (innerkey == a) return this.map["" + innerkey];
    return null;
}, HashMap.prototype.isEmpty = function() {
    return 0 == this.total;
}, HashMap.prototype.put = function(a, b) {
    return this.maxDimension ? this.total < this.maxDimension && (this.map["" + a] = b, 
    this.keys.push(a), this.total += 1, !0) : (this.map["" + a] = b, this.keys.push(a), 
    this.total += 1, !0);
}, HashMap.prototype.remove = function(a) {
    try {
        for (innerkey in this.map) if (innerkey == a) {
            for (var b = this.keys.indexOf(innerkey), c = new Array(), d = 0; d < this.keys.length; d++) d != b && c.push(this.keys[d]);
            return this.keys = new Array(), this.keys = c, delete this.map["" + innerkey], this.total = 0, 
            !0;
        }
        return !1;
    } catch (a) {
        return console.log("HASHMAP ERROR "), console.error(a), console.trace(), !1;
    }
}, HashMap.prototype.size = function() {
    return this.total;
}, window.M = window.M || {}, M.assetsManager = {}, M.assetsManager.completed = {
    sound: !1,
    video: !0,
    images: !1,
    general: !0,
    shaders: !1
}, M.assetsManager.load = function(a) {
    M.assetsManager.callback = a, M.audioEngine.load(), M.videoEngine.load(), M.imagesEngine.load(), 
    M.generalAssetsEngine.load(), M.fx.shadersEngine.load(), M.assetsManager.checkInterval = setInterval(M.assetsManager.check, 100);
}, M.assetsManager.loadingMessage = function(a) {}, M.assetsManager.check = function() {
    M.assetsManager.completed.sound && M.assetsManager.completed.video && M.assetsManager.completed.images && M.assetsManager.completed.general ? (M.assetsManager.loadingMessage(!0), 
    clearInterval(M.assetsManager.checkInterval), M.assetsManager.callback()) : M.assetsManager.loadingMessage(!1);
}, window.M = window.M || {}, M.fx = {}, window.M = window.M || {}, M.audioEngine = {
    DELAY_FACTOR: .02,
    DELAY_STEP: 1,
    DELAY_MIN_VALUE: .2,
    DELAY_NORMAL_VALUE: 40,
    VOLUME: 80,
    _volume: 80,
    soundPath: "js/core/sound/",
    soundModules: [ "js/core/audio/beat", "js/core/audio/sound", "js/core/audio/ambientSound" ],
    numSound: 0,
    soundLoaded: 0,
    load: function() {
        M.audioEngine.map = new HashMap(), M.audioEngine.sounds = [], M.audioEngine.AudioContext = window.AudioContext || window.webkitAudioContext || null, 
        M.audioEngine.AudioContext ? (M.audioEngine.context = new M.audioEngine.AudioContext(), 
        M.audioEngine.volume = M.audioEngine.context.createGain(), M.audioEngine.volume.gain.value = M.audioEngine.VOLUME, 
        M.audioEngine.volume.connect(M.audioEngine.context.destination)) : console.error("No Audio Context available, sorry.");
        for (var a in Assets.Audio) M.audioEngine.numSound++, M.audioEngine.loadSingleFile(a, Assets.Audio[a]);
        0 == M.audioEngine.numSound && (M.assetsManager.completed.sound = !0);
    },
    get: function(a) {
        return M.audioEngine.map.get(a) || !1;
    },
    loadSingleFile: function(a, b) {
        var c = new XMLHttpRequest();
        c.open("GET", b, !0), c.responseType = "arraybuffer", c.onload = function(b) {
            M.audioEngine.context.decodeAudioData(this.response, function(b) {
                M.audioEngine.map.put(a, b), M.audioEngine.soundLoaded++, M.audioEngine.checkLoad();
            }, function() {
                M.audioEngine.map.put(a, null), M.audioEngine.soundLoaded++, console.error("Decoding the audio buffer failed");
            });
        }, c.send();
    },
    checkLoad: function() {
        M.audioEngine.soundLoaded == M.audioEngine.numSound && (M.assetsManager.completed.sound = !0);
    },
    add: function(a) {
        M.audioEngine.sounds.push(a);
    },
    update: function() {
        var a = new Date();
        for (var b in M.audioEngine.sounds) {
            M.audioEngine.sounds[b].update(app.clock.getDelta()), app.camera.object.updateMatrixWorld();
            var c = new THREE.Vector3();
            c.setFromMatrixPosition(app.camera.object.matrixWorld), M.audioEngine.context.listener.setPosition(c.x, c.y, c.z);
            var d = app.camera.object.matrix;
            mx = d.elements[12], my = d.elements[13], mz = d.elements[14], d.elements[12] = d.elements[13] = d.elements[14] = 0;
            var e = new THREE.Vector3(0, 0, 1);
            e.applyProjection(d), e.normalize();
            var f = new THREE.Vector3(0, -1, 0);
            if (f.applyProjection(d), f.normalize(), M.audioEngine.context.listener.setOrientation(e.x, e.y, e.z, f.x, f.y, f.z), 
            d.elements[12] = mx, d.elements[13] = my, d.elements[14] = mz, +new Date() - a > 50) return;
        }
    }
}, Object.defineProperty(M.audioEngine, "VOLUME", {
    set: function(a) {
        M.audioEngine._volume = a, M.audioEngine.volume.gain.value = M.audioEngine._volume;
    },
    get: function() {
        if (M.audioEngine._volume) return M.audioEngine._volume;
    }
}), window.M = window.M || {}, M.videoEngine = {}, M.videoEngine.load = function() {}, 
function() {
    window.M = window.M || {}, M.imagesEngine = {
        numImages: 0,
        imagesLoaded: 0,
        defaults: {
            waterNormal: "assets/images/waternormals.jpg",
            water: "assets/images/water.jpg",
            smokeparticle: "assets/images/smokeparticle.png"
        },
        imagesDefault: {
            skybox: "assets/images/skybox_1.png"
        },
        load: function() {
            M.imagesEngine.map = new HashMap(), M.imagesEngine.images = [], M.imagesEngine.numImages = 0, 
            M.imagesEngine.loader = new THREE.TextureLoader(), M.imagesEngine.imageLoader = new THREE.ImageLoader(), 
            Object.assign(Assets.Textures, M.imagesEngine.defaults), Object.assign(Assets.Images, M.imagesEngine.imagesDefault);
            for (var a in Assets.Textures) M.imagesEngine.numImages++, M.imagesEngine.loadSingleFile(a, Assets.Textures[a]);
            for (var a in Assets.Images) M.imagesEngine.numImages++, M.imagesEngine.loadSingleImage(a, Assets.Images[a]);
            0 == M.imagesEngine.numImages && (M.assetsManager.completed.images = !0);
        },
        get: function(a) {
            return M.imagesEngine.map.get(a) || !1;
        },
        loadSingleImage: function(a, b) {
            try {
                M.imagesEngine.imagesLoaded++, M.imagesEngine.imageLoader.load(b, function(b) {
                    M.imagesEngine.map.put(a, b), M.imagesEngine.checkLoad();
                }, function() {}, function() {
                    console.log("An error occurred while fetching texture."), M.imagesEngine.checkLoad();
                });
            } catch (c) {
                console.log("[MAGE] error loading image " + a + " at path " + b);
            }
        },
        loadSingleFile: function(a, b) {
            try {
                M.imagesEngine.imagesLoaded++, M.imagesEngine.loader.load(b, function(b) {
                    M.imagesEngine.map.put(a, b), M.imagesEngine.checkLoad();
                }, function() {}, function() {
                    console.log("An error occurred while fetching texture."), M.imagesEngine.checkLoad();
                });
            } catch (a) {}
        },
        checkLoad: function() {
            M.imagesEngine.imagesLoaded == M.imagesEngine.numImages && (M.assetsManager.completed.images = !0);
        },
        add: function(a, b) {
            a && b && M.imagesEngine.map.put(a, b);
        }
    };
}(), window.M = window.M || {}, M.lightEngine = {
    delayFactor: .1,
    delayStep: 30,
    holderRadius: .01,
    holderSegments: 1,
    init: function() {
        M.lightEngine.map = new HashMap(), M.lightEngine.lights = [];
    },
    numLights: 0,
    add: function(a) {
        M.lightEngine.lights.push(a);
    },
    update: function() {
        var a = new Date();
        for (var b in M.lightEngine.lights) {
            if (M.lightEngine.lights[b].update(app.clock.getDelta()), +new Date() - a > 50) return;
        }
    }
}, M.lightEngine.init(), function() {
    window.M = window.M || {}, M.generalAssetsEngine = {}, M.generalAssetsEngine.load = function() {};
}(), window.M = window.M || {}, M.fx = M.fx || {}, M.fx.shadersEngine = {
    SHADERS_DIR: "app/shaders/",
    SHADERS: [],
    map: new HashMap(),
    shaders: [],
    shaders: {},
    numShaders: 0,
    shadersLoaded: 0,
    update: function() {},
    load: function() {
        if (Assets.Shaders) for (var a in Assets.Shaders) M.fx.shadersEngine.numShaders++, 
        M.fx.shadersEngine.loadSingleFile(a, Assets.Shaders[a]);
        0 == M.fx.shadersEngine.numShaders && (M.assetsManager.completed.shaders = !0);
    },
    get: function(a) {
        return M.fx.shadersEngine.map.get(a) || !1;
    },
    loadSingleFile: function(a, b) {
        if ("js" == b.split(".")[1]) include(b.split(".js")[0], this.checkLoad); else {
            var c = new XMLHttpRequest();
            c.open("GET", b, !0), c.responseType = "text", c.onload = function(b) {
                var c = M.fx.shadersEngine._parseShader(this.responseText);
                M.fx.shadersEngine.map.put(a, c), M.fx.shadersEngine.shadersLoaded++, M.fx.shadersEngine.checkLoad();
            }, c.send();
        }
    },
    _parseShader: function(a) {
        var b = {};
        return b.name = a.substring(a.indexOf("<name>") + 6, a.indexOf("</name>")), b.vertex = a.substring(a.indexOf("<vertex>") + 8, a.indexOf("</vertex>")), 
        b.fragment = a.substring(a.indexOf("<fragment>") + 10, a.indexOf("</fragment>")), 
        b.options = {}, b.attributes = {}, b.uniforms = {}, b;
    },
    create: function(a, b) {
        var c = {};
        c.name = a, c.vertex = b.vertex || "", c.fragment = b.fragment || "", c.options = b.options || {}, 
        c.attributes = b.attributes || {}, c.uniforms = b.uniforms || {}, c.instance = b.instance || !1, 
        M.fx.shadersEngine.SHADERS.push(a), M.fx.shadersEngine.map.put(a, c);
    },
    checkLoad: function() {
        M.fx.shadersEngine.shadersLoaded == M.fx.shadersEngine.numShaders && (M.assetsManager.completed.shaders = !0);
    },
    add: function(a) {
        M.fx.shadersEngine.shaders.push(a);
    }
}, window.M = window.M || {}, M.fx = M.fx || {}, M.fx.particlesEngine = {
    PARTICLES_DIR: "app/particles/",
    PARTICLES: [],
    map: new HashMap(),
    particles: [],
    particles: {},
    numParticles: 0,
    particlesLoaded: 0,
    update: function() {},
    load: function() {
        if (Assets.Particles) for (var a in Assets.Particles) M.fx.particlesEngine.numParticles++, 
        M.fx.particlesEngine.loadSingleFile(a, Assets.particles[a]);
        0 == M.fx.particlesEngine.numParticles && (M.assetsManager.completed.particles = !0);
    },
    get: function(a) {
        return M.fx.particlesEngine.map.get(a) || !1;
    },
    loadSingleFile: function(a, b) {
        if ("js" == b.split(".")[1]) include(b.split(".js")[0], this.checkLoad); else {
            var c = new XMLHttpRequest();
            c.open("GET", b, !0), c.responseType = "text", c.onload = function(b) {
                var c = M.fx.particlesEngine._parseParticle(this.responseText);
                M.fx.particlesEngine.map.put(a, c), M.fx.particlesEngine.particlesLoaded++, M.fx.particlesEngine.checkLoad();
            }, c.send();
        }
    },
    _parseParticle: function(a) {
        var b = {};
        return b.name = a.substring(a.indexOf("<name>") + 6, a.indexOf("</name>")), b.vertex = a.substring(a.indexOf("<vertex>") + 8, a.indexOf("</vertex>")), 
        b.fragment = a.substring(a.indexOf("<fragment>") + 10, a.indexOf("</fragment>")), 
        b.options = {}, b.attributes = {}, b.uniforms = {}, b;
    },
    create: function(a, b) {
        var c = {};
        c.name = a, c.vertex = b.vertex || "", c.fragment = b.fragment || "", c.options = b.options || {}, 
        c.attributes = b.attributes || {}, c.uniforms = b.uniforms || {}, c.instance = b.instance || !1, 
        M.fx.particlesEngine.PARTICLES.push(a), M.fx.particlesEngine.map.put(a, c);
    },
    checkLoad: function() {
        M.fx.particlesEngine.particlesLoaded == M.fx.particlesEngine.numParticles && (M.assetsManager.completed.particles = !0);
    },
    add: function(a) {
        M.fx.particlesEngine.PARTICLES.push(a);
    }
}, M.fx.particlesEngine.create("Rain", {
    instance: function(a) {
        return particleGroup = new SPE.Group({
            texture: {
                value: a.texture
            }
        }), emitter = new SPE.Emitter({
            maxAge: {
                value: 2
            },
            position: {
                value: new THREE.Vector3(0, 0, -50),
                spread: new THREE.Vector3(0, 0, 0)
            },
            acceleration: {
                value: new THREE.Vector3(0, -10, 0),
                spread: new THREE.Vector3(10, 0, 10)
            },
            velocity: {
                value: new THREE.Vector3(0, 25, 0),
                spread: new THREE.Vector3(10, 7.5, 10)
            },
            color: {
                value: [ new THREE.Color("white"), new THREE.Color("red") ]
            },
            size: {
                value: 1
            },
            particleCount: 2e3
        }), particleGroup.addEmitter(emitter), particleGroup.render = function() {
            particleGroup.tick(app.clock.getDelta());
        }, particleGroup;
    }
}), M.fx.shadersEngine.create("Skybox", {
    instance: function(a) {
        var b = new THREE.CubeTexture([]);
        b.format = THREE.RGBFormat;
        var c = function(a) {
            var c = function(b, c) {
                var d = 1024, e = document.createElement("canvas");
                return e.width = d, e.height = d, e.getContext("2d").drawImage(a, -b * d, -c * d), 
                e;
            };
            b.images[0] = c(2, 1), b.images[1] = c(0, 1), b.images[2] = c(1, 0), b.images[3] = c(1, 2), 
            b.images[4] = c(1, 1), b.images[5] = c(3, 1), b.needsUpdate = !0;
        };
        if (a.texture) c(a.texture); else {
            var d = a.textureName || "skybox";
            c(M.imagesEngine.get(d));
        }
        var e = THREE.ShaderLib.cube;
        e.uniforms.tCube.value = b;
        var f = new THREE.ShaderMaterial({
            fragmentShader: e.fragmentShader,
            vertexShader: e.vertexShader,
            uniforms: e.uniforms,
            depthWrite: !1,
            side: THREE.BackSide
        });
        return new THREE.Mesh(new THREE.BoxGeometry(1e6, 1e6, 1e6), f);
    },
    options: {
        textureName: {
            name: "texture",
            type: "string",
            default: "skybox",
            mandatory: !0
        }
    }
}), M.fx.shadersEngine.create("Atmosphere", {
    vertex: function() {
        return window.asModule ? "" : [ "varying vec3 vNormal;", "void main(){", "\t// compute intensity", "\tvNormal\t\t= normalize( normalMatrix * normal );", "\t// set gl_Position", "\tgl_Position\t= projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}" ].join("\n");
    },
    fragment: function() {
        return window.asModule ? "" : [ "uniform float coeficient;", "uniform float power;", "uniform vec3  glowColor;", "varying vec3  vNormal;", "void main(){", "\tfloat intensity\t= pow( coeficient - dot(vNormal, vec3(0.0, 0.0, 1.0)), power );", "\tgl_FragColor\t= vec4( glowColor * intensity, 1.0 );", "}" ].join("\n");
    },
    uniforms: function() {
        return window.asModule ? {} : {
            coeficient: {
                type: "f",
                value: 1
            },
            power: {
                type: "f",
                value: 2
            },
            glowColor: {
                type: "c",
                value: new THREE.Color("pink")
            }
        };
    },
    options: window.asModule ? {} : {
        side: THREE.FrontSide,
        blending: THREE.AdditiveBlending,
        transparent: !0,
        depthWrite: !1
    },
    attributes: {}
}), M.fx.shadersEngine.create("Mirror", {
    uniforms: function() {
        return {
            mirrorColor: {
                type: "c",
                value: new THREE.Color(8355711)
            },
            mirrorSampler: {
                type: "t",
                value: null
            },
            textureMatrix: {
                type: "m4",
                value: new THREE.Matrix4()
            }
        };
    },
    vertex: function() {
        return [ "uniform mat4 textureMatrix;", "varying vec4 mirrorCoord;", "void main() {", "vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );", "vec4 worldPosition = modelMatrix * vec4( position, 1.0 );", "mirrorCoord = textureMatrix * worldPosition;", "gl_Position = projectionMatrix * mvPosition;", "}" ].join("\n");
    },
    fragment: function() {
        return [ "uniform vec3 mirrorColor;", "uniform sampler2D mirrorSampler;", "varying vec4 mirrorCoord;", "float blendOverlay(float base, float blend) {", "return( base < 0.5 ? ( 2.0 * base * blend ) : (1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );", "}", "void main() {", "vec4 color = texture2DProj(mirrorSampler, mirrorCoord);", "color = vec4(blendOverlay(mirrorColor.r, color.r), blendOverlay(mirrorColor.g, color.g), blendOverlay(mirrorColor.b, color.b), 1.0);", "gl_FragColor = color;", "}" ].join("\n");
    },
    instance: function() {
        var a = function(a, b, c, d) {
            THREE.Object3D.call(this), this.name = "mirror_" + this.id, d = d || {}, this.matrixNeedsUpdate = !0;
            var e = void 0 !== d.textureWidth ? d.textureWidth : 512, f = void 0 !== d.textureHeight ? d.textureHeight : 512;
            this.clipBias = void 0 !== d.clipBias ? d.clipBias : 0;
            var g = void 0 !== d.color ? new THREE.Color(d.color) : new THREE.Color(8355711);
            if (this.renderer = a, this.mirrorPlane = new THREE.Plane(), this.normal = new THREE.Vector3(0, 0, 1), 
            this.mirrorWorldPosition = new THREE.Vector3(), this.cameraWorldPosition = new THREE.Vector3(), 
            this.rotationMatrix = new THREE.Matrix4(), this.lookAtPosition = new THREE.Vector3(0, 0, -1), 
            this.clipPlane = new THREE.Vector4(), void 0 !== d.debugMode && d.debugMode) {
                var h = new THREE.ArrowHelper(new THREE.Vector3(0, 0, 1), new THREE.Vector3(0, 0, 0), 10, 16777088), i = new THREE.Geometry();
                i.vertices.push(new THREE.Vector3(-10, -10, 0)), i.vertices.push(new THREE.Vector3(10, -10, 0)), 
                i.vertices.push(new THREE.Vector3(10, 10, 0)), i.vertices.push(new THREE.Vector3(-10, 10, 0)), 
                i.vertices.push(i.vertices[0]);
                var j = new THREE.Line(i, new THREE.LineBasicMaterial({
                    color: 16777088
                }));
                this.add(h), this.add(j);
            }
            b instanceof THREE.PerspectiveCamera ? this.camera = b : (this.camera = new THREE.PerspectiveCamera(), 
            console.log(this.name + ": camera is not a Perspective Camera!")), this.textureMatrix = new THREE.Matrix4(), 
            this.mirrorCamera = this.camera.clone(), this.mirrorCamera.matrixAutoUpdate = !0;
            var k = {
                minFilter: THREE.LinearFilter,
                magFilter: THREE.LinearFilter,
                format: THREE.RGBFormat,
                stencilBuffer: !1
            };
            this.renderTarget = new THREE.WebGLRenderTarget(e, f, k), this.renderTarget2 = new THREE.WebGLRenderTarget(e, f, k);
            var l = M.fx.shadersEngine.get("Mirror"), m = THREE.UniformsUtils.clone(l.uniforms());
            this.material = new THREE.ShaderMaterial({
                fragmentShader: l.fragment(),
                vertexShader: l.vertex(),
                uniforms: m
            }), this.material.uniforms.mirrorSampler.value = this.renderTarget.texture, this.material.uniforms.mirrorColor.value = g, 
            this.material.uniforms.textureMatrix.value = this.textureMatrix, THREE.Math.isPowerOfTwo(e) && THREE.Math.isPowerOfTwo(f) || (this.renderTarget.texture.generateMipmaps = !1, 
            this.renderTarget2.texture.generateMipmaps = !1), this.updateTextureMatrix(), this.render();
        };
        return a.prototype = Object.create(THREE.Object3D.prototype), a.prototype.constructor = a, 
        a.prototype.renderWithMirror = function(a) {
            this.updateTextureMatrix(), this.matrixNeedsUpdate = !1;
            var b = a.camera;
            a.camera = this.mirrorCamera, a.renderTemp(), a.material.uniforms.mirrorSampler.value = a.renderTarget2.texture, 
            this.render(), this.matrixNeedsUpdate = !0, a.material.uniforms.mirrorSampler.value = a.renderTarget.texture, 
            a.camera = b, a.updateTextureMatrix();
        }, a.prototype.updateTextureMatrix = function() {
            this.updateMatrixWorld(), this.camera.updateMatrixWorld(), this.mirrorWorldPosition.setFromMatrixPosition(this.matrixWorld), 
            this.cameraWorldPosition.setFromMatrixPosition(this.camera.matrixWorld), this.rotationMatrix.extractRotation(this.matrixWorld), 
            this.normal.set(0, 0, 1), this.normal.applyMatrix4(this.rotationMatrix);
            var a = this.mirrorWorldPosition.clone().sub(this.cameraWorldPosition);
            a.reflect(this.normal).negate(), a.add(this.mirrorWorldPosition), this.rotationMatrix.extractRotation(this.camera.matrixWorld), 
            this.lookAtPosition.set(0, 0, -1), this.lookAtPosition.applyMatrix4(this.rotationMatrix), 
            this.lookAtPosition.add(this.cameraWorldPosition);
            var b = this.mirrorWorldPosition.clone().sub(this.lookAtPosition);
            b.reflect(this.normal).negate(), b.add(this.mirrorWorldPosition), this.up.set(0, -1, 0), 
            this.up.applyMatrix4(this.rotationMatrix), this.up.reflect(this.normal).negate(), 
            this.mirrorCamera.position.copy(a), this.mirrorCamera.up = this.up, this.mirrorCamera.lookAt(b), 
            this.mirrorCamera.updateProjectionMatrix(), this.mirrorCamera.updateMatrixWorld(), 
            this.mirrorCamera.matrixWorldInverse.getInverse(this.mirrorCamera.matrixWorld), 
            this.textureMatrix.set(.5, 0, 0, .5, 0, .5, 0, .5, 0, 0, .5, .5, 0, 0, 0, 1), this.textureMatrix.multiply(this.mirrorCamera.projectionMatrix), 
            this.textureMatrix.multiply(this.mirrorCamera.matrixWorldInverse), this.mirrorPlane.setFromNormalAndCoplanarPoint(this.normal, this.mirrorWorldPosition), 
            this.mirrorPlane.applyMatrix4(this.mirrorCamera.matrixWorldInverse), this.clipPlane.set(this.mirrorPlane.normal.x, this.mirrorPlane.normal.y, this.mirrorPlane.normal.z, this.mirrorPlane.constant);
            var c = new THREE.Vector4(), d = this.mirrorCamera.projectionMatrix;
            c.x = (Math.sign(this.clipPlane.x) + d.elements[8]) / d.elements[0], c.y = (Math.sign(this.clipPlane.y) + d.elements[9]) / d.elements[5], 
            c.z = -1, c.w = (1 + d.elements[10]) / d.elements[14];
            var e = new THREE.Vector4();
            e = this.clipPlane.multiplyScalar(2 / this.clipPlane.dot(c)), d.elements[2] = e.x, 
            d.elements[6] = e.y, d.elements[10] = e.z + 1 - this.clipBias, d.elements[14] = e.w;
        }, a.prototype.render = function() {
            this.matrixNeedsUpdate && this.updateTextureMatrix(), this.matrixNeedsUpdate = !0;
            for (var a = this; null !== a.parent; ) a = a.parent;
            if (void 0 !== a && a instanceof THREE.Scene) {
                var b = this.material.visible;
                this.material.visible = !1, this.renderer.render(a, this.mirrorCamera, this.renderTarget, !0), 
                this.material.visible = b;
            }
        }, a;
    }()
}), M.fx.shadersEngine.create("Water", {
    uniforms: function() {
        return THREE.UniformsUtils.merge([ THREE.UniformsLib.fog, {
            normalSampler: {
                type: "t",
                value: null
            },
            mirrorSampler: {
                type: "t",
                value: null
            },
            alpha: {
                type: "f",
                value: 1
            },
            time: {
                type: "f",
                value: 0
            },
            distortionScale: {
                type: "f",
                value: 20
            },
            noiseScale: {
                type: "f",
                value: 1
            },
            textureMatrix: {
                type: "m4",
                value: new THREE.Matrix4()
            },
            sunColor: {
                type: "c",
                value: new THREE.Color(8355711)
            },
            sunDirection: {
                type: "v3",
                value: new THREE.Vector3(.70707, .70707, 0)
            },
            eye: {
                type: "v3",
                value: new THREE.Vector3()
            },
            waterColor: {
                type: "c",
                value: new THREE.Color(5592405)
            }
        } ]);
    },
    vertex: function() {
        return [ "uniform mat4 textureMatrix;", "uniform float time;", "varying vec4 mirrorCoord;", "varying vec3 worldPosition;", "void main()", "{", "\tmirrorCoord = modelMatrix * vec4( position, 1.0 );", "\tworldPosition = mirrorCoord.xyz;", "\tmirrorCoord = textureMatrix * mirrorCoord;", "\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}" ].join("\n");
    },
    fragment: function() {
        return [ "precision highp float;", "uniform sampler2D mirrorSampler;", "uniform float alpha;", "uniform float time;", "uniform float distortionScale;", "uniform sampler2D normalSampler;", "uniform vec3 sunColor;", "uniform vec3 sunDirection;", "uniform vec3 eye;", "uniform vec3 waterColor;", "varying vec4 mirrorCoord;", "varying vec3 worldPosition;", "vec4 getNoise( vec2 uv )", "{", "\tvec2 uv0 = ( uv / 103.0 ) + vec2(time / 17.0, time / 29.0);", "\tvec2 uv1 = uv / 107.0-vec2( time / -19.0, time / 31.0 );", "\tvec2 uv2 = uv / vec2( 8907.0, 9803.0 ) + vec2( time / 101.0, time / 97.0 );", "\tvec2 uv3 = uv / vec2( 1091.0, 1027.0 ) - vec2( time / 109.0, time / -113.0 );", "\tvec4 noise = texture2D( normalSampler, uv0 ) +", "\t\ttexture2D( normalSampler, uv1 ) +", "\t\ttexture2D( normalSampler, uv2 ) +", "\t\ttexture2D( normalSampler, uv3 );", "\treturn noise * 0.5 - 1.0;", "}", "void sunLight( const vec3 surfaceNormal, const vec3 eyeDirection, float shiny, float spec, float diffuse, inout vec3 diffuseColor, inout vec3 specularColor )", "{", "\tvec3 reflection = normalize( reflect( -sunDirection, surfaceNormal ) );", "\tfloat direction = max( 0.0, dot( eyeDirection, reflection ) );", "\tspecularColor += pow( direction, shiny ) * sunColor * spec;", "\tdiffuseColor += max( dot( sunDirection, surfaceNormal ), 0.0 ) * sunColor * diffuse;", "}", THREE.ShaderChunk.common, THREE.ShaderChunk.fog_pars_fragment, "void main()", "{", "\tvec4 noise = getNoise( worldPosition.xz );", "\tvec3 surfaceNormal = normalize( noise.xzy * vec3( 1.5, 1.0, 1.5 ) );", "\tvec3 diffuseLight = vec3(0.0);", "\tvec3 specularLight = vec3(0.0);", "\tvec3 worldToEye = eye-worldPosition;", "\tvec3 eyeDirection = normalize( worldToEye );", "\tsunLight( surfaceNormal, eyeDirection, 100.0, 2.0, 0.5, diffuseLight, specularLight );", "\tfloat distance = length(worldToEye);", "\tvec2 distortion = surfaceNormal.xz * ( 0.001 + 1.0 / distance ) * distortionScale;", "\tvec3 reflectionSample = vec3( texture2D( mirrorSampler, mirrorCoord.xy / mirrorCoord.z + distortion ) );", "\tfloat theta = max( dot( eyeDirection, surfaceNormal ), 0.0 );", "\tfloat rf0 = 0.3;", "\tfloat reflectance = rf0 + ( 1.0 - rf0 ) * pow( ( 1.0 - theta ), 5.0 );", "\tvec3 scatter = max( 0.0, dot( surfaceNormal, eyeDirection ) ) * waterColor;", "\tvec3 albedo = mix( sunColor * diffuseLight * 0.3 + scatter, ( vec3( 0.1 ) + reflectionSample * 0.9 + reflectionSample * specularLight ), reflectance );", "\tvec3 outgoingLight = albedo;", THREE.ShaderChunk.fog_fragment, "\tgl_FragColor = vec4( outgoingLight, alpha );", "}" ].join("\n");
    },
    instance: function(a, b, c, d) {
        var e = function(a, b, c, d) {
            function e(a, b) {
                return void 0 !== a ? a : b;
            }
            THREE.Object3D.call(this), this.name = "water_" + this.id, d = d || {}, this.matrixNeedsUpdate = !0;
            var f = e(d.textureWidth, 512), g = e(d.textureHeight, 512);
            this.clipBias = e(d.clipBias, 0), this.alpha = e(d.alpha, 1), this.time = e(d.time, 0), 
            this.normalSampler = e(d.waterNormals, null), this.sunDirection = e(d.sunDirection, new THREE.Vector3(.70707, .70707, 0)), 
            this.sunColor = new THREE.Color(e(d.sunColor, 16777215)), this.waterColor = new THREE.Color(e(d.waterColor, 8355711)), 
            this.eye = e(d.eye, new THREE.Vector3(0, 0, 0)), this.distortionScale = e(d.distortionScale, 20), 
            this.side = e(d.side, THREE.FrontSide), this.fog = e(d.fog, !1), this.renderer = a, 
            this.scene = c, this.mirrorPlane = new THREE.Plane(), this.normal = new THREE.Vector3(0, 0, 1), 
            this.mirrorWorldPosition = new THREE.Vector3(), this.cameraWorldPosition = new THREE.Vector3(), 
            this.rotationMatrix = new THREE.Matrix4(), this.lookAtPosition = new THREE.Vector3(0, 0, -1), 
            this.clipPlane = new THREE.Vector4(), b instanceof THREE.PerspectiveCamera ? this.camera = b : (this.camera = new THREE.PerspectiveCamera(), 
            console.log(this.name + ": camera is not a Perspective Camera!")), this.textureMatrix = new THREE.Matrix4(), 
            this.mirrorCamera = this.camera.clone(), this.renderTarget = new THREE.WebGLRenderTarget(f, g), 
            this.renderTarget2 = new THREE.WebGLRenderTarget(f, g);
            var h = M.fx.shadersEngine.get("Water"), i = THREE.UniformsUtils.clone(h.uniforms());
            this.material = new THREE.ShaderMaterial({
                fragmentShader: h.fragment(),
                vertexShader: h.vertex(),
                uniforms: i,
                transparent: !0,
                side: this.side,
                fog: this.fog
            }), this.material.uniforms.mirrorSampler.value = this.renderTarget.texture, this.material.uniforms.textureMatrix.value = this.textureMatrix, 
            this.material.uniforms.alpha.value = this.alpha, this.material.uniforms.time.value = this.time, 
            this.material.uniforms.normalSampler.value = this.normalSampler, this.material.uniforms.sunColor.value = this.sunColor, 
            this.material.uniforms.waterColor.value = this.waterColor, this.material.uniforms.sunDirection.value = this.sunDirection, 
            this.material.uniforms.distortionScale.value = this.distortionScale, this.material.uniforms.eye.value = this.eye, 
            THREE.Math.isPowerOfTwo(f) && THREE.Math.isPowerOfTwo(g) || (this.renderTarget.texture.generateMipmaps = !1, 
            this.renderTarget.texture.minFilter = THREE.LinearFilter, this.renderTarget2.texture.generateMipmaps = !1, 
            this.renderTarget2.texture.minFilter = THREE.LinearFilter), this.updateTextureMatrix(), 
            this.render();
        };
        return e.prototype = Object.create(M.fx.shadersEngine.get("Mirror").instance.prototype), 
        e.prototype.constructor = e, e.prototype.render = function() {
            this.matrixNeedsUpdate && this.updateTextureMatrix(), this.matrixNeedsUpdate = !0;
            for (var a = this; null !== a.parent; ) a = a.parent;
            if (void 0 !== a && a instanceof THREE.Scene) {
                var b = this.material.visible;
                this.material.visible = !1, this.renderer.render(a, this.mirrorCamera, this.renderTarget, !0), 
                this.material.visible = b;
            }
        }, e.prototype.updateTextureMatrix = function() {
            this.updateMatrixWorld(), this.camera.updateMatrixWorld(), this.mirrorWorldPosition.setFromMatrixPosition(this.matrixWorld), 
            this.cameraWorldPosition.setFromMatrixPosition(this.camera.matrixWorld), this.rotationMatrix.extractRotation(this.matrixWorld), 
            this.normal.set(0, 0, 1), this.normal.applyMatrix4(this.rotationMatrix);
            var a = this.mirrorWorldPosition.clone().sub(this.cameraWorldPosition);
            a.reflect(this.normal).negate(), a.add(this.mirrorWorldPosition), this.rotationMatrix.extractRotation(this.camera.matrixWorld), 
            this.lookAtPosition.set(0, 0, -1), this.lookAtPosition.applyMatrix4(this.rotationMatrix), 
            this.lookAtPosition.add(this.cameraWorldPosition);
            var b = this.mirrorWorldPosition.clone().sub(this.lookAtPosition);
            b.reflect(this.normal).negate(), b.add(this.mirrorWorldPosition), this.up.set(0, -1, 0), 
            this.up.applyMatrix4(this.rotationMatrix), this.up.reflect(this.normal).negate(), 
            this.mirrorCamera.position.copy(a), this.mirrorCamera.up = this.up, this.mirrorCamera.lookAt(b), 
            this.mirrorCamera.updateProjectionMatrix(), this.mirrorCamera.updateMatrixWorld(), 
            this.mirrorCamera.matrixWorldInverse.getInverse(this.mirrorCamera.matrixWorld), 
            this.textureMatrix.set(.5, 0, 0, .5, 0, .5, 0, .5, 0, 0, .5, .5, 0, 0, 0, 1), this.textureMatrix.multiply(this.mirrorCamera.projectionMatrix), 
            this.textureMatrix.multiply(this.mirrorCamera.matrixWorldInverse), this.mirrorPlane.setFromNormalAndCoplanarPoint(this.normal, this.mirrorWorldPosition), 
            this.mirrorPlane.applyMatrix4(this.mirrorCamera.matrixWorldInverse), this.clipPlane.set(this.mirrorPlane.normal.x, this.mirrorPlane.normal.y, this.mirrorPlane.normal.z, this.mirrorPlane.constant);
            var c = new THREE.Vector4(), d = this.mirrorCamera.projectionMatrix;
            c.x = (Math.sign(this.clipPlane.x) + d.elements[8]) / d.elements[0], c.y = (Math.sign(this.clipPlane.y) + d.elements[9]) / d.elements[5], 
            c.z = -1, c.w = (1 + d.elements[10]) / d.elements[14];
            var e = new THREE.Vector4();
            e = this.clipPlane.multiplyScalar(2 / this.clipPlane.dot(c)), d.elements[2] = e.x, 
            d.elements[6] = e.y, d.elements[10] = e.z + 1 - this.clipBias, d.elements[14] = e.w;
        }, function(a, b, c, d) {
            var f = d.texture || M.imagesEngine.get(d.textureNormalName || "waterNormal");
            f.wrapS = f.wrapT = THREE.RepeatWrapping;
            var g = new e(a, b, c, {
                textureWidth: 512,
                textureHeight: 512,
                waterNormals: f,
                alpha: 1,
                sunDirection: new THREE.Vector3(-.5773502691896258, .5773502691896258, -.5773502691896258),
                sunColor: 16777215,
                waterColor: 7695,
                distortionScale: 50
            }), h = new THREE.Mesh(new THREE.PlaneBufferGeometry(500 * d.width, 500 * d.height), g.material);
            return h.add(g), h.rotation.x = .5 * -Math.PI, h.render = function() {
                g.material.uniforms.time.value += 1 / 60, g.render();
            }, h;
        };
    }(),
    options: {
        textureWidth: {
            name: "texture width",
            type: "number",
            default: 512,
            mandatory: !0
        },
        textureHeight: {
            name: "texture height",
            type: "number",
            default: 512,
            mandatory: !0
        },
        textureNormalName: {
            name: "texture normal",
            type: "string",
            default: "waterNormal",
            mandatory: !1
        },
        sunColor: {
            name: "sun color",
            type: "color",
            default: "0xffffff",
            mandatory: !0
        },
        waterColor: {
            name: "water color",
            type: "color",
            default: "0x001e0",
            mandatory: !0
        },
        distortionScale: {
            name: "distortion scale",
            type: "color",
            default: 50,
            mandatory: !0
        },
        alpha: {
            name: "alpha",
            type: "number",
            default: 1,
            mandatory: !0
        },
        width: {
            name: "width",
            type: "number",
            default: 2e3,
            mandatory: !0
        },
        height: {
            name: "height",
            type: "number",
            default: 2e3,
            mandatory: !0
        }
    }
}), M.fx.shadersEngine.create("OceanMain", {
    uniforms: function() {
        return {
            u_displacementMap: {
                type: "t",
                value: null
            },
            u_normalMap: {
                type: "t",
                value: null
            },
            u_geometrySize: {
                type: "f",
                value: null
            },
            u_size: {
                type: "f",
                value: null
            },
            u_projectionMatrix: {
                type: "m4",
                value: null
            },
            u_viewMatrix: {
                type: "m4",
                value: null
            },
            u_cameraPosition: {
                type: "v3",
                value: null
            },
            u_skyColor: {
                type: "v3",
                value: null
            },
            u_oceanColor: {
                type: "v3",
                value: null
            },
            u_sunDirection: {
                type: "v3",
                value: null
            },
            u_exposure: {
                type: "f",
                value: null
            }
        };
    },
    varying: function() {
        return {
            vPos: {
                type: "v3"
            },
            vUV: {
                type: "v2"
            }
        };
    },
    vertex: function() {
        return [ "precision highp float;", "varying vec3 vPos;", "varying vec2 vUV;", "uniform mat4 u_projectionMatrix;", "uniform mat4 u_viewMatrix;", "uniform float u_size;", "uniform float u_geometrySize;", "uniform sampler2D u_displacementMap;", "void main (void) {", "vec3 newPos = position + texture2D(u_displacementMap, uv).rgb * (u_geometrySize / u_size);", "vPos = newPos;", "vUV = uv;", "gl_Position = u_projectionMatrix * u_viewMatrix * vec4(newPos, 1.0);", "}" ].join("\n");
    },
    fragment: function() {
        return [ "precision highp float;", "varying vec3 vPos;", "varying vec2 vUV;", "uniform sampler2D u_displacementMap;", "uniform sampler2D u_normalMap;", "uniform vec3 u_cameraPosition;", "uniform vec3 u_oceanColor;", "uniform vec3 u_skyColor;", "uniform vec3 u_sunDirection;", "uniform float u_exposure;", "vec3 hdr (vec3 color, float exposure) {", "return 1.0 - exp(-color * exposure);", "}", "void main (void) {", "vec3 normal = texture2D(u_normalMap, vUV).rgb;", "vec3 view = normalize(u_cameraPosition - vPos);", "float fresnel = 0.02 + 0.98 * pow(1.0 - dot(normal, view), 5.0);", "vec3 sky = fresnel * u_skyColor;", "float diffuse = clamp(dot(normal, normalize(u_sunDirection)), 0.0, 1.0);", "vec3 water = (1.0 - fresnel) * u_oceanColor * u_skyColor * diffuse;", "vec3 color = sky + water;", "gl_FragColor = vec4(hdr(color, u_exposure), 1.0);", "}" ].join("\n");
    }
}), M.fx.shadersEngine.create("OceanNormals", {
    uniforms: function() {
        return {
            u_displacementMap: {
                type: "t",
                value: null
            },
            u_resolution: {
                type: "f",
                value: null
            },
            u_size: {
                type: "f",
                value: null
            }
        };
    },
    varying: function() {
        return {
            vUV: {
                type: "v2"
            }
        };
    },
    fragment: function() {
        return [ "precision highp float;", "varying vec2 vUV;", "uniform sampler2D u_displacementMap;", "uniform float u_resolution;", "uniform float u_size;", "void main (void) {", "float texel = 1.0 / u_resolution;", "float texelSize = u_size / u_resolution;", "vec3 center = texture2D(u_displacementMap, vUV).rgb;", "vec3 right = vec3(texelSize, 0.0, 0.0) + texture2D(u_displacementMap, vUV + vec2(texel, 0.0)).rgb - center;", "vec3 left = vec3(-texelSize, 0.0, 0.0) + texture2D(u_displacementMap, vUV + vec2(-texel, 0.0)).rgb - center;", "vec3 top = vec3(0.0, 0.0, -texelSize) + texture2D(u_displacementMap, vUV + vec2(0.0, -texel)).rgb - center;", "vec3 bottom = vec3(0.0, 0.0, texelSize) + texture2D(u_displacementMap, vUV + vec2(0.0, texel)).rgb - center;", "vec3 topRight = cross(right, top);", "vec3 topLeft = cross(top, left);", "vec3 bottomLeft = cross(left, bottom);", "vec3 bottomRight = cross(bottom, right);", "gl_FragColor = vec4(normalize(topRight + topLeft + bottomLeft + bottomRight), 1.0);", "}" ].join("\n");
    }
}), M.fx.shadersEngine.create("OceanSpectrum", {
    uniforms: function() {
        return {
            u_size: {
                type: "f",
                value: null
            },
            u_resolution: {
                type: "f",
                value: null
            },
            u_choppiness: {
                type: "f",
                value: null
            },
            u_phases: {
                type: "t",
                value: null
            },
            u_initialSpectrum: {
                type: "t",
                value: null
            }
        };
    },
    varying: function() {
        return {
            vUV: {
                type: "v2"
            }
        };
    },
    fragment: function() {
        return [ "precision highp float;", "#include <common>", "const float G = 9.81;", "const float KM = 370.0;", "varying vec2 vUV;", "uniform float u_size;", "uniform float u_resolution;", "uniform float u_choppiness;", "uniform sampler2D u_phases;", "uniform sampler2D u_initialSpectrum;", "vec2 multiplyComplex (vec2 a, vec2 b) {", "return vec2(a[0] * b[0] - a[1] * b[1], a[1] * b[0] + a[0] * b[1]);", "}", "vec2 multiplyByI (vec2 z) {", "return vec2(-z[1], z[0]);", "}", "float omega (float k) {", "return sqrt(G * k * (1.0 + k * k / KM * KM));", "}", "void main (void) {", "vec2 coordinates = gl_FragCoord.xy - 0.5;", "float n = (coordinates.x < u_resolution * 0.5) ? coordinates.x : coordinates.x - u_resolution;", "float m = (coordinates.y < u_resolution * 0.5) ? coordinates.y : coordinates.y - u_resolution;", "vec2 waveVector = (2.0 * PI * vec2(n, m)) / u_size;", "float phase = texture2D(u_phases, vUV).r;", "vec2 phaseVector = vec2(cos(phase), sin(phase));", "vec2 h0 = texture2D(u_initialSpectrum, vUV).rg;", "vec2 h0Star = texture2D(u_initialSpectrum, vec2(1.0 - vUV + 1.0 / u_resolution)).rg;", "h0Star.y *= -1.0;", "vec2 h = multiplyComplex(h0, phaseVector) + multiplyComplex(h0Star, vec2(phaseVector.x, -phaseVector.y));", "vec2 hX = -multiplyByI(h * (waveVector.x / length(waveVector))) * u_choppiness;", "vec2 hZ = -multiplyByI(h * (waveVector.y / length(waveVector))) * u_choppiness;", "if (waveVector.x == 0.0 && waveVector.y == 0.0) {", "h = vec2(0.0);", "hX = vec2(0.0);", "hZ = vec2(0.0);", "}", "gl_FragColor = vec4(hX + multiplyByI(h), hZ);", "}" ].join("\n");
    }
}), M.fx.shadersEngine.create("OceanPhase", {
    uniforms: function() {
        return {
            u_phases: {
                type: "t",
                value: null
            },
            u_deltaTime: {
                type: "f",
                value: null
            },
            u_resolution: {
                type: "f",
                value: null
            },
            u_size: {
                type: "f",
                value: null
            }
        };
    },
    varying: function() {
        return {
            vUV: {
                type: "v2"
            }
        };
    },
    fragment: function() {
        return [ "precision highp float;", "#include <common>", "const float G = 9.81;", "const float KM = 370.0;", "varying vec2 vUV;", "uniform sampler2D u_phases;", "uniform float u_deltaTime;", "uniform float u_resolution;", "uniform float u_size;", "float omega (float k) {", "return sqrt(G * k * (1.0 + k * k / KM * KM));", "}", "void main (void) {", "float deltaTime = 1.0 / 60.0;", "vec2 coordinates = gl_FragCoord.xy - 0.5;", "float n = (coordinates.x < u_resolution * 0.5) ? coordinates.x : coordinates.x - u_resolution;", "float m = (coordinates.y < u_resolution * 0.5) ? coordinates.y : coordinates.y - u_resolution;", "vec2 waveVector = (2.0 * PI * vec2(n, m)) / u_size;", "float phase = texture2D(u_phases, vUV).r;", "float deltaPhase = omega(length(waveVector)) * u_deltaTime;", "phase = mod(phase + deltaPhase, 2.0 * PI);", "gl_FragColor = vec4(phase, 0.0, 0.0, 0.0);", "}" ].join("\n");
    }
}), M.fx.shadersEngine.create("OceanInitialSpectrum", {
    uniforms: function() {
        return {
            u_wind: {
                type: "v2",
                value: new THREE.Vector2(10, 10)
            },
            u_resolution: {
                type: "f",
                value: 512
            },
            u_size: {
                type: "f",
                value: 250
            }
        };
    },
    fragment: function() {
        return [ "precision highp float;", "#include <common>", "const float G = 9.81;", "const float KM = 370.0;", "const float CM = 0.23;", "uniform vec2 u_wind;", "uniform float u_resolution;", "uniform float u_size;", "float omega (float k) {", "return sqrt(G * k * (1.0 + pow2(k / KM)));", "}", "float tanh (float x) {", "return (1.0 - exp(-2.0 * x)) / (1.0 + exp(-2.0 * x));", "}", "void main (void) {", "vec2 coordinates = gl_FragCoord.xy - 0.5;", "float n = (coordinates.x < u_resolution * 0.5) ? coordinates.x : coordinates.x - u_resolution;", "float m = (coordinates.y < u_resolution * 0.5) ? coordinates.y : coordinates.y - u_resolution;", "vec2 K = (2.0 * PI * vec2(n, m)) / u_size;", "float k = length(K);", "float l_wind = length(u_wind);", "float Omega = 0.84;", "float kp = G * pow2(Omega / l_wind);", "float c = omega(k) / k;", "float cp = omega(kp) / kp;", "float Lpm = exp(-1.25 * pow2(kp / k));", "float gamma = 1.7;", "float sigma = 0.08 * (1.0 + 4.0 * pow(Omega, -3.0));", "float Gamma = exp(-pow2(sqrt(k / kp) - 1.0) / 2.0 * pow2(sigma));", "float Jp = pow(gamma, Gamma);", "float Fp = Lpm * Jp * exp(-Omega / sqrt(10.0) * (sqrt(k / kp) - 1.0));", "float alphap = 0.006 * sqrt(Omega);", "float Bl = 0.5 * alphap * cp / c * Fp;", "float z0 = 0.000037 * pow2(l_wind) / G * pow(l_wind / cp, 0.9);", "float uStar = 0.41 * l_wind / log(10.0 / z0);", "float alpham = 0.01 * ((uStar < CM) ? (1.0 + log(uStar / CM)) : (1.0 + 3.0 * log(uStar / CM)));", "float Fm = exp(-0.25 * pow2(k / KM - 1.0));", "float Bh = 0.5 * alpham * CM / c * Fm * Lpm;", "float a0 = log(2.0) / 4.0;", "float am = 0.13 * uStar / CM;", "float Delta = tanh(a0 + 4.0 * pow(c / cp, 2.5) + am * pow(CM / c, 2.5));", "float cosPhi = dot(normalize(u_wind), normalize(K));", "float S = (1.0 / (2.0 * PI)) * pow(k, -4.0) * (Bl + Bh) * (1.0 + Delta * (2.0 * cosPhi * cosPhi - 1.0));", "float dk = 2.0 * PI / u_size;", "float h = sqrt(S / 2.0) * dk;", "if (K.x == 0.0 && K.y == 0.0) {", "h = 0.0;", "}", "gl_FragColor = vec4(h, 0.0, 0.0, 0.0);", "}" ].join("\n");
    }
}), M.fx.shadersEngine.create("OceanSubtransform", {
    uniforms: function() {
        return {
            u_input: {
                type: "t",
                value: null
            },
            u_transformSize: {
                type: "f",
                value: 512
            },
            u_subtransformSize: {
                type: "f",
                value: 250
            }
        };
    },
    varying: function() {
        return {
            vUV: {
                type: "v2"
            }
        };
    },
    fragment: function() {
        return [ "precision highp float;", "#include <common>", "uniform sampler2D u_input;", "uniform float u_transformSize;", "uniform float u_subtransformSize;", "varying vec2 vUV;", "vec2 multiplyComplex (vec2 a, vec2 b) {", "return vec2(a[0] * b[0] - a[1] * b[1], a[1] * b[0] + a[0] * b[1]);", "}", "void main (void) {", "#ifdef HORIZONTAL", "float index = vUV.x * u_transformSize - 0.5;", "#else", "float index = vUV.y * u_transformSize - 0.5;", "#endif", "float evenIndex = floor(index / u_subtransformSize) * (u_subtransformSize * 0.5) + mod(index, u_subtransformSize * 0.5);", "#ifdef HORIZONTAL", "vec4 even = texture2D(u_input, vec2(evenIndex + 0.5, gl_FragCoord.y) / u_transformSize).rgba;", "vec4 odd = texture2D(u_input, vec2(evenIndex + u_transformSize * 0.5 + 0.5, gl_FragCoord.y) / u_transformSize).rgba;", "#else", "vec4 even = texture2D(u_input, vec2(gl_FragCoord.x, evenIndex + 0.5) / u_transformSize).rgba;", "vec4 odd = texture2D(u_input, vec2(gl_FragCoord.x, evenIndex + u_transformSize * 0.5 + 0.5) / u_transformSize).rgba;", "#endif", "float twiddleArgument = -2.0 * PI * (index / u_subtransformSize);", "vec2 twiddle = vec2(cos(twiddleArgument), sin(twiddleArgument));", "vec2 outputA = even.xy + multiplyComplex(twiddle, odd.xy);", "vec2 outputB = even.zw + multiplyComplex(twiddle, odd.zw);", "gl_FragColor = vec4(outputA, outputB);", "}" ].join("\n");
    }
}), M.fx.shadersEngine.create("OceanSimVertex", {
    varying: function() {
        return {
            vUV: {
                type: "v2"
            }
        };
    },
    vertex: function() {
        return [ "varying vec2 vUV;", "void main (void) {", "vUV = position.xy * 0.5 + 0.5;", "gl_Position = vec4(position, 1.0 );", "}" ].join("\n");
    }
}), M.fx.shadersEngine.create("Ocean", {
    instance: function() {
        var a = function(a, b, c, d) {
            function e(a, b) {
                return void 0 !== a ? a : b;
            }
            this.changed = !0, this.initial = !0, this.oceanCamera = new THREE.OrthographicCamera(), 
            this.oceanCamera.position.z = 1, this.renderer = a, this.renderer.clearColor(16777215), 
            this.scene = new THREE.Scene(), d = d || {}, this.clearColor = e(d.CLEAR_COLOR, [ 1, 1, 1, 0 ]), 
            this.geometryOrigin = e(d.GEOMETRY_ORIGIN, [ -1e3, -1e3 ]), this.sunDirectionX = e(d.SUN_DIRECTION[0], -1), 
            this.sunDirectionY = e(d.SUN_DIRECTION[1], 1), this.sunDirectionZ = e(d.SUN_DIRECTION[2], 1), 
            this.oceanColor = e(d.OCEAN_COLOR, new THREE.Vector3(.004, .016, .047)), this.skyColor = e(d.SKY_COLOR, new THREE.Vector3(3.2, 9.6, 12.8)), 
            this.exposure = e(d.EXPOSURE, .35), this.geometryResolution = e(d.GEOMETRY_RESOLUTION, 32), 
            this.geometrySize = e(d.GEOMETRY_SIZE, 2e3), this.resolution = e(d.RESOLUTION, 64), 
            this.floatSize = e(d.SIZE_OF_FLOAT, 4), this.windX = e(d.INITIAL_WIND[0], 10), this.windY = e(d.INITIAL_WIND[1], 10), 
            this.size = e(d.INITIAL_SIZE, 250), this.choppiness = e(d.INITIAL_CHOPPINESS, 1.5), 
            this.matrixNeedsUpdate = !1;
            var f = e(d.USE_HALF_FLOAT, !1) ? THREE.HalfFloatType : THREE.FloatType, g = {
                minFilter: THREE.LinearFilter,
                magFilter: THREE.LinearFilter,
                wrapS: THREE.ClampToEdgeWrapping,
                wrapT: THREE.ClampToEdgeWrapping,
                format: THREE.RGBAFormat,
                stencilBuffer: !1,
                depthBuffer: !1,
                premultiplyAlpha: !1,
                type: f
            }, h = {
                minFilter: THREE.NearestFilter,
                magFilter: THREE.NearestFilter,
                wrapS: THREE.ClampToEdgeWrapping,
                wrapT: THREE.ClampToEdgeWrapping,
                format: THREE.RGBAFormat,
                stencilBuffer: !1,
                depthBuffer: !1,
                premultiplyAlpha: !1,
                type: f
            }, i = {
                minFilter: THREE.NearestFilter,
                magFilter: THREE.NearestFilter,
                wrapS: THREE.RepeatWrapping,
                wrapT: THREE.RepeatWrapping,
                format: THREE.RGBAFormat,
                stencilBuffer: !1,
                depthBuffer: !1,
                premultiplyAlpha: !1,
                type: f
            };
            this.initialSpectrumFramebuffer = new THREE.WebGLRenderTarget(this.resolution, this.resolution, i), 
            this.spectrumFramebuffer = new THREE.WebGLRenderTarget(this.resolution, this.resolution, h), 
            this.pingPhaseFramebuffer = new THREE.WebGLRenderTarget(this.resolution, this.resolution, h), 
            this.pongPhaseFramebuffer = new THREE.WebGLRenderTarget(this.resolution, this.resolution, h), 
            this.pingTransformFramebuffer = new THREE.WebGLRenderTarget(this.resolution, this.resolution, h), 
            this.pongTransformFramebuffer = new THREE.WebGLRenderTarget(this.resolution, this.resolution, h), 
            this.displacementMapFramebuffer = new THREE.WebGLRenderTarget(this.resolution, this.resolution, g), 
            this.normalMapFramebuffer = new THREE.WebGLRenderTarget(this.resolution, this.resolution, g);
            var j = M.fx.shadersEngine.get("OceanSimVertex"), k = M.fx.shadersEngine.get("OceanSubtransform"), l = THREE.UniformsUtils.clone(k.uniforms());
            this.materialOceanHorizontal = new THREE.ShaderMaterial({
                uniforms: l,
                vertexShader: j.vertex(),
                fragmentShader: "#define HORIZONTAL \n" + k.fragment()
            }), this.materialOceanHorizontal.uniforms.u_transformSize = {
                type: "f",
                value: this.resolution
            }, this.materialOceanHorizontal.uniforms.u_subtransformSize = {
                type: "f",
                value: null
            }, this.materialOceanHorizontal.uniforms.u_input = {
                type: "t",
                value: null
            }, this.materialOceanHorizontal.depthTest = !1;
            var m = M.fx.shadersEngine.get("OceanSubtransform"), n = THREE.UniformsUtils.clone(m.uniforms());
            this.materialOceanVertical = new THREE.ShaderMaterial({
                uniforms: n,
                vertexShader: j.vertex(),
                fragmentShader: m.fragment()
            }), this.materialOceanVertical.uniforms.u_transformSize = {
                type: "f",
                value: this.resolution
            }, this.materialOceanVertical.uniforms.u_subtransformSize = {
                type: "f",
                value: null
            }, this.materialOceanVertical.uniforms.u_input = {
                type: "t",
                value: null
            }, this.materialOceanVertical.depthTest = !1;
            var o = M.fx.shadersEngine.get("OceanInitialSpectrum"), p = THREE.UniformsUtils.clone(o.uniforms());
            this.materialInitialSpectrum = new THREE.ShaderMaterial({
                uniforms: p,
                vertexShader: j.vertex(),
                fragmentShader: o.fragment()
            }), this.materialInitialSpectrum.uniforms.u_wind = {
                type: "v2",
                value: new THREE.Vector2()
            }, this.materialInitialSpectrum.uniforms.u_resolution = {
                type: "f",
                value: this.resolution
            }, this.materialInitialSpectrum.depthTest = !1;
            var q = M.fx.shadersEngine.get("OceanPhase"), r = THREE.UniformsUtils.clone(q.uniforms());
            this.materialPhase = new THREE.ShaderMaterial({
                uniforms: r,
                vertexShader: j.vertex(),
                fragmentShader: q.fragment()
            }), this.materialPhase.uniforms.u_resolution = {
                type: "f",
                value: this.resolution
            }, this.materialPhase.depthTest = !1;
            var s = M.fx.shadersEngine.get("OceanSpectrum"), t = THREE.UniformsUtils.clone(s.uniforms());
            this.materialSpectrum = new THREE.ShaderMaterial({
                uniforms: t,
                vertexShader: j.vertex(),
                fragmentShader: s.fragment()
            }), this.materialSpectrum.uniforms.u_initialSpectrum = {
                type: "t",
                value: null
            }, this.materialSpectrum.uniforms.u_resolution = {
                type: "f",
                value: this.resolution
            }, this.materialSpectrum.depthTest = !1;
            var u = M.fx.shadersEngine.get("OceanNormals"), v = THREE.UniformsUtils.clone(u.uniforms());
            this.materialNormal = new THREE.ShaderMaterial({
                uniforms: v,
                vertexShader: j.vertex(),
                fragmentShader: u.fragment()
            }), this.materialNormal.uniforms.u_displacementMap = {
                type: "t",
                value: null
            }, this.materialNormal.uniforms.u_resolution = {
                type: "f",
                value: this.resolution
            }, this.materialNormal.depthTest = !1;
            var w = M.fx.shadersEngine.get("OceanMain"), x = THREE.UniformsUtils.clone(w.uniforms());
            this.materialOcean = new THREE.ShaderMaterial({
                uniforms: x,
                vertexShader: w.vertex(),
                fragmentShader: w.fragment()
            }), this.materialOcean.uniforms.u_geometrySize = {
                type: "f",
                value: this.resolution
            }, this.materialOcean.uniforms.u_displacementMap = {
                type: "t",
                value: this.displacementMapFramebuffer.texture
            }, this.materialOcean.uniforms.u_normalMap = {
                type: "t",
                value: this.normalMapFramebuffer.texture
            }, this.materialOcean.uniforms.u_oceanColor = {
                type: "v3",
                value: this.oceanColor
            }, this.materialOcean.uniforms.u_skyColor = {
                type: "v3",
                value: this.skyColor
            }, this.materialOcean.uniforms.u_sunDirection = {
                type: "v3",
                value: new THREE.Vector3(this.sunDirectionX, this.sunDirectionY, this.sunDirectionZ)
            }, this.materialOcean.uniforms.u_exposure = {
                type: "f",
                value: this.exposure
            }, this.materialOceanHorizontal.blending = 0, this.materialOceanVertical.blending = 0, 
            this.materialInitialSpectrum.blending = 0, this.materialPhase.blending = 0, this.materialSpectrum.blending = 0, 
            this.materialNormal.blending = 0, this.materialOcean.blending = 0, this.screenQuad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2)), 
            this.scene.add(this.screenQuad), this.generateSeedPhaseTexture(), this.generateMesh();
        };
        return a.prototype.generateMesh = function() {
            var a = new THREE.PlaneBufferGeometry(this.geometrySize, this.geometrySize, this.geometryResolution, this.geometryResolution);
            a.rotateX(-Math.PI / 2), this.oceanMesh = new THREE.Mesh(a, this.materialOcean);
        }, a.prototype.update = function() {
            this.scene.overrideMaterial = null, this.changed && this.renderInitialSpectrum(), 
            this.renderWavePhase(), this.renderSpectrum(), this.renderSpectrumFFT(), this.renderNormalMap(), 
            this.scene.overrideMaterial = null;
        }, a.prototype.generateSeedPhaseTexture = function() {
            this.pingPhase = !0;
            for (var a = new Float32Array(this.resolution * this.resolution * 4), b = 0; b < this.resolution; b++) for (var c = 0; c < this.resolution; c++) a[b * this.resolution * 4 + 4 * c] = 2 * Math.random() * Math.PI, 
            a[b * this.resolution * 4 + 4 * c + 1] = 0, a[b * this.resolution * 4 + 4 * c + 2] = 0, 
            a[b * this.resolution * 4 + 4 * c + 3] = 0;
            this.pingPhaseTexture = new THREE.DataTexture(a, this.resolution, this.resolution, THREE.RGBAFormat), 
            this.pingPhaseTexture.wrapS = THREE.ClampToEdgeWrapping, this.pingPhaseTexture.wrapT = THREE.ClampToEdgeWrapping, 
            this.pingPhaseTexture.type = THREE.FloatType, this.pingPhaseTexture.needsUpdate = !0;
        }, a.prototype.renderInitialSpectrum = function() {
            this.scene.overrideMaterial = this.materialInitialSpectrum, this.materialInitialSpectrum.uniforms.u_wind.value.set(this.windX, this.windY), 
            this.materialInitialSpectrum.uniforms.u_size.value = this.size, this.renderer.render(this.scene, this.oceanCamera, this.initialSpectrumFramebuffer, !0);
        }, a.prototype.renderWavePhase = function() {
            this.scene.overrideMaterial = this.materialPhase, this.screenQuad.material = this.materialPhase, 
            this.initial ? (this.materialPhase.uniforms.u_phases.value = this.pingPhaseTexture, 
            this.initial = !1) : this.materialPhase.uniforms.u_phases.value = this.pingPhase ? this.pingPhaseFramebuffer.texture : this.pongPhaseFramebuffer.texture, 
            this.materialPhase.uniforms.u_deltaTime.value = this.deltaTime, this.materialPhase.uniforms.u_size.value = this.size, 
            this.renderer.render(this.scene, this.oceanCamera, this.pingPhase ? this.pongPhaseFramebuffer : this.pingPhaseFramebuffer), 
            this.pingPhase = !this.pingPhase;
        }, a.prototype.renderSpectrum = function() {
            this.scene.overrideMaterial = this.materialSpectrum, this.materialSpectrum.uniforms.u_initialSpectrum.value = this.initialSpectrumFramebuffer.texture, 
            this.materialSpectrum.uniforms.u_phases.value = this.pingPhase ? this.pingPhaseFramebuffer.texture : this.pongPhaseFramebuffer.texture, 
            this.materialSpectrum.uniforms.u_choppiness.value = this.choppiness, this.materialSpectrum.uniforms.u_size.value = this.size, 
            this.renderer.render(this.scene, this.oceanCamera, this.spectrumFramebuffer);
        }, a.prototype.renderSpectrumFFT = function() {
            var a = Math.log(this.resolution) / Math.log(2);
            this.scene.overrideMaterial = this.materialOceanHorizontal;
            for (var b = 0; b < a; b++) 0 === b ? (this.materialOceanHorizontal.uniforms.u_input.value = this.spectrumFramebuffer.texture, 
            this.materialOceanHorizontal.uniforms.u_subtransformSize.value = Math.pow(2, b % a + 1), 
            this.renderer.render(this.scene, this.oceanCamera, this.pingTransformFramebuffer)) : b % 2 == 1 ? (this.materialOceanHorizontal.uniforms.u_input.value = this.pingTransformFramebuffer.texture, 
            this.materialOceanHorizontal.uniforms.u_subtransformSize.value = Math.pow(2, b % a + 1), 
            this.renderer.render(this.scene, this.oceanCamera, this.pongTransformFramebuffer)) : (this.materialOceanHorizontal.uniforms.u_input.value = this.pongTransformFramebuffer.texture, 
            this.materialOceanHorizontal.uniforms.u_subtransformSize.value = Math.pow(2, b % a + 1), 
            this.renderer.render(this.scene, this.oceanCamera, this.pingTransformFramebuffer));
            this.scene.overrideMaterial = this.materialOceanVertical;
            for (var b = a; b < 2 * a; b++) b === 2 * a - 1 ? (this.materialOceanVertical.uniforms.u_input.value = a % 2 == 0 ? this.pingTransformFramebuffer.texture : this.pongTransformFramebuffer.texture, 
            this.materialOceanVertical.uniforms.u_subtransformSize.value = Math.pow(2, b % a + 1), 
            this.renderer.render(this.scene, this.oceanCamera, this.displacementMapFramebuffer)) : b % 2 == 1 ? (this.materialOceanVertical.uniforms.u_input.value = this.pingTransformFramebuffer.texture, 
            this.materialOceanVertical.uniforms.u_subtransformSize.value = Math.pow(2, b % a + 1), 
            this.renderer.render(this.scene, this.oceanCamera, this.pongTransformFramebuffer)) : (this.materialOceanVertical.uniforms.u_input.value = this.pongTransformFramebuffer.texture, 
            this.materialOceanVertical.uniforms.u_subtransformSize.value = Math.pow(2, b % a + 1), 
            this.renderer.render(this.scene, this.oceanCamera, this.pingTransformFramebuffer));
        }, a.prototype.renderNormalMap = function() {
            this.scene.overrideMaterial = this.materialNormal, this.changed && (this.materialNormal.uniforms.u_size.value = this.size), 
            this.materialNormal.uniforms.u_displacementMap.value = this.displacementMapFramebuffer.texture, 
            this.renderer.render(this.scene, this.oceanCamera, this.normalMapFramebuffer, !0);
        }, function(b, c, d, e) {
            var f = 512, g = 1024, h = g / 2, i = -f / 2, j = -f / 2;
            return ocean = new a(b, c, d, {
                USE_HALF_FLOAT: !0,
                INITIAL_SIZE: 256,
                INITIAL_WIND: [ 10, 10 ],
                INITIAL_CHOPPINESS: 1.5,
                CLEAR_COLOR: [ 1, 1, 1, 0 ],
                GEOMETRY_ORIGIN: [ i, j ],
                SUN_DIRECTION: [ -1, 1, 1 ],
                OCEAN_COLOR: new THREE.Vector3(.004, .016, .047),
                SKY_COLOR: new THREE.Vector3(3.2, 9.6, 12.8),
                EXPOSURE: .35,
                GEOMETRY_RESOLUTION: h,
                GEOMETRY_SIZE: f,
                RESOLUTION: g
            }), ocean.lastTime = new Date().getTime(), ocean.materialOcean.uniforms.u_projectionMatrix = {
                type: "m4",
                value: c.projectionMatrix
            }, ocean.materialOcean.uniforms.u_viewMatrix = {
                type: "m4",
                value: c.matrixWorldInverse
            }, ocean.materialOcean.uniforms.u_cameraPosition = {
                type: "v3",
                value: c.position
            }, ocean.render = function() {
                var a = new Date().getTime();
                ocean.deltaTime = (a - ocean.lastTime) / 1e3 || 0, ocean.lastTime = a, ocean.update(ocean.deltaTime), 
                ocean.overrideMaterial = ocean.materialOcean, ocean.changed && (ocean.materialOcean.uniforms.u_size.value = ocean.size, 
                ocean.materialOcean.uniforms.u_sunDirection.value.set(ocean.sunDirectionX, ocean.sunDirectionY, ocean.sunDirectionZ), 
                ocean.materialOcean.uniforms.u_exposure.value = ocean.exposure, ocean.changed = !1), 
                ocean.materialOcean.uniforms.u_normalMap.value = ocean.normalMapFramebuffer.texture, 
                ocean.materialOcean.uniforms.u_displacementMap.value = ocean.displacementMapFramebuffer.texture, 
                ocean.materialOcean.uniforms.u_projectionMatrix.value = c.projectionMatrix, ocean.materialOcean.uniforms.u_viewMatrix.value = c.matrixWorldInverse, 
                ocean.materialOcean.uniforms.u_cameraPosition.value = c.position, ocean.materialOcean.depthTest = !0;
            }, ocean;
        };
    }()
}), Class("App", {
    App: function() {
        this.log_types = {
            e: "error",
            w: "warn",
            i: "info"
        }, this.util = _.extend({
            h: window.innerHeight,
            w: window.innerWidth,
            ratio: window.innerWidth / window.innerHeight,
            frameRate: 60,
            camera: {
                fov: 75,
                near: .1,
                far: 100
            }
        }, config), this.threeLib = void 0, this.camera = void 0, this.user = void 0, this.scene = void 0, 
        this.renderer = void 0, this.clearColor = 0, Object.defineProperty(this, "clearColor", {
            set: function(a) {
                try {
                    this.renderer && (this.renderer.setClearColor(a), this.clearColor = a);
                } catch (a) {}
            }
        }), this.debug = !0, this.clock = new THREE.Clock(), this.mouseX = 0, this.mouseY = 0, 
        this.zoom = 0, this.windowHalfX = window.innerWidth / 2, this.windowHalfY = window.innerHeight / 2, 
        this.CAMERA_MAX_Z = 1e3, this.CAMERA_MIN_Z = 250, window.addEventListener("onmessage", this.onMessage, !1), 
        window.addEventListener("message", this.onMessage, !1);
    },
    onCreate: function() {},
    preload: function(a) {
        a();
    },
    prepareScene: function() {},
    progressAnimation: function(a) {
        $("#loader").animate({
            opacity: "0",
            "margin-top": "250px"
        }, 1e3, function() {
            $("#loader").remove(), $("body").animate({
                backgroundColor: "#fff"
            }, 200, a);
        });
    },
    _render: function() {},
    setUpLeap: function() {},
    onLeapSocketConnected: function() {},
    onLeapDeviceConnected: function() {},
    onLeapDeviceDisconnected: function() {},
    render: function() {
        M.game.update(), M.audioEngine.update(), M.lightEngine.update(), M.universe.update(), 
        M.control.update(), app.camera.update && app.camera.update(app.clock.getDelta()), 
        app.renderer.autoClear = !1, app.renderer.clear(app.clearColor), app._render(), 
        app.renderer.render(app.scene, app.camera.object), app.util.physics_enabled && Physijs._isLoaded && app.scene.simulate(), 
        app.util.tween_enabled && TWEEN.update(), requestAnimFrame(app.render);
    },
    add: function(a, b) {
        this.scene.add(a), M.universe.reality.put(a.uuid, b);
    },
    remove: function(a) {
        this.scene.remove(a), M.universe.reality.remove(a.uuid);
    },
    init: function() {
        app.three = THREE;
        var a = app.util.camera, b = app.util;
        if (window.keypress && (app._keylistener = new window.keypress.Listener()), config) if (app.log("config loaded"), 
        app.util.physics_enabled) {
            app.log("physics enabled.");
            try {
                Physijs.scripts.worker = "workers/physijs_worker.js", Physijs.scripts.ammo = "ammo.js", 
                app.scene = new Physijs.Scene(), Physijs._isLoaded = !0;
            } catch (a) {
                app.log("something bad trying to create physijs scene", "e"), app.log(a), Physijs._isLoaded = !1, 
                app.scene = new app.three.Scene();
            }
        } else app.log("physics not enabled."), Physijs._isLoaded = !1, app.scene = new app.three.Scene(); else app.log("config not loaded, switching to three.js"), 
        Physijs._isLoaded = !1, app.scene = new app.three.Scene();
        var c = {
            fov: a.fov,
            ratio: b.ratio,
            near: a.near,
            far: a.far
        };
        config && app.util.camera && (c.fov = app.util.camera.fov ? app.util.camera.fov : c.fov, 
        c.ratio = app.util.camera.ratio ? app.util.camera.ratio : c.ratio, c.near = app.util.camera.near ? app.util.camera.near : c.near, 
        c.far = app.util.camera.far ? app.util.camera.far : c.far), app.camera = new Camera(c);
        var d = !1;
        app.util.alpha && (d = !0), app.renderer = new app.three.WebGLRenderer({
            alpha: d,
            antialias: !0
        }), app.util.cast_shadow && (app.renderer.shadowMap.enabled = !0, app.renderer.shadowMap.type = THREE.PCFSoftShadowMap, 
        app.renderer.sortObjects = !1), app.renderer.setPixelRatio(window.devicePixelRatio), 
        app.renderer.setSize(b.w, b.h), document.getElementById("gameContainer").appendChild(app.renderer.domElement), 
        M.game.update(), M.universe.update(), M.control.init(), app.render(), app.onCreate instanceof Function ? app.onCreate() : console.log("Something wrong in your onCreate method");
    },
    load: function() {
        console.log("inside load"), "function" != typeof this.progressAnimation && (this.progressAnimation = function(a) {
            console.log("def progressAnimation"), a();
        }), this.progressAnimation(app.init);
    },
    sendMessage: function(a) {
        parent.postMessage(a, location.origin);
    },
    onMessage: function() {
        event.origin || event.originalEvent.origin, location.origin;
    },
    onkey: function(a, b) {
        app._keylistener && app._keylistener.simple_combo(a, b);
    },
    log: function() {
        this.debug && (arguments.length > 1 && arguments[1] in this.log_types ? console[this.log_types[arguments[1]]](arguments[0]) : console.log(arguments[0]));
    },
    onDocumentMouseWheel: function(a) {
        a.preventDefault(), app.zoom = .05 * a.wheelDelta, app.camera.object.position.z += app.zoom;
    },
    onDocumentMouseMove: function(a) {
        app.mouseX = a.clientX - app.windowHalfX, app.mouseY = a.clientY - app.windowHalfY;
    },
    onDocumentTouchStart: function(a) {
        1 === a.touches.length && (a.preventDefault(), app.mouseX = a.touches[0].pageX - app.windowHalfX, 
        app.mouseY = a.touches[0].pageY - app.windowHalfY);
    },
    onDocumentTouchMove: function(a) {
        1 === a.touches.length && (a.preventDefault(), app.mouseX = a.touches[0].pageX - app.windowHalfX, 
        app.mouseY = a.touches[0].pageY - app.windowHalfY);
    },
    keyup: function(a) {},
    keydown: function(a) {},
    onFailedTest: function(a, b) {},
    onSuccededTest: function(a) {}
}), "undefined" != typeof module && void 0 !== module.exports ? (console.log(window), 
module.exports = M, delete window.M) : (window.app = {}, M.started = !1, M.start = function() {
    if (M.started) return void console.log("app already started");
    if (M.started = !0, console.log("inside window onload"), window.subClasses.App) {
        var a = window.subClasses.App;
        app = new window[a]();
    } else app = new App();
    M.util.start(), M.util.check.start(app.onSuccededTest, app.onFailedTest) && app.preload(function() {
        M.assetsManager.load(function() {
            app.prepareScene(), app.load();
        });
    });
}, M.resize = function() {
    app.util.h = window.innerHeight, app.util.w = window.innerWidth, app.util.ratio = app.util.w / app.util.h, 
    app.camera && app.renderer && (app.camera.object.aspect = app.util.ratio, app.camera.object.updateProjectionMatrix(), 
    app.renderer.setSize(app.util.w, app.util.h));
}, window.addEventListener("load", M.start), window.addEventListener("resize", M.resize), 
M.version = "0.0.46", M.author = {
    name: "Marco Stagni",
    email: "mrc.stagni@gmail.com",
    website: "http://mage.studio"
});