/*! mage version: 0.0.58, 29-04-2017 */
function Class(a, b) {
    var c = __upperCaseFirstLetter__(a);
    if (__pool__[c] = new __class__(c, b), !b[c]) throw "NO CONSTRUCTOR PROVIDED";
    window[c] = b[c];
    for (var d in b) d != a && (window[c].prototype[d] = b[d]);
    return window[c].prototype.__print__ = function() {
        console.table(this);
    }, __pool__[c];
}

function __class__(a, b) {
    this.name = a, this.methods = b;
}

function __upperCaseFirstLetter__(a) {
    return a.length > 2 ? a[0].toUpperCase() + a.substring(1, a.length) : a.toUpperCase();
}

function include(a, b) {
    for (var c, d, e, f = [], g = document.getElementsByTagName("script"), h = 0; h < g.length; h++) f.push(g[h].src);
    var i = function(a) {
        for (var b = 0; b < f.length; b++) if (f[b].indexOf(a) != -1) return !0;
        return !1;
    };
    if (a instanceof Array) {
        var j = 0;
        if (0 == a.length) return void console.log("Why are you triyng to include 0 scripts? This makes me sad.");
        for (var k = function() {
            j == a.length && b();
        }, l = 0; l < a.length; l++) i(a[l]) ? b && k() : (c = document.createElement("script"), 
        c.type = "text/javascript", c.src = a[l] + ".js", b && (c.onload = c.onreadystatechange = function() {
            this.readyState && "complete" != this.readyState || (j++, k());
        }), e = document.getElementsByTagName("script")[0], e.parentNode.insertBefore(c, e));
    } else "string" == typeof a && (i(a) ? b && b() : (d = !1, c = document.createElement("script"), 
    c.type = "text/javascript", c.src = a + ".js", b && (c.onload = c.onreadystatechange = function() {
        d || this.readyState && "complete" != this.readyState || (d = !0, b());
    }), e = document.getElementsByTagName("script")[0], e.parentNode.insertBefore(c, e)));
}

function BEE() {
    this.options = void 0, this.nodes = [], this.size = 0, this.hasRoot = !1, this._idPool = [];
}

function _preEach(a, b, c) {
    if (c) {
        a(c, b + 1), _preEach(a, b, c.leftBranch), _preEach(a, b, c.rightBranch);
    }
}

function _postEach(a, b, c) {
    if (c) {
        console.log("inside _postEach"), _postEach(a, b, c.leftBranch), _postEach(a, b, c.rightBranch);
        a(c, b + 1);
    }
}

function _defEach(a, b, c) {
    if (c) {
        _defEach(a, b, c.leftBranch);
        a(c, b + 1), _defEach(a, b, c.rightBranch);
    }
}

function _hasLTR(a, b, c) {
    return !!b && (!!c(a.data, b.data) || (_hasLTR(e, b.leftBranch) || _hasLTR(e, b.rightBranch)));
}

function _hasRTL(a, b, c) {
    return !!b && (!!c(a.data, b.data) || (_hasRTL(e, b.rightBranch) || _hasRTL(e, b.leftBranch)));
}

function _orderedHas(a, b, c) {
    return !!b && (0 == c(a.data, b.data) || (c(a.data, b.data) < 0 ? _orderedHas(a, b.leftBranch) : _orderedHas(a, b.rightBranch)));
}

function height(a) {
    return a ? 1 + Math.max(_height(a.leftBranch), _height(a.rightBranch)) : 0;
}

function _orderedIns(a, b, c) {
    return b ? (c(a.data, b.data) < 0 || 0 == c(a.data, b.data) ? b.leftBranch = _orderedIns(a, b.leftBranch) : b.rightBranch = _orderedIns(a, b.rightBranch), 
    b) : buildNode(data, void 0, void 0);
}

function buildNode(a, b, c) {
    var d = this.createNode(a);
    return d.addLeaf(b, {
        branch: "left"
    }), d.addLeaf(c, {
        branch: "right"
    }), d;
}

function Node(a) {
    if (!(a.tree && a.tree instanceof BEE)) throw BEE.VALID_BEE;
    this.tree = a.tree;
    for (var b = Math.random().toString(BEE.MAX_ID_SIZE).slice(2); this.tree._idPool.indexOf(b) > -1; ) b = Math.random().toString(BEE.MAX_ID_SIZE).slice(2);
    this.tree._idPool.push(b), this._id = b, Object.defineProperty(this, "_id", {
        set: function() {
            throw BEE.UNTOUCHABLE;
        },
        get: function() {
            return b;
        }
    }), this.data = a.data, this.tree.size += 1, this.tree.nodes.push(this), this.leftBranch = void 0, 
    this.rightBranch = void 0, this.rightWeight = void 0, this.leftWeight = void 0, 
    this._isRoot = !1, this._isLeaf = !1, this._isParent = !1, this.children = 0, this.parents = 0, 
    this.parent = void 0;
}

function randomColor() {
    for (var a = "0123456789ABCDEF".split(""), b = "#", c = 0; c < 6; c++) b += a[Math.floor(16 * Math.random())];
    return b;
}

function componentToHex(a) {
    var b = a.toString(16);
    return 1 == b.length ? "0" + b : b;
}

function rgbToHex(a, b, c) {
    return "0x" + componentToHex(a) + componentToHex(b) + componentToHex(c);
}

function getIntValueFromHex(a) {
    return parseInt(a, 16);
}

function HashMap() {
    0 == arguments.length ? (this.total = 0, this.keys = new Array(), this.maxDimension = void 0) : 1 == arguments.length && (isNaN(arguments[0]) ? (this.total = 0, 
    this.keys = new Array(), this.maxDimension = void 0) : (this.total = 0, this.maxDimension = arguments[0], 
    this.keys = new Array())), this.map = {};
}

var license = "Copyright (c) 2017 by Marco Stagni < http://marcostagni.com mrc.stagni@gmail.com > and contributors.\n\nSome rights reserved. Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n* Redistributions of source code must retain the above copyright\n  notice, this list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above\n  copyright notice, this list of conditions and the following\n  disclaimer in the documentation and/or other materials provided\n  with the distribution.\n\n* The names of the contributors may not be used to endorse or\n  promote products derived from this software without specific\n  prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nMage contains third party software in the 'app/vendor' directory: each\nfile/module in this directory is distributed under its original license.\n\n", window, M;

"undefined" != typeof module && void 0 !== module.exports && (window = window || {
    asModule: !0,
    THREE: {},
    document: {}
}, document = window.document, M = window.M || {});

var __pool__ = {};

__class__.prototype.has = {}.hasOwnProperty, __class__.prototype._extends = function(a) {
    var b = (window[this.name], "string" == typeof a ? window[a] : a);
    if (!b) throw "NO UPPER CLASS";
    window[this.name].prototype = Object.create(b.prototype), window[this.name].prototype.constructor = window[this.name], 
    this._setMethods(), window[this.name].prototype.__getSuper = function() {
        return b;
    }, window.subClasses = window.subClasses || {}, window.subClasses[a] || (window.subClasses[a] = this.name), 
    window[this.name].prototype._super = "string" == typeof a ? window[a].call : a.call;
}, __class__.prototype._setMethods = function() {
    for (var a in this.methods) a != this.name && (window[__upperCaseFirstLetter__(this.name)].prototype[a] = this.methods[a]);
}, BEE.version = "0.1", BEE.authors = [ {
    name: "Marco Stagni",
    website: "http://marcostagni.com"
} ], BEE.MAX_CHILDREN_COUNT = 2, BEE.MAX_PARENTS_COUNT = 1, BEE.MAX_ID_SIZE = 12, 
BEE.MAX_ROOT_NUMBER = 1, BEE.VALID_BEE = "Please use a valid BEE object.", BEE.UNTOUCHABLE = "Untouchable value. Get away.", 
BEE.VALID_BRANCH = "Please specify a valid branch.", BEE.NO_MORE_CHILDREN = "No more children allowed for this node.", 
BEE.NO_MORE_PARENTS = "This node already have a parent.", BEE.ERROR_NO_LEAVES = "Sorry, something wrong in your BEE. There are no leaves :(", 
BEE.ERROR_NO_PARENTS = "Sorry, something wrong in your BEE. There are no leaves :(", 
BEE.ERROR_STRANGE_ROOTS = "Sorry, something wrong in your BEE. Strange number of root nodes", 
BEE.ERROR_ALREADY_LEFT = "Sorry, this node already have a left branch.", BEE.ERROR_ALREADY_RIGHT = "Sorry, this node already have a right branch.", 
BEE.BAD_ARGUMENTS = "BAD ARGUMENTS, please check them.", BEE.prototype.createNode = function(a) {
    return new Node({
        tree: this,
        data: a
    });
}, BEE.prototype.getAllLeaves = function() {
    var a = [];
    for (var b in this.nodes) this.nodes[b]._isLeaf && a.push(this.nodes[b]);
    if (0 == a.length) throw BEE.ERROR_NO_LEAVES;
    return a;
}, BEE.prototype.getRootNode = function() {
    var a = [];
    for (var b in this.nodes) this.nodes[b]._isRoot && a.push(this.nodes[b]);
    if (1 != a.length) throw BEE.ERROR_STRANGE_ROOTS;
    return a[0];
}, BEE.prototype.getAllParents = function() {
    var a = [];
    for (var b in this.nodes) this.nodes[b]._isParent && a.push(this.nodes[b]);
    if (0 == a.length) throw BEE.ERROR_NO_PARENTS;
    return a;
}, BEE.prototype.getPath = function(a) {
    var b, c, d = [];
    for (d.push({
        n: a,
        w: void 0
    }), b = a.parent, c = a; b; ) {
        var e = b.leftBranch._id == c._id ? b.leftWeight : b.rightWeight;
        d.push({
            n: b,
            w: e
        }), c = b, b = b.parent;
    }
    return d.reverse();
}, BEE.prototype.each = function(a, b) {
    var c = 0;
    if ("function" != typeof a) throw BEE.BAD_ARGUMENTS;
    "post" == b ? (console.log("inside post"), console.log(this.getRootNode()), _postEach(a, c, this.getRootNode())) : "pre" == b ? _preEach(a, c, this.getRootNode()) : _defEach(a, c, this.getRootNode());
}, BEE.prototype.has = function(a, b, c) {
    if ("function" != typeof b) throw BEE.BAD_ARGUMENTS;
    var d;
    if (c) if (_s = c.toLowerCase(), "ltr" == _s) d = _hasLTR(a, this.getRootNode(), b); else {
        if ("rtl" != _s) throw BEE.BAD_ARGUMENTS;
        d = _hasRTL(a, this.getRootNode(), b);
    } else d = _hasLTR(a, this.getRootNode(), b);
    return d;
}, BEE.prototype.orderedHas = function(a, b) {
    return _orderedIns(a, this.getRootNode(), b);
}, BEE.prototype.height = function() {
    return _height(this.getRootNode());
}, BEE.prototype.orderedIns = function(a, b) {
    try {
        _orderedIns(a, this.getRootNode(), b);
    } catch (a) {
        return console.log("Something bad happened in ordIns"), !1;
    }
}, BEE.prototype.buildNode = function(a, b, c) {
    var d = this.createNode(a);
    return d.addLeaf(b, {
        branch: "left"
    }), d.addLeaf(c, {
        branch: "right"
    }), d;
}, Node.prototype.setRoot = function(a) {
    this._isRoot = a;
}, Node.prototype.setParent = function(a) {
    this._isParent = a;
}, Node.prototype.setLeaf = function(a) {
    this._isLeaf = a;
}, Node.prototype.update = function() {
    0 == this.children ? 0 == this.parents ? (this.setLeaf(!1), this.setRoot(!0), this.setParent(!1)) : (this.setLeaf(!0), 
    this.setRoot(!1), this.setParent(!1)) : 0 == this.parents ? (this.setLeaf(!1), this.setRoot(!0), 
    this.setParent(!0)) : (this.setLeaf(!1), this.setRoot(!1), this.setParent(!0));
}, Node.prototype.addLeaf = function(a, b) {
    if (this.children + 1 > BEE.MAX_CHILDREN_COUNT) throw BEE.NO_MORE_CHILDREN;
    if (!b.branch) throw BEE.BAD_ARGUMENTS;
    if ("left" == b.branch) {
        if (this.leftBranch) throw BEE.ERROR_ALREADY_LEFT;
        this.leftBranch = a, this.leftWeight = b.weights && b.weights.l ? b.weights.l : 0;
    } else {
        if ("right" != b.branch) throw BEE.VALID_BRANCH;
        if (this.rightBranch) throw BEE.ERROR_ALREADY_RIGHT;
        this.rightBranch = a, this.rightWeight = b.weights && b.weights.r ? b.weights.r : 1;
    }
    this.children += 1, a.parent = this, a.parents = 1, this.update(), a.update();
}, Node.prototype.addParent = function(a, b) {
    if (this.parents + 1 > BEE.MAX_PARENTS_COUNT) throw BEE.NO_MORE_PARENTS;
    if (a.children + 1 > BEE.MAX_CHILDREN_COUNT) throw BEE.NO_MORE_CHILDREN;
    a.addLeaf(this, b);
}, HashMap.prototype.clear = function() {
    for (key in this.map) this.map["" + key] = void 0;
    this.total = 0, this.keys = new Array();
}, HashMap.prototype.clone = function() {
    var a = new HashMap();
    for (key in this.map) a.map["" + key] = this.map["" + key];
    return a;
}, HashMap.prototype.containsKey = function(a) {
    var b = !1;
    for (innerkey in this.map) if (innerkey == a) {
        b = !0;
        break;
    }
    return b;
}, HashMap.prototype.containsValue = function(a) {
    var b = !1;
    for (key in this.map) if (this.map["" + key] == a) {
        b = !0;
        break;
    }
    return b;
}, HashMap.prototype.get = function(a) {
    for (innerkey in this.map) if (innerkey == a) return this.map["" + innerkey];
    return null;
}, HashMap.prototype.isEmpty = function() {
    return 0 == this.total;
}, HashMap.prototype.put = function(a, b) {
    return this.maxDimension ? this.total < this.maxDimension && (this.map["" + a] = b, 
    this.keys.push(a), this.total += 1, !0) : (this.map["" + a] = b, this.keys.push(a), 
    this.total += 1, !0);
}, HashMap.prototype.remove = function(a) {
    try {
        for (innerkey in this.map) if (innerkey == a) {
            for (var b = this.keys.indexOf(innerkey), c = new Array(), d = 0; d < this.keys.length; d++) d != b && c.push(this.keys[d]);
            return this.keys = new Array(), this.keys = c, delete this.map["" + innerkey], this.total = 0, 
            !0;
        }
        return !1;
    } catch (a) {
        return console.log("HASHMAP ERROR "), console.error(a), console.trace(), !1;
    }
}, HashMap.prototype.size = function() {
    return this.total;
}, window.M = window.M || {}, M.assetsManager = {}, M.assetsManager.completed = {
    sound: !1,
    video: !0,
    images: !1,
    general: !0,
    shaders: !1
}, M.assetsManager.load = function(a) {
    M.assetsManager.callback = a, M.audioEngine.load(), M.videoEngine.load(), M.imagesEngine.load(), 
    M.generalAssetsEngine.load(), M.fx.shadersEngine.load(), M.assetsManager.checkInterval = setInterval(M.assetsManager.check, 100);
}, M.assetsManager.loadingMessage = function(a) {}, M.assetsManager.check = function() {
    M.assetsManager.completed.sound && M.assetsManager.completed.video && M.assetsManager.completed.images && M.assetsManager.completed.general ? (M.assetsManager.loadingMessage(!0), 
    clearInterval(M.assetsManager.checkInterval), M.assetsManager.callback()) : M.assetsManager.loadingMessage(!1);
}, window.M = window.M || {}, M.fx = {}, window.M = window.M || {}, M.audioEngine = {
    DELAY_FACTOR: .02,
    DELAY_STEP: 1,
    DELAY_MIN_VALUE: .2,
    DELAY_NORMAL_VALUE: 40,
    VOLUME: 80,
    _volume: 80,
    soundPath: "js/core/sound/",
    soundModules: [ "js/core/audio/beat", "js/core/audio/sound", "js/core/audio/ambientSound" ],
    numSound: 0,
    soundLoaded: 0,
    load: function() {
        M.audioEngine.map = new HashMap(), M.audioEngine.sounds = [], M.audioEngine.AudioContext = window.AudioContext || window.webkitAudioContext || null, 
        M.audioEngine.AudioContext ? (M.audioEngine.context = new M.audioEngine.AudioContext(), 
        M.audioEngine.volume = M.audioEngine.context.createGain(), M.audioEngine.volume.gain.value = M.audioEngine.VOLUME, 
        M.audioEngine.volume.connect(M.audioEngine.context.destination)) : console.error("No Audio Context available, sorry.");
        for (var a in Assets.Audio) M.audioEngine.numSound++, M.audioEngine.loadSingleFile(a, Assets.Audio[a]);
        0 == M.audioEngine.numSound && (M.assetsManager.completed.sound = !0);
    },
    get: function(a) {
        return M.audioEngine.map.get(a) || !1;
    },
    loadSingleFile: function(a, b) {
        var c = new XMLHttpRequest();
        c.open("GET", b, !0), c.responseType = "arraybuffer", c.onload = function(b) {
            M.audioEngine.context.decodeAudioData(this.response, function(b) {
                M.audioEngine.map.put(a, b), M.audioEngine.soundLoaded++, M.audioEngine.checkLoad();
            }, function() {
                M.audioEngine.map.put(a, null), M.audioEngine.soundLoaded++, console.error("Decoding the audio buffer failed");
            });
        }, c.send();
    },
    checkLoad: function() {
        M.audioEngine.soundLoaded == M.audioEngine.numSound && (M.assetsManager.completed.sound = !0);
    },
    add: function(a) {
        M.audioEngine.sounds.push(a);
    },
    update: function() {
        var a = new Date();
        for (var b in M.audioEngine.sounds) {
            M.audioEngine.sounds[b].update(app.clock.getDelta()), app.camera.object.updateMatrixWorld();
            var c = new THREE.Vector3();
            c.setFromMatrixPosition(app.camera.object.matrixWorld), M.audioEngine.context.listener.setPosition(c.x, c.y, c.z);
            var d = app.camera.object.matrix;
            mx = d.elements[12], my = d.elements[13], mz = d.elements[14], d.elements[12] = d.elements[13] = d.elements[14] = 0;
            var e = new THREE.Vector3(0, 0, 1);
            e.applyProjection(d), e.normalize();
            var f = new THREE.Vector3(0, -1, 0);
            if (f.applyProjection(d), f.normalize(), M.audioEngine.context.listener.setOrientation(e.x, e.y, e.z, f.x, f.y, f.z), 
            d.elements[12] = mx, d.elements[13] = my, d.elements[14] = mz, +new Date() - a > 50) return;
        }
    }
}, Object.defineProperty(M.audioEngine, "VOLUME", {
    set: function(a) {
        M.audioEngine._volume = a, M.audioEngine.volume.gain.value = M.audioEngine._volume;
    },
    get: function() {
        if (M.audioEngine._volume) return M.audioEngine._volume;
    }
}), window.M = window.M || {}, M.videoEngine = {}, M.videoEngine.load = function() {}, 
function() {
    window.M = window.M || {}, M.imagesEngine = {
        numImages: 0,
        imagesLoaded: 0,
        defaults: {
            waterNormal: "assets/images/waternormals.jpg",
            water: "assets/images/water.jpg",
            skybox: "assets/images/skybox.jpg"
        },
        load: function() {
            M.imagesEngine.map = new HashMap(), M.imagesEngine.images = [], M.imagesEngine.numImages = 0, 
            M.imagesEngine.loader = new THREE.TextureLoader(), Object.assign(Assets.Images, M.imagesEngine.defaults);
            for (var a in Assets.Images) M.imagesEngine.numImages++, M.imagesEngine.loadSingleFile(a, Assets.Images[a]);
            0 == M.imagesEngine.numImages && (M.assetsManager.completed.images = !0);
        },
        get: function(a) {
            return M.imagesEngine.map.get(a) || !1;
        },
        loadSingleFile: function(a, b) {
            try {
                M.imagesEngine.imagesLoaded++, M.imagesEngine.loader.load(b, function(b) {
                    M.imagesEngine.map.put(a, b), M.imagesEngine.checkLoad();
                }, function() {}, function() {
                    console.log("An error occurred while fetching texture."), M.imagesEngine.checkLoad();
                });
            } catch (a) {}
        },
        checkLoad: function() {
            M.imagesEngine.imagesLoaded == M.imagesEngine.numImages && (M.assetsManager.completed.images = !0);
        },
        add: function(a, b) {
            a && b && M.imagesEngine.map.put(a, b);
        }
    };
}(), window.M = window.M || {}, M.lightEngine = {
    delayFactor: .1,
    delayStep: 30,
    holderRadius: .01,
    holderSegments: 1,
    init: function() {
        M.lightEngine.map = new HashMap(), M.lightEngine.lights = [];
    },
    numLights: 0,
    add: function(a) {
        M.lightEngine.lights.push(a);
    },
    update: function() {
        var a = new Date();
        for (var b in M.lightEngine.lights) {
            if (M.lightEngine.lights[b].update(app.clock.getDelta()), +new Date() - a > 50) return;
        }
    }
}, M.lightEngine.init(), function() {
    window.M = window.M || {}, M.generalAssetsEngine = {}, M.generalAssetsEngine.load = function() {};
}(), window.M = window.M || {}, M.fx = M.fx || {}, M.fx.shadersEngine = {
    SHADERS_DIR: "app/shaders/",
    SHADERS: [],
    map: new HashMap(),
    shaders: [],
    shaders: {},
    numShaders: 0,
    shadersLoaded: 0,
    update: function() {},
    load: function() {
        if (Assets.Shaders) for (var a in Assets.Shaders) M.fx.shadersEngine.numShaders++, 
        M.fx.shadersEngine.loadSingleFile(a, Assets.Shaders[a]);
        0 == M.fx.shadersEngine.numShaders && (M.assetsManager.completed.shaders = !0);
    },
    get: function(a) {
        return M.fx.shadersEngine.map.get(a) || !1;
    },
    loadSingleFile: function(a, b) {
        if ("js" == b.split(".")[1]) include(b.split(".js")[0], this.checkLoad); else {
            var c = new XMLHttpRequest();
            c.open("GET", b, !0), c.responseType = "text", c.onload = function(b) {
                var c = M.fx.shadersEngine._parseShader(this.responseText);
                M.fx.shadersEngine.map.put(a, c), M.fx.shadersEngine.shadersLoaded++, M.fx.shadersEngine.checkLoad();
            }, c.send();
        }
    },
    _parseShader: function(a) {
        var b = {};
        return b.name = a.substring(a.indexOf("<name>") + 6, a.indexOf("</name>")), b.vertex = a.substring(a.indexOf("<vertex>") + 8, a.indexOf("</vertex>")), 
        b.fragment = a.substring(a.indexOf("<fragment>") + 10, a.indexOf("</fragment>")), 
        b.options = {}, b.attributes = {}, b.uniforms = {}, b;
    },
    create: function(a, b) {
        var c = {};
        c.name = a, c.vertex = b.vertex || "", c.fragment = b.fragment || "", c.options = b.options || {}, 
        c.attributes = b.attributes || {}, c.uniforms = b.uniforms || {}, c.instance = b.instance || !1, 
        M.fx.shadersEngine.SHADERS.push(a), M.fx.shadersEngine.map.put(a, c);
    },
    checkLoad: function() {
        M.fx.shadersEngine.shadersLoaded == M.fx.shadersEngine.numShaders && (M.assetsManager.completed.shaders = !0);
    },
    add: function(a) {
        M.fx.shadersEngine.shaders.push(a);
    }
}, M.fx.shadersEngine.create("Skybox", {
    instance: function(a) {
        if (window.asModule) return !1;
        var b = new THREE.CubeTexture([]);
        b.format = THREE.RGBFormat;
        var c = a.texture || "skybox", d = (M.imagesEngine.get(c), function(a, b) {
            var c = 1024, d = document.createElement("canvas");
            return d.width = c, d.height = c, d.getContext("2d").drawImage(image, -a * c, -b * c), 
            d;
        });
        b.images[0] = d(2, 1), b.images[1] = d(0, 1), b.images[2] = d(1, 0), b.images[3] = d(1, 2), 
        b.images[4] = d(1, 1), b.images[5] = d(3, 1), b.needsUpdate = !0;
        var e = THREE.ShaderLib.cube;
        e.uniforms.tCube.value = b;
        var f = new THREE.ShaderMaterial({
            fragmentShader: e.fragmentShader,
            vertexShader: e.vertexShader,
            uniforms: e.uniforms,
            depthWrite: !1,
            side: THREE.BackSide
        });
        return new THREE.Mesh(new THREE.BoxGeometry(1e6, 1e6, 1e6), f);
    },
    options: {
        texture: {
            name: "texture",
            type: "string",
            default: "skybox",
            mandatory: !0
        }
    }
}), M.fx.shadersEngine.create("Atmosphere", {
    vertex: function() {
        return window.asModule ? "" : [ "varying vec3 vNormal;", "void main(){", "\t// compute intensity", "\tvNormal\t\t= normalize( normalMatrix * normal );", "\t// set gl_Position", "\tgl_Position\t= projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}" ].join("\n");
    },
    fragment: function() {
        return window.asModule ? "" : [ "uniform float coeficient;", "uniform float power;", "uniform vec3  glowColor;", "varying vec3  vNormal;", "void main(){", "\tfloat intensity\t= pow( coeficient - dot(vNormal, vec3(0.0, 0.0, 1.0)), power );", "\tgl_FragColor\t= vec4( glowColor * intensity, 1.0 );", "}" ].join("\n");
    },
    uniforms: function() {
        return window.asModule ? {} : {
            coeficient: {
                type: "f",
                value: 1
            },
            power: {
                type: "f",
                value: 2
            },
            glowColor: {
                type: "c",
                value: new THREE.Color("pink")
            }
        };
    },
    options: window.asModule ? {} : {
        side: THREE.FrontSide,
        blending: THREE.AdditiveBlending,
        transparent: !0,
        depthWrite: !1
    },
    attributes: {}
}), M.fx.shadersEngine.create("Mirror", {
    uniforms: function() {
        return window.asModule ? {} : {
            mirrorColor: {
                type: "c",
                value: new THREE.Color(8355711)
            },
            mirrorSampler: {
                type: "t",
                value: null
            },
            textureMatrix: {
                type: "m4",
                value: new THREE.Matrix4()
            }
        };
    },
    vertex: function() {
        return window.asModule ? "" : [ "uniform mat4 textureMatrix;", "varying vec4 mirrorCoord;", "void main() {", "vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );", "vec4 worldPosition = modelMatrix * vec4( position, 1.0 );", "mirrorCoord = textureMatrix * worldPosition;", "gl_Position = projectionMatrix * mvPosition;", "}" ].join("\n");
    },
    fragment: function() {
        return window.asModule ? "" : [ "uniform vec3 mirrorColor;", "uniform sampler2D mirrorSampler;", "varying vec4 mirrorCoord;", "float blendOverlay(float base, float blend) {", "return( base < 0.5 ? ( 2.0 * base * blend ) : (1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );", "}", "void main() {", "vec4 color = texture2DProj(mirrorSampler, mirrorCoord);", "color = vec4(blendOverlay(mirrorColor.r, color.r), blendOverlay(mirrorColor.g, color.g), blendOverlay(mirrorColor.b, color.b), 1.0);", "gl_FragColor = color;", "}" ].join("\n");
    },
    instance: function() {
        if (window.asModule) return !1;
        var a = function(a, b, c, d) {
            THREE.Object3D.call(this), this.name = "mirror_" + this.id, d = d || {}, this.matrixNeedsUpdate = !0;
            var e = void 0 !== d.textureWidth ? d.textureWidth : 512, f = void 0 !== d.textureHeight ? d.textureHeight : 512;
            this.clipBias = void 0 !== d.clipBias ? d.clipBias : 0;
            var g = void 0 !== d.color ? new THREE.Color(d.color) : new THREE.Color(8355711);
            if (this.renderer = a, this.mirrorPlane = new THREE.Plane(), this.normal = new THREE.Vector3(0, 0, 1), 
            this.mirrorWorldPosition = new THREE.Vector3(), this.cameraWorldPosition = new THREE.Vector3(), 
            this.rotationMatrix = new THREE.Matrix4(), this.lookAtPosition = new THREE.Vector3(0, 0, -1), 
            this.clipPlane = new THREE.Vector4(), void 0 !== d.debugMode && d.debugMode) {
                var h = new THREE.ArrowHelper(new THREE.Vector3(0, 0, 1), new THREE.Vector3(0, 0, 0), 10, 16777088), i = new THREE.Geometry();
                i.vertices.push(new THREE.Vector3(-10, -10, 0)), i.vertices.push(new THREE.Vector3(10, -10, 0)), 
                i.vertices.push(new THREE.Vector3(10, 10, 0)), i.vertices.push(new THREE.Vector3(-10, 10, 0)), 
                i.vertices.push(i.vertices[0]);
                var j = new THREE.Line(i, new THREE.LineBasicMaterial({
                    color: 16777088
                }));
                this.add(h), this.add(j);
            }
            b instanceof THREE.PerspectiveCamera ? this.camera = b : (this.camera = new THREE.PerspectiveCamera(), 
            console.log(this.name + ": camera is not a Perspective Camera!")), this.textureMatrix = new THREE.Matrix4(), 
            this.mirrorCamera = this.camera.clone(), this.mirrorCamera.matrixAutoUpdate = !0;
            var k = {
                minFilter: THREE.LinearFilter,
                magFilter: THREE.LinearFilter,
                format: THREE.RGBFormat,
                stencilBuffer: !1
            };
            this.renderTarget = new THREE.WebGLRenderTarget(e, f, k), this.renderTarget2 = new THREE.WebGLRenderTarget(e, f, k);
            var l = M.fx.shadersEngine.get("Mirror"), m = THREE.UniformsUtils.clone(l.uniforms);
            this.material = new THREE.ShaderMaterial({
                fragmentShader: l.fragment,
                vertexShader: l.vertex,
                uniforms: m
            }), this.material.uniforms.mirrorSampler.value = this.renderTarget.texture, this.material.uniforms.mirrorColor.value = g, 
            this.material.uniforms.textureMatrix.value = this.textureMatrix, THREE.Math.isPowerOfTwo(e) && THREE.Math.isPowerOfTwo(f) || (this.renderTarget.texture.generateMipmaps = !1, 
            this.renderTarget2.texture.generateMipmaps = !1), this.updateTextureMatrix(), this.render();
        };
        return a.prototype = Object.create(THREE.Object3D.prototype), a.prototype.constructor = a, 
        a.prototype.renderWithMirror = function(a) {
            this.updateTextureMatrix(), this.matrixNeedsUpdate = !1;
            var b = a.camera;
            a.camera = this.mirrorCamera, a.renderTemp(), a.material.uniforms.mirrorSampler.value = a.renderTarget2.texture, 
            this.render(), this.matrixNeedsUpdate = !0, a.material.uniforms.mirrorSampler.value = a.renderTarget.texture, 
            a.camera = b, a.updateTextureMatrix();
        }, a.prototype.updateTextureMatrix = function() {
            this.updateMatrixWorld(), this.camera.updateMatrixWorld(), this.mirrorWorldPosition.setFromMatrixPosition(this.matrixWorld), 
            this.cameraWorldPosition.setFromMatrixPosition(this.camera.matrixWorld), this.rotationMatrix.extractRotation(this.matrixWorld), 
            this.normal.set(0, 0, 1), this.normal.applyMatrix4(this.rotationMatrix);
            var a = this.mirrorWorldPosition.clone().sub(this.cameraWorldPosition);
            a.reflect(this.normal).negate(), a.add(this.mirrorWorldPosition), this.rotationMatrix.extractRotation(this.camera.matrixWorld), 
            this.lookAtPosition.set(0, 0, -1), this.lookAtPosition.applyMatrix4(this.rotationMatrix), 
            this.lookAtPosition.add(this.cameraWorldPosition);
            var b = this.mirrorWorldPosition.clone().sub(this.lookAtPosition);
            b.reflect(this.normal).negate(), b.add(this.mirrorWorldPosition), this.up.set(0, -1, 0), 
            this.up.applyMatrix4(this.rotationMatrix), this.up.reflect(this.normal).negate(), 
            this.mirrorCamera.position.copy(a), this.mirrorCamera.up = this.up, this.mirrorCamera.lookAt(b), 
            this.mirrorCamera.updateProjectionMatrix(), this.mirrorCamera.updateMatrixWorld(), 
            this.mirrorCamera.matrixWorldInverse.getInverse(this.mirrorCamera.matrixWorld), 
            this.textureMatrix.set(.5, 0, 0, .5, 0, .5, 0, .5, 0, 0, .5, .5, 0, 0, 0, 1), this.textureMatrix.multiply(this.mirrorCamera.projectionMatrix), 
            this.textureMatrix.multiply(this.mirrorCamera.matrixWorldInverse), this.mirrorPlane.setFromNormalAndCoplanarPoint(this.normal, this.mirrorWorldPosition), 
            this.mirrorPlane.applyMatrix4(this.mirrorCamera.matrixWorldInverse), this.clipPlane.set(this.mirrorPlane.normal.x, this.mirrorPlane.normal.y, this.mirrorPlane.normal.z, this.mirrorPlane.constant);
            var c = new THREE.Vector4(), d = this.mirrorCamera.projectionMatrix;
            c.x = (Math.sign(this.clipPlane.x) + d.elements[8]) / d.elements[0], c.y = (Math.sign(this.clipPlane.y) + d.elements[9]) / d.elements[5], 
            c.z = -1, c.w = (1 + d.elements[10]) / d.elements[14];
            var e = new THREE.Vector4();
            e = this.clipPlane.multiplyScalar(2 / this.clipPlane.dot(c)), d.elements[2] = e.x, 
            d.elements[6] = e.y, d.elements[10] = e.z + 1 - this.clipBias, d.elements[14] = e.w;
        }, a.prototype.render = function() {
            this.matrixNeedsUpdate && this.updateTextureMatrix(), this.matrixNeedsUpdate = !0;
            for (var a = this; null !== a.parent; ) a = a.parent;
            if (void 0 !== a && a instanceof THREE.Scene) {
                var b = this.material.visible;
                this.material.visible = !1, this.renderer.render(a, this.mirrorCamera, this.renderTarget, !0), 
                this.material.visible = b;
            }
        }, a;
    }()
}), M.fx.shadersEngine.create("Water", {
    uniforms: function() {
        return window.asModule ? {} : THREE.UniformsUtils.merge([ THREE.UniformsLib.fog, {
            normalSampler: {
                type: "t",
                value: null
            },
            mirrorSampler: {
                type: "t",
                value: null
            },
            alpha: {
                type: "f",
                value: 1
            },
            time: {
                type: "f",
                value: 0
            },
            distortionScale: {
                type: "f",
                value: 20
            },
            noiseScale: {
                type: "f",
                value: 1
            },
            textureMatrix: {
                type: "m4",
                value: new THREE.Matrix4()
            },
            sunColor: {
                type: "c",
                value: new THREE.Color(8355711)
            },
            sunDirection: {
                type: "v3",
                value: new THREE.Vector3(.70707, .70707, 0)
            },
            eye: {
                type: "v3",
                value: new THREE.Vector3()
            },
            waterColor: {
                type: "c",
                value: new THREE.Color(5592405)
            }
        } ]);
    },
    vertex: function() {
        return window.asModule ? "" : [ "uniform mat4 textureMatrix;", "uniform float time;", "varying vec4 mirrorCoord;", "varying vec3 worldPosition;", "void main()", "{", "\tmirrorCoord = modelMatrix * vec4( position, 1.0 );", "\tworldPosition = mirrorCoord.xyz;", "\tmirrorCoord = textureMatrix * mirrorCoord;", "\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}" ].join("\n");
    },
    fragment: function() {
        return window.asModule ? "" : [ "precision highp float;", "uniform sampler2D mirrorSampler;", "uniform float alpha;", "uniform float time;", "uniform float distortionScale;", "uniform sampler2D normalSampler;", "uniform vec3 sunColor;", "uniform vec3 sunDirection;", "uniform vec3 eye;", "uniform vec3 waterColor;", "varying vec4 mirrorCoord;", "varying vec3 worldPosition;", "vec4 getNoise( vec2 uv )", "{", "\tvec2 uv0 = ( uv / 103.0 ) + vec2(time / 17.0, time / 29.0);", "\tvec2 uv1 = uv / 107.0-vec2( time / -19.0, time / 31.0 );", "\tvec2 uv2 = uv / vec2( 8907.0, 9803.0 ) + vec2( time / 101.0, time / 97.0 );", "\tvec2 uv3 = uv / vec2( 1091.0, 1027.0 ) - vec2( time / 109.0, time / -113.0 );", "\tvec4 noise = texture2D( normalSampler, uv0 ) +", "\t\ttexture2D( normalSampler, uv1 ) +", "\t\ttexture2D( normalSampler, uv2 ) +", "\t\ttexture2D( normalSampler, uv3 );", "\treturn noise * 0.5 - 1.0;", "}", "void sunLight( const vec3 surfaceNormal, const vec3 eyeDirection, float shiny, float spec, float diffuse, inout vec3 diffuseColor, inout vec3 specularColor )", "{", "\tvec3 reflection = normalize( reflect( -sunDirection, surfaceNormal ) );", "\tfloat direction = max( 0.0, dot( eyeDirection, reflection ) );", "\tspecularColor += pow( direction, shiny ) * sunColor * spec;", "\tdiffuseColor += max( dot( sunDirection, surfaceNormal ), 0.0 ) * sunColor * diffuse;", "}", THREE.ShaderChunk.common, THREE.ShaderChunk.fog_pars_fragment, "void main()", "{", "\tvec4 noise = getNoise( worldPosition.xz );", "\tvec3 surfaceNormal = normalize( noise.xzy * vec3( 1.5, 1.0, 1.5 ) );", "\tvec3 diffuseLight = vec3(0.0);", "\tvec3 specularLight = vec3(0.0);", "\tvec3 worldToEye = eye-worldPosition;", "\tvec3 eyeDirection = normalize( worldToEye );", "\tsunLight( surfaceNormal, eyeDirection, 100.0, 2.0, 0.5, diffuseLight, specularLight );", "\tfloat distance = length(worldToEye);", "\tvec2 distortion = surfaceNormal.xz * ( 0.001 + 1.0 / distance ) * distortionScale;", "\tvec3 reflectionSample = vec3( texture2D( mirrorSampler, mirrorCoord.xy / mirrorCoord.z + distortion ) );", "\tfloat theta = max( dot( eyeDirection, surfaceNormal ), 0.0 );", "\tfloat rf0 = 0.3;", "\tfloat reflectance = rf0 + ( 1.0 - rf0 ) * pow( ( 1.0 - theta ), 5.0 );", "\tvec3 scatter = max( 0.0, dot( surfaceNormal, eyeDirection ) ) * waterColor;", "\tvec3 albedo = mix( sunColor * diffuseLight * 0.3 + scatter, ( vec3( 0.1 ) + reflectionSample * 0.9 + reflectionSample * specularLight ), reflectance );", "\tvec3 outgoingLight = albedo;", THREE.ShaderChunk.fog_fragment, "\tgl_FragColor = vec4( outgoingLight, alpha );", "}" ].join("\n");
    },
    instance: function(a, b, c, d) {
        if (window.asModule) return !1;
        var e = function(a, b, c, d) {
            function e(a, b) {
                return void 0 !== a ? a : b;
            }
            THREE.Object3D.call(this), this.name = "water_" + this.id, d = d || {}, this.matrixNeedsUpdate = !0;
            var f = e(d.textureWidth, 512), g = e(d.textureHeight, 512);
            this.clipBias = e(d.clipBias, 0), this.alpha = e(d.alpha, 1), this.time = e(d.time, 0), 
            this.normalSampler = e(d.waterNormals, null), this.sunDirection = e(d.sunDirection, new THREE.Vector3(.70707, .70707, 0)), 
            this.sunColor = new THREE.Color(e(d.sunColor, 16777215)), this.waterColor = new THREE.Color(e(d.waterColor, 8355711)), 
            this.eye = e(d.eye, new THREE.Vector3(0, 0, 0)), this.distortionScale = e(d.distortionScale, 20), 
            this.side = e(d.side, THREE.FrontSide), this.fog = e(d.fog, !1), this.renderer = a, 
            this.scene = c, this.mirrorPlane = new THREE.Plane(), this.normal = new THREE.Vector3(0, 0, 1), 
            this.mirrorWorldPosition = new THREE.Vector3(), this.cameraWorldPosition = new THREE.Vector3(), 
            this.rotationMatrix = new THREE.Matrix4(), this.lookAtPosition = new THREE.Vector3(0, 0, -1), 
            this.clipPlane = new THREE.Vector4(), b instanceof THREE.PerspectiveCamera ? this.camera = b : (this.camera = new THREE.PerspectiveCamera(), 
            console.log(this.name + ": camera is not a Perspective Camera!")), this.textureMatrix = new THREE.Matrix4(), 
            this.mirrorCamera = this.camera.clone(), this.renderTarget = new THREE.WebGLRenderTarget(f, g), 
            this.renderTarget2 = new THREE.WebGLRenderTarget(f, g);
            var h = M.fx.shadersEngine.get("Water"), i = THREE.UniformsUtils.clone(h.uniforms());
            this.material = new THREE.ShaderMaterial({
                fragmentShader: h.fragment(),
                vertexShader: h.vertex(),
                uniforms: i,
                transparent: !0,
                side: this.side,
                fog: this.fog
            }), this.material.uniforms.mirrorSampler.value = this.renderTarget.texture, this.material.uniforms.textureMatrix.value = this.textureMatrix, 
            this.material.uniforms.alpha.value = this.alpha, this.material.uniforms.time.value = this.time, 
            this.material.uniforms.normalSampler.value = this.normalSampler, this.material.uniforms.sunColor.value = this.sunColor, 
            this.material.uniforms.waterColor.value = this.waterColor, this.material.uniforms.sunDirection.value = this.sunDirection, 
            this.material.uniforms.distortionScale.value = this.distortionScale, this.material.uniforms.eye.value = this.eye, 
            THREE.Math.isPowerOfTwo(f) && THREE.Math.isPowerOfTwo(g) || (this.renderTarget.texture.generateMipmaps = !1, 
            this.renderTarget.texture.minFilter = THREE.LinearFilter, this.renderTarget2.texture.generateMipmaps = !1, 
            this.renderTarget2.texture.minFilter = THREE.LinearFilter), this.updateTextureMatrix(), 
            this.render();
        };
        return e.prototype = Object.create(M.fx.shadersEngine.get("Mirror").instance.prototype), 
        e.prototype.constructor = e, e.prototype.updateTextureMatrix = function() {
            function a(a) {
                return a ? a < 0 ? -1 : 1 : 0;
            }
            this.updateMatrixWorld(), this.camera.updateMatrixWorld(), this.mirrorWorldPosition.setFromMatrixPosition(this.matrixWorld), 
            this.cameraWorldPosition.setFromMatrixPosition(this.camera.matrixWorld), this.rotationMatrix.extractRotation(this.matrixWorld), 
            this.normal.set(0, 0, 1), this.normal.applyMatrix4(this.rotationMatrix);
            var b = this.mirrorWorldPosition.clone().sub(this.cameraWorldPosition);
            b.reflect(this.normal).negate(), b.add(this.mirrorWorldPosition), this.rotationMatrix.extractRotation(this.camera.matrixWorld), 
            this.lookAtPosition.set(0, 0, -1), this.lookAtPosition.applyMatrix4(this.rotationMatrix), 
            this.lookAtPosition.add(this.cameraWorldPosition);
            var c = this.mirrorWorldPosition.clone().sub(this.lookAtPosition);
            c.reflect(this.normal).negate(), c.add(this.mirrorWorldPosition), this.up.set(0, -1, 0), 
            this.up.applyMatrix4(this.rotationMatrix), this.up.reflect(this.normal).negate(), 
            this.mirrorCamera.position.copy(b), this.mirrorCamera.up = this.up, this.mirrorCamera.lookAt(c), 
            this.mirrorCamera.aspect = this.camera.aspect, this.mirrorCamera.updateProjectionMatrix(), 
            this.mirrorCamera.updateMatrixWorld(), this.mirrorCamera.matrixWorldInverse.getInverse(this.mirrorCamera.matrixWorld), 
            this.textureMatrix.set(.5, 0, 0, .5, 0, .5, 0, .5, 0, 0, .5, .5, 0, 0, 0, 1), this.textureMatrix.multiply(this.mirrorCamera.projectionMatrix), 
            this.textureMatrix.multiply(this.mirrorCamera.matrixWorldInverse), this.mirrorPlane.setFromNormalAndCoplanarPoint(this.normal, this.mirrorWorldPosition), 
            this.mirrorPlane.applyMatrix4(this.mirrorCamera.matrixWorldInverse), this.clipPlane.set(this.mirrorPlane.normal.x, this.mirrorPlane.normal.y, this.mirrorPlane.normal.z, this.mirrorPlane.constant);
            var d = new THREE.Vector4(), e = this.mirrorCamera.projectionMatrix;
            d.x = (a(this.clipPlane.x) + e.elements[8]) / e.elements[0], d.y = (a(this.clipPlane.y) + e.elements[9]) / e.elements[5], 
            d.z = -1, d.w = (1 + e.elements[10]) / e.elements[14];
            var f = new THREE.Vector4();
            f = this.clipPlane.multiplyScalar(2 / this.clipPlane.dot(d)), e.elements[2] = f.x, 
            e.elements[6] = f.y, e.elements[10] = f.z + 1 - this.clipBias, e.elements[14] = f.w;
            var g = new THREE.Vector3();
            g.setFromMatrixPosition(this.camera.matrixWorld), this.eye = g, this.material.uniforms.eye.value = this.eye;
        }, function(a, b, c, d) {
            var f = M.imagesEngine.get(d.textureNormal);
            f.wrapS = f.wrapT = THREE.RepeatWrapping;
            var g = new e(a, b, c, {
                textureWidth: d.textureWidth,
                textureHeight: d.textureHeight,
                waterNormals: f,
                alpha: d.alpha,
                sunDirection: d.light ? d.light.position.clone().normalize() : new THREE.Vector3(0, 0, 20).normalize(),
                sunColor: d.sunColor,
                waterColor: d.waterColor,
                distortionScale: d.distortionScale
            }), h = new THREE.Mesh(new THREE.PlaneBufferGeometry(500 * d.width, 500 * d.height), g.material);
            return h.add(g), h.rotation.x = .5 * -Math.PI, h.render = function() {
                g.material.uniforms.time.value += 1 / 60, g.render();
            }, h;
        };
    }(),
    options: {
        textureWidth: {
            name: "texture width",
            type: "number",
            default: 512,
            mandatory: !0
        },
        textureHeight: {
            name: "texture height",
            type: "number",
            default: 512,
            mandatory: !0
        },
        textureNormal: {
            name: "texture normal",
            type: "string",
            default: "waterNormal",
            mandatory: !1
        },
        sunColor: {
            name: "sun color",
            type: "color",
            default: "0xffffff",
            mandatory: !0
        },
        waterColor: {
            name: "water color",
            type: "color",
            default: "0x001e0",
            mandatory: !0
        },
        distortionScale: {
            name: "distortion scale",
            type: "color",
            default: 50,
            mandatory: !0
        },
        alpha: {
            name: "alpha",
            type: "number",
            default: 1,
            mandatory: !0
        },
        width: {
            name: "width",
            type: "number",
            default: 2e3,
            mandatory: !0
        },
        height: {
            name: "height",
            type: "number",
            default: 2e3,
            mandatory: !0
        }
    }
}), Class("App", {
    App: function() {
        this.log_types = {
            e: "error",
            w: "warn",
            i: "info"
        }, this.util = _.extend({
            h: window.innerHeight,
            w: window.innerWidth,
            ratio: window.innerWidth / window.innerHeight,
            frameRate: 60,
            camera: {
                fov: 75,
                near: .1,
                far: 100
            }
        }, config), this.threeLib = void 0, this.camera = void 0, this.user = void 0, this.scene = void 0, 
        this.renderer = void 0, this.clearColor = 0, Object.defineProperty(this, "clearColor", {
            set: function(a) {
                try {
                    this.renderer && (this.renderer.setClearColor(a), this.clearColor = a);
                } catch (a) {}
            }
        }), this.debug = !0, this.clock = new THREE.Clock(), this.mouseX = 0, this.mouseY = 0, 
        this.zoom = 0, this.windowHalfX = window.innerWidth / 2, this.windowHalfY = window.innerHeight / 2, 
        this.CAMERA_MAX_Z = 1e3, this.CAMERA_MIN_Z = 250, window.addEventListener("onmessage", this.onMessage, !1), 
        window.addEventListener("message", this.onMessage, !1);
    },
    onCreate: function() {},
    preload: function(a) {
        a();
    },
    prepareScene: function() {},
    progressAnimation: function(a) {
        $("#loader").animate({
            opacity: "0",
            "margin-top": "250px"
        }, 1e3, function() {
            $("#loader").remove(), $("body").animate({
                backgroundColor: "#fff"
            }, 200, a);
        });
    },
    _render: function() {},
    setUpLeap: function() {},
    onLeapSocketConnected: function() {},
    onLeapDeviceConnected: function() {},
    onLeapDeviceDisconnected: function() {},
    render: function() {
        M.game.update(), M.audioEngine.update(), M.lightEngine.update(), M.universe.update(), 
        M.control.update(), app.camera.update && app.camera.update(app.clock.getDelta()), 
        app.renderer.autoClear = !1, app.renderer.clear(app.clearColor), app._render(), 
        app.renderer.render(app.scene, app.camera.object), app.util.physics_enabled && Physijs._isLoaded && app.scene.simulate(), 
        app.util.tween_enabled && TWEEN.update(), requestAnimFrame(app.render);
    },
    add: function(a, b) {
        this.scene.add(a), M.universe.reality.put(a.uuid, b);
    },
    remove: function(a) {
        this.scene.remove(a), M.universe.reality.remove(a.uuid);
    },
    init: function() {
        app.three = THREE;
        var a = app.util.camera, b = app.util;
        if (window.keypress && (app._keylistener = new window.keypress.Listener()), config) if (app.log("config loaded"), 
        app.util.physics_enabled) {
            app.log("physics enabled.");
            try {
                Physijs.scripts.worker = "workers/physijs_worker.js", Physijs.scripts.ammo = "ammo.js", 
                app.scene = new Physijs.Scene(), Physijs._isLoaded = !0;
            } catch (a) {
                app.log("something bad trying to create physijs scene", "e"), app.log(a), Physijs._isLoaded = !1, 
                app.scene = new app.three.Scene();
            }
        } else app.log("physics not enabled."), Physijs._isLoaded = !1, app.scene = new app.three.Scene(); else app.log("config not loaded, switching to three.js"), 
        Physijs._isLoaded = !1, app.scene = new app.three.Scene();
        var c = {
            fov: a.fov,
            ratio: b.ratio,
            near: a.near,
            far: a.far
        };
        config && app.util.camera && (c.fov = app.util.camera.fov ? app.util.camera.fov : c.fov, 
        c.ratio = app.util.camera.ratio ? app.util.camera.ratio : c.ratio, c.near = app.util.camera.near ? app.util.camera.near : c.near, 
        c.far = app.util.camera.far ? app.util.camera.far : c.far), app.camera = new Camera(c);
        var d = !1;
        app.util.alpha && (d = !0), app.renderer = new app.three.WebGLRenderer({
            alpha: d,
            antialias: !0
        }), app.util.cast_shadow && (app.renderer.shadowMap.enabled = !0, app.renderer.shadowMap.type = THREE.PCFSoftShadowMap, 
        app.renderer.sortObjects = !1), app.renderer.setPixelRatio(window.devicePixelRatio), 
        app.renderer.setSize(b.w, b.h), document.getElementById("gameContainer").appendChild(app.renderer.domElement), 
        M.game.update(), M.universe.update(), M.control.init(), app.render(), app.onCreate instanceof Function ? app.onCreate() : console.log("Something wrong in your onCreate method");
    },
    load: function() {
        console.log("inside load"), "function" != typeof this.progressAnimation && (this.progressAnimation = function(a) {
            console.log("def progressAnimation"), a();
        }), this.progressAnimation(app.init);
    },
    sendMessage: function(a) {
        parent.postMessage(a, location.origin);
    },
    onMessage: function() {
        event.origin || event.originalEvent.origin, location.origin;
    },
    onkey: function(a, b) {
        app._keylistener && app._keylistener.simple_combo(a, b);
    },
    log: function() {
        this.debug && (arguments.length > 1 && arguments[1] in this.log_types ? console[this.log_types[arguments[1]]](arguments[0]) : console.log(arguments[0]));
    },
    onDocumentMouseWheel: function(a) {
        a.preventDefault(), app.zoom = .05 * a.wheelDelta, app.camera.object.position.z += app.zoom;
    },
    onDocumentMouseMove: function(a) {
        app.mouseX = a.clientX - app.windowHalfX, app.mouseY = a.clientY - app.windowHalfY;
    },
    onDocumentTouchStart: function(a) {
        1 === a.touches.length && (a.preventDefault(), app.mouseX = a.touches[0].pageX - app.windowHalfX, 
        app.mouseY = a.touches[0].pageY - app.windowHalfY);
    },
    onDocumentTouchMove: function(a) {
        1 === a.touches.length && (a.preventDefault(), app.mouseX = a.touches[0].pageX - app.windowHalfX, 
        app.mouseY = a.touches[0].pageY - app.windowHalfY);
    },
    keyup: function(a) {},
    keydown: function(a) {},
    onFailedTest: function(a, b) {},
    onSuccededTest: function(a) {}
}), "undefined" != typeof module && void 0 !== module.exports ? (console.log(window), 
module.exports = M, delete window.M) : (window.app = {}, M.started = !1, M.start = function() {
    if (M.started) return void console.log("app already started");
    if (M.started = !0, console.log("inside window onload"), window.subClasses.App) {
        var a = window.subClasses.App;
        app = new window[a]();
    } else app = new App();
    M.util.start(), M.util.check.start(app.onSuccededTest, app.onFailedTest) && app.preload(function() {
        M.assetsManager.load(function() {
            app.prepareScene(), app.load();
        });
    });
}, M.resize = function() {
    app.util.h = window.innerHeight, app.util.w = window.innerWidth, app.util.ratio = app.util.w / app.util.h, 
    app.camera && app.renderer && (app.camera.object.aspect = app.util.ratio, app.camera.object.updateProjectionMatrix(), 
    app.renderer.setSize(app.util.w, app.util.h));
}, window.addEventListener("load", M.start), window.addEventListener("resize", M.resize), 
M.version = "0.0.46", M.author = {
    name: "Marco Stagni",
    email: "mrc.stagni@gmail.com",
    website: "http://mage.studio"
});