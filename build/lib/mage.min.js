/*! mage version: 0.0.83, 17-06-2017 */
var license = "Copyright (c) 2017 by Marco Stagni < http://marcostagni.com mrc.stagni@gmail.com > and contributors.\n\nSome rights reserved. Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n* Redistributions of source code must retain the above copyright\n  notice, this list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above\n  copyright notice, this list of conditions and the following\n  disclaimer in the documentation and/or other materials provided\n  with the distribution.\n\n* The names of the contributors may not be used to endorse or\n  promote products derived from this software without specific\n  prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nMage contains third party software in the 'app/vendor' directory: each\nfile/module in this directory is distributed under its original license.\n\n";

window.M = window.M || {}, M.util = M.util || {}, M.util.tests = [ "webgl", "webaudioapi", "webworker", "ajax" ], 
M.util.start = function() {
    window.requestAnimFrame = function() {
        return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(a, b) {
            window.setTimeout(a, 1e3 / 60);
        };
    }();
}, M.util.check = {
    start: function(a, b) {
        var c = app.util.tests || M.util.tests;
        -1 == c.indexOf("webgl") && c.push("webgl");
        for (var d in c) {
            if (-1 == M.util.tests.indexOf(c[d])) return b("No Such Test", c[d]), !1;
            if (!M.util.check[c[d]]()) return b("Test failed", c[d]), !1;
        }
        return a("All systems are go!"), !0;
    },
    webgl: function() {
        var a = document.createElement("canvas");
        return !(!a.getContext("webgl") && !a.getContext("experimental-webgl"));
    },
    webaudioapi: function() {
        return !(!window.webkitAudioContext && !window.AudioContext);
    },
    webworker: function() {
        return !!window.Worker;
    },
    ajax: function() {
        var a = null;
        try {
            a = new XMLHttpRequest();
        } catch (a) {}
        try {
            a = new ActiveXObject("Microsoft.XMLHTTP");
        } catch (a) {}
        try {
            a = new ActiveXObject("Msxml2.XMLHTTP");
        } catch (a) {}
        return null != a;
    }
}, M.util.degToRad = function(a) {
    return a * (Math.PI / 180);
}, M.util.getProportion = function(a, b, c) {
    return a * b / c;
}, window.M = window.M || {}, M.control = {
    type: void 0,
    allowedTypes: [ "fly", "fps", "custom" ],
    oldType: void 0,
    handler: void 0,
    clock: void 0,
    options: {
        fps: {
            height: 5,
            mouseFactor: .002,
            jumpHeight: 5,
            fallFactor: .25,
            delta: .1,
            velocity: .5,
            crouch: .25
        },
        fly: {}
    },
    set: function(a) {
        var b = "" + a, c = M.control.allowedTypes.indexOf(b);
        if (-1 != c) switch (c) {
          case 0:
            1 == M.control.oldType && (document.removeEventListener("pointerlockchange", M.control.internal_pointerlockchange, !1), 
            document.removeEventListener("mozpointerlockchange", M.control.internal_pointerlockchange, !1), 
            document.removeEventListener("webkitpointerlockchange", M.control.internal_pointerlockchange, !1), 
            document.removeEventListener("pointerlockerror", M.control.internal_pointerlockerror, !1), 
            document.removeEventListener("mozpointerlockerror", M.control.internal_pointerlockerror, !1), 
            document.removeEventListener("webkitpointerlockerror", M.control.internal_pointerlockerror, !1), 
            document.removeEventListener("fullscreenchange", M.control.internal_fullscreenchange, !1), 
            document.removeEventListener("mozfullscreenchange", M.control.internal_fullscreenchange, !1), 
            document.removeEventListener("mousemove", M.control.handler.onMouseMove, !1), document.removeEventListener("keydown", M.control.handler.onKeyDown, !1), 
            document.removeEventListener("keyup", M.control.handler.onKeyUp, !1), document.removeEventListener("click", M.control.internal_pointerlockonclick, !1), 
            M.control.handler.enabled = !1, M.control.handler = {}), M.control.fly(app.camera.object), 
            M.control.type = "fly", M.control.oldType = 0;
            break;

          case 1:
            0 == M.control.oldType && (document.removeEventListener("contextmenu", function(a) {
                a.preventDefault();
            }, !1), document.removeEventListener("mousemove", M.control.handler.mousemove, !1), 
            document.removeEventListener("mousedown", M.control.handler.mousedown, !1), document.removeEventListener("mouseup", M.control.handler.mouseup, !1), 
            document.removeEventListener("keydown", M.control.handler.keydown, !1), document.removeEventListener("keyup", M.control.handler.keyup, !1)), 
            M.control.fps(app.camera.object), app.add(M.control.handler.getObject(), M.control.handler), 
            M.control.fps_uuid = M.control.handler.getObject().uuid, M.control.type = "fps", 
            M.control.oldType = 1;
        }
    },
    internal_fly: function(a, b) {
        function c(a, b) {
            return function() {
                b.apply(a, arguments);
            };
        }
        this.object = a, this.domElement = void 0 !== b ? b : document, b && this.domElement.setAttribute("tabindex", -1), 
        this.movementSpeed = 1, this.rollSpeed = .5, this.dragToLook = !1, this.autoForward = !1, 
        this.tmpQuaternion = new THREE.Quaternion(), this.mouseStatus = 0, this.moveState = {
            up: 0,
            down: 0,
            left: 0,
            right: 0,
            forward: 0,
            back: 0,
            pitchUp: 0,
            pitchDown: 0,
            yawLeft: 0,
            yawRight: 0,
            rollLeft: 0,
            rollRight: 0
        }, this.moveVector = new THREE.Vector3(0, 0, 0), this.rotationVector = new THREE.Vector3(0, 0, 0), 
        this.handleEvent = function(a) {
            "function" == typeof this[a.type] && this[a.type](a);
        }, this.keydown = function(a) {
            if (!a.altKey) {
                switch (a.keyCode) {
                  case 16:
                    this.movementSpeedMultiplier = .1;
                    break;

                  case 87:
                    this.moveState.forward = 1;
                    break;

                  case 83:
                    this.moveState.back = 1;
                    break;

                  case 65:
                    this.moveState.left = 1;
                    break;

                  case 68:
                    this.moveState.right = 1;
                    break;

                  case 82:
                    this.moveState.up = 1;
                    break;

                  case 70:
                    this.moveState.down = 1;
                    break;

                  case 38:
                    this.moveState.pitchUp = 1;
                    break;

                  case 40:
                    this.moveState.pitchDown = 1;
                    break;

                  case 37:
                    this.moveState.yawLeft = 1;
                    break;

                  case 39:
                    this.moveState.yawRight = 1;
                    break;

                  case 81:
                    this.moveState.rollLeft = 2.5;
                    break;

                  case 69:
                    this.moveState.rollRight = 2.5;
                }
                this.updateMovementVector(), this.updateRotationVector();
            }
        }, this.keyup = function(a) {
            switch (a.keyCode) {
              case 16:
                this.movementSpeedMultiplier = 1;
                break;

              case 87:
                this.moveState.forward = 0;
                break;

              case 83:
                this.moveState.back = 0;
                break;

              case 65:
                this.moveState.left = 0;
                break;

              case 68:
                this.moveState.right = 0;
                break;

              case 82:
                this.moveState.up = 0;
                break;

              case 70:
                this.moveState.down = 0;
                break;

              case 38:
                this.moveState.pitchUp = 0;
                break;

              case 40:
                this.moveState.pitchDown = 0;
                break;

              case 37:
                this.moveState.yawLeft = 0;
                break;

              case 39:
                this.moveState.yawRight = 0;
                break;

              case 81:
                this.moveState.rollLeft = 0;
                break;

              case 69:
                this.moveState.rollRight = 0;
            }
            this.updateMovementVector(), this.updateRotationVector();
        }, this.mousedown = function(a) {
            if (this.domElement !== document && this.domElement.focus(), a.preventDefault(), 
            a.stopPropagation(), this.dragToLook) this.mouseStatus++; else {
                switch (a.button) {
                  case 0:
                    this.moveState.forward = 1;
                    break;

                  case 2:
                    this.moveState.back = 1;
                }
                this.updateMovementVector();
            }
        }, this.mousemove = function(a) {
            if (!this.dragToLook || this.mouseStatus > 0) {
                var b = this.getContainerDimensions(), c = b.size[0] / 2, d = b.size[1] / 2;
                this.moveState.yawLeft = -(a.pageX - b.offset[0] - c) / c * 3, this.moveState.pitchDown = (a.pageY - b.offset[1] - d) / d * 3, 
                this.updateRotationVector();
            }
        }, this.mouseup = function(a) {
            if (a.preventDefault(), a.stopPropagation(), this.dragToLook) this.mouseStatus--, 
            this.moveState.yawLeft = this.moveState.pitchDown = 0; else {
                switch (a.button) {
                  case 0:
                    this.moveState.forward = 0;
                    break;

                  case 2:
                    this.moveState.back = 0;
                }
                this.updateMovementVector();
            }
            this.updateRotationVector();
        }, this.update = function(a) {
            var b = a * this.movementSpeed, c = a * this.rollSpeed;
            this.object.translateX(this.moveVector.x * b), this.object.translateY(this.moveVector.y * b), 
            this.object.translateZ(this.moveVector.z * b), this.tmpQuaternion.set(this.rotationVector.x * c, this.rotationVector.y * c, this.rotationVector.z * c, 1).normalize(), 
            this.object.quaternion.multiply(this.tmpQuaternion), this.object.rotation.setFromQuaternion(this.object.quaternion, this.object.rotation.order);
        }, this.updateMovementVector = function() {
            var a = this.moveState.forward || this.autoForward && !this.moveState.back ? 1 : 0;
            this.moveVector.x = -this.moveState.left + this.moveState.right, this.moveVector.y = -this.moveState.down + this.moveState.up, 
            this.moveVector.z = -a + this.moveState.back;
        }, this.updateRotationVector = function() {
            this.rotationVector.x = -this.moveState.pitchDown + this.moveState.pitchUp, this.rotationVector.y = -this.moveState.yawRight + this.moveState.yawLeft, 
            this.rotationVector.z = -this.moveState.rollRight + this.moveState.rollLeft;
        }, this.getContainerDimensions = function() {
            return this.domElement != document ? {
                size: [ this.domElement.offsetWidth, this.domElement.offsetHeight ],
                offset: [ this.domElement.offsetLeft, this.domElement.offsetTop ]
            } : {
                size: [ window.innerWidth, window.innerHeight ],
                offset: [ 0, 0 ]
            };
        }, this.domElement.addEventListener("contextmenu", function(a) {
            a.preventDefault();
        }, !1), this.domElement.addEventListener("mousemove", c(this, this.mousemove), !1), 
        this.domElement.addEventListener("mousedown", c(this, this.mousedown), !1), this.domElement.addEventListener("mouseup", c(this, this.mouseup), !1), 
        this.domElement.addEventListener("keydown", c(this, this.keydown), !1), this.domElement.addEventListener("keyup", c(this, this.keyup), !1), 
        this.updateMovementVector(), this.updateRotationVector();
    },
    fly: function() {
        $("body").css({
            cursor: "url(img/pointer_cross.png), auto"
        }), M.control.handler = new M.control.internal_fly(app.camera.object), M.control.handler.movementSpeed = 3, 
        M.control.handler.domElement = document, M.control.handler.rollSpeed = .05, M.control.handler.autoForward = !1, 
        M.control.handler.dragToLook = !1;
    },
    internal_pointerlockchange: function(a) {
        M.control.handler.enabled = !0;
    },
    internal_pointerlockonclick: function(a) {
        var b = document.body;
        b.requestPointerLock = b.requestPointerLock || b.mozRequestPointerLock || b.webkitRequestPointerLock, 
        /Firefox/i.test(navigator.userAgent) ? (document.addEventListener("fullscreenchange", M.control.internal_fullscreenchange, !1), 
        document.addEventListener("mozfullscreenchange", M.control.internal_fullscreenchange, !1), 
        b.requestFullscreen = b.requestFullscreen || b.mozRequestFullscreen || b.mozRequestFullScreen || b.webkitRequestFullscreen, 
        b.requestFullscreen()) : b.requestPointerLock();
    },
    internal_pointerlockerror: function(a) {
        app.log("POINTER LOCK ERROR");
    },
    internal_fullscreenchange: function(a) {
        document.fullscreenElement !== document && document.mozFullscreenElement !== document && document.mozFullScreenElement !== document || (document.removeEventListener("fullscreenchange", M.control.internal_fullscreenchange), 
        document.removeEventListener("mozfullscreenchange", M.control.internal_fullscreenchange), 
        document.requestPointerLock());
    },
    fps_uuid: void 0,
    fps: function(a) {
        M.control.handler = new M.control.internal_fps(app.camera.object), "pointerLockElement" in document || "mozPointerLockElement" in document || "webkitPointerLockElement" in document ? (app.log("we have pointer lock ability"), 
        M.control.handler.enabled = !0, document.addEventListener("pointerlockchange", M.control.internal_pointerlockchange, !1), 
        document.addEventListener("mozpointerlockchange", M.control.internal_pointerlockchange, !1), 
        document.addEventListener("webkitpointerlockchange", M.control.internal_pointerlockchange, !1), 
        document.addEventListener("pointerlockerror", M.control.internal_pointerlockerror, !1), 
        document.addEventListener("mozpointerlockerror", M.control.internal_pointerlockerror, !1), 
        document.addEventListener("webkitpointerlockerror", M.control.internal_pointerlockerror, !1), 
        document.addEventListener("click", M.control.internal_pointerlockonclick, !1)) : app.log("BROWSER DOESN'T SUPPORT POINTER LOCK API.");
    },
    internal_fps: function(a) {
        var b = this;
        a.rotation.set(0, 0, 0);
        var c = new THREE.Object3D();
        c.add(a);
        var d = new THREE.Object3D();
        d.position.y = M.control.options.fps.height, d.add(c);
        var e = !1, f = !1, g = !1, h = !1, i = !1, j = !1, k = new THREE.Vector3(), l = Math.PI / 2, m = !1;
        this._onKeyDown = function(a) {}, this.setKeyDownListener = function(a) {
            this._onKeyDown = a;
        }, this._onKeyUp = function(a) {}, this.setKeyUpListener = function(a) {
            this._onKeyUp = a;
        }, this._onMouseMove = function(a) {}, this.setMouseMoveListener = function(a) {
            this._onMouseMove = a;
        }, this.onMouseMove = function(a) {
            if (!1 !== b.enabled) {
                var e = a.movementX || a.mozMovementX || a.webkitMovementX || 0, f = a.movementY || a.mozMovementY || a.webkitMovementY || 0;
                d.rotation.y -= e * M.control.options.fps.mouseFactor, c.rotation.x -= f * M.control.options.fps.mouseFactor, 
                c.rotation.x = Math.max(-l, Math.min(l, c.rotation.x)), M.control.handler._onMouseMove(a);
            }
        }, this.onKeyDown = function(a) {
            switch (a.keyCode) {
              case 38:
              case 87:
                e = !0;
                break;

              case 37:
              case 65:
                g = !0;
                break;

              case 40:
              case 83:
                f = !0;
                break;

              case 39:
              case 68:
                h = !0;
                break;

              case 32:
                !0 === j && (k.y += M.control.options.fps.jumpHeight), j = !1;
                break;

              case 16:
                M.control.options.fps._oldV = M.control.options.fps.velocity, M.control.options.fps.velocity = M.control.options.fps.crouch, 
                d.position.y = M.control.options.fps.height / 2, j = !1, m = !0;
            }
            M.control.handler._onKeyDown(a);
        }, this.onKeyUp = function(a) {
            switch (a.keyCode) {
              case 38:
              case 87:
                e = !1;
                break;

              case 37:
              case 65:
                g = !1;
                break;

              case 40:
              case 83:
                f = !1;
                break;

              case 39:
              case 68:
                h = !1;
                break;

              case 16:
                M.control.options.fps.velocity = M.control.options.fps._oldV, d.position.y = M.control.options.fps.height, 
                j = !0, m = !1;
            }
            M.control.handler._onKeyUp(a);
        }, document.addEventListener("mousemove", this.onMouseMove, !1), document.addEventListener("keydown", this.onKeyDown, !1), 
        document.addEventListener("keyup", this.onKeyUp, !1), this.enabled = !1, this.getObject = function() {
            return d;
        }, this.isOnObject = function(a) {
            i = a, j = a;
        }, this.getDirection = function() {
            var a = new THREE.Vector3(0, 0, -1), b = new THREE.Euler(0, 0, 0, "YXZ");
            return function(e) {
                return b.set(c.rotation.x, d.rotation.y, 0), e.copy(a).applyEuler(b), e;
            };
        }(), this.update = function(a) {
            if (!1 === b.enabled) return void app.log("pointerlock not enabled. please enable it.");
            a *= M.control.options.fps.delta, k.y -= M.control.options.fps.fallFactor * a;
            var c = M.control.options.fps.velocity;
            e && (k.z = -c), f && (k.z = c), f || e || (k.z = 0), g && (k.x = -c), h && (k.x = c), 
            h || g || (k.x = 0), !0 === i && (k.y = Math.max(0, k.y)), d.translateX(k.x), d.translateY(k.y), 
            d.translateZ(k.z), d.position.y < M.control.options.fps.height && (k.y = 0, d.position.y = m ? M.control.options.fps.height / 2 : M.control.options.fps.height, 
            j = !0);
        };
    },
    update: function() {
        if (M.control.handler) {
            M.control.clock.getDelta();
            try {
                M.control.handler.update(app.clock.getDelta());
            } catch (a) {
                console.error(a), console.trace();
            }
        }
    },
    init: function() {
        M.control.clock = new THREE.Clock();
        try {
            app.keydown && app.keyup ? (M.control.type = "custom", M.control.oldType = 2, window.addEventListener("keydown", app.keydown), 
            window.addEventListener("keyup", app.keyup)) : (M.control.type = "fly", M.control.fly(app.camera.object), 
            M.control.oldType = 0);
        } catch (a) {
            M.control.type = "fly", M.control.fly(app.camera.object), M.control.oldType = 0;
        }
    }
}, window.M = window.M || {}, M.game = {
    scripts: {}
}, M.game.SCRIPTS_DIR = "app/scripts/", M.game.update = function() {}, M.game.script = function(a, b) {
    var c = {};
    c.name = a;
    for (var d in b) c[d] = b[d];
    c.start || (c.start = new Function("console.warn('You need a start method');")), 
    c.update || (c.update = new Function("console.warn('You need an update method');")), 
    a in M.game.scripts || (M.game.scripts[a] = c);
}, M.game.attachScriptToObject = function(a, b, c) {
    var d = c + b;
    include(d, function() {
        a.__loadScript(M.game.scripts[b]);
    });
}, window.M = window.M || {}, M.gui = {
    miniMap: void 0,
    menu: void 0,
    init: function() {}
}, M.gui.init(), window.M = window.M || {}, M.universe = {
    reality: void 0,
    loaded: !1,
    worker: void 0,
    bigbang: function() {
        console.log("inside universe init"), M.universe.loaded = !0, M.universe.reality = new HashMap();
    },
    testingShaders: function() {
        var a = new THREE.ShaderMaterial({
            uniforms: {
                tExplosion: {
                    type: "t",
                    value: THREE.ImageUtils.loadTexture("img/explosion.png", {}, function(a) {
                        console.log(a);
                    })
                },
                time: {
                    type: "f",
                    value: 0
                }
            },
            vertexShader: document.getElementById("vertexShader").textContent,
            fragmentShader: document.getElementById("fragmentShader").textContent
        }), b = new THREE.Mesh(new THREE.IcosahedronGeometry(20, 4), a);
        b.start_time = Date.now(), b.auto_render = function() {
            this.material.uniforms.time.value = 25e-5 * (Date.now() - this.start_time);
        }, app.scene.add(b), M.universe.reality.put(b.uuid, b);
    },
    addPlanetAndSatellite: function() {
        var a = new THREE.MeshBasicMaterial({
            color: 16777215,
            wireframe: !0
        }), b = new THREE.SphereGeometry(15, 40, 40);
        b.dynamic = !0;
        var c = new THREE.Mesh(b, a);
        c.position.x = 0, c.position.y = 0, c.position.z = 0, c.auto_render = function() {
            this.rotation.y += 1e-4;
        }, app.scene.add(c), M.universe.reality.put(c.uuid, c), l("PLANET GEOMETRY"), l(c.geometry.dynamic + " - " + c.geometry.verticesNeedUpdate + " - " + c.geometry.normalsNeedUpdate);
        var a = new THREE.MeshBasicMaterial({
            color: 16777215,
            wireframe: !0
        }), d = new THREE.Mesh(new THREE.SphereGeometry(30, 40, 40), a);
        d.position.x = 0, d.position.y = 400, d.position.z = 0, d.auto_render = function() {
            this.position.x += this.position.z += this.rotation.y += 1e-4;
        };
    },
    update: function() {
        var a = M.universe.reality.keys.concat();
        if (0 != a.length) {
            var b = +new Date();
            do {
                var c = M.universe.reality.get(a.shift());
                c && c.update && c.update(app.clock.getDelta()), c.render();
            } while (a.length > 0 && +new Date() - b < 50);
        }
    }
}, M.universe.bigbang(), window.User = {}, User = {
    real_name: void 0,
    real_surname: void 0,
    username: void 0,
    clock: void 0,
    flyControl: void 0,
    fpsControl: void 0,
    init: function() {
        User.clock = new THREE.Clock(), User.fpsControl = new THREE.PointerLockControls(app.camera), 
        app.scene.add(User.fpsControl.getObject());
    },
    position: {
        x: void 0,
        y: void 0,
        z: void 0
    },
    handleUserInput: function() {}
}, Class("Beat", {
    Beat: function(a) {
        this.name = a, this.sound = {}, this.sound.source = M.audioEngine.context.createBufferSource(), 
        this.sound.volume = M.audioEngine.context.createGain(), this.sound.volume.gain.value = M.audioEngine.VOLUME, 
        this.setListeners(), this.sound.source.connect(this.sound.volume), this.sound.volume.connect(M.audioEngine.volume);
    },
    setListeners: function() {
        this.sound.source._caller = this;
    },
    reset: function() {
        this.sound.source.disconnect(), this.sound.source = M.audioEngine.context.createBufferSource(), 
        this.sound.source.connect(this.sound.volume), this.setListeners();
    },
    start: function() {
        var a = M.audioEngine.get(this.name);
        if (!a) return void console.error("Unable to load sound, sorry.");
        this.sound.source.buffer = a, this.sound.volume.gain.value = 0, this.sound.source.start(M.audioEngine.context.currentTime);
        var b = this, c = function() {
            b.sound.volume.gain.value = b.sound.volume.gain.value + M.audioEngine.DELAY_FACTOR, 
            b.sound.volume.gain.value < M.audioEngine.DELAY_NORMAL_VALUE && setTimeout(c, M.audioEngine.DELAY_STEP);
        };
        c();
    },
    stop: function() {
        var a = this, b = function() {
            a.sound.volume.gain.value = a.sound.volume.gain.value - M.audioEngine.DELAY_FACTOR, 
            a.sound.volume.gain.value > M.audioEngine.DELAY_MIN_VALUE ? setTimeout(b, M.audioEngine.DELAY_STEP) : a.sound.source.stop();
        };
        b();
    },
    onEnd: function() {
        this._caller.onEndCallback && this._caller.onEndCallback(), this._caller.reset();
    },
    onLoopEnd: function() {
        this._caller.onLoopEndCallback && this._caller.onLoopEndCallback();
    },
    onLoopStart: function() {
        this._caller.onLoopStartCallback && this._caller.onLoopStartCallback();
    }
}), Class("Sound", {
    Sound: function(a, b) {
        Beat.call(this, a);
        var c = b || {};
        this.sound.panner = M.audioEngine.context.createPanner(), this.sound.volume.disconnect(), 
        this.sound.volume.connect(this.sound.panner), this.sound.panner.connect(M.audioEngine.volume), 
        c.mesh ? this.mesh = c.mesh : this.update = function() {}, c.effect && (this.convolver = M.audioEngine.context.createConvolver(), 
        this.mixer = M.audioEngine.createGain(), this.sound.panner.disconnect(), this.sound.panner.connect(this.mixer), 
        this.plainGain = M.audioEngine.context.createGain(), this.convolverGain = M.audioEngine.context.createGain(), 
        this.mixer.connect(plainGain), this.mixer.connect(convolverGain), this.plainGain.connect(M.audioEngine.volume), 
        this.convolverGain.connect(M.audioEngine.volume), this.convolver.buffer = M.audioEngine.get(c.effect), 
        this.convolverGain.gain.value = .7, this.plainGain.gain.value = .3), (c.autoplay || !1) && this.start(), 
        M.audioEngine.add(this);
    },
    update: function(a) {
        if (this.mesh) {
            var b = new THREE.Vector3();
            b.setFromMatrixPosition(this.mesh.matrixWorld);
            var c = b.x, d = b.y, e = b.z;
            this.mesh.updateMatrixWorld();
            var f = new THREE.Vector3();
            f.setFromMatrixPosition(this.mesh.matrixWorld);
            var g = f.x - c, h = f.y - d, i = f.z - e;
            try {
                this.sound.panner.setPosition(f.x, f.y, f.z), this.sound.panner.setVelocity(g / a, h / a, i / a);
            } catch (a) {}
        }
    }
})._extends("Beat"), Class("AmbientSound", {
    AmbientSound: function(a, b) {
        Beat.call(this, a), this.sound.source.loop = b.loop || !1, this.sound.panner = M.audioEngine.context.createPanner(), 
        this.sound.volume.disconnect(), this.sound.volume.connect(this.sound.panner), this.sound.panner.connect(M.audioEngine.volume), 
        this.mesh = b.mesh, b.effect && (this.convolver = M.audioEngine.context.createConvolver(), 
        this.mixer = M.audioEngine.context.createGain(), this.sound.panner.disconnect(), 
        this.sound.panner.connect(this.mixer), this.plainGain = M.audioEngine.context.createGain(), 
        this.convolverGain = AudioEngine.context.createGain(), this.mixer.connect(plainGain), 
        this.mixer.connect(convolverGain), this.plainGain.connect(M.audioEngine.volume), 
        this.convolverGain.connect(M.audioEngine.volume), this.convolver.buffer = M.audioEngine.get(b.effect), 
        this.convolverGain.gain.value = .7, this.plainGain.gain.value = .3), (b.autoplay || !1) && this.start(), 
        M.audioEngine.add(this);
    },
    update: function(a) {
        this.mesh.updateMatrixWorld();
        var b = new THREE.Vector3();
        b.setFromMatrixPosition(this.mesh.matrixWorld), this.sound.panner.setPosition(b.x, b.y, b.z);
    }
})._extends("Beat"), Class("DirectionalSound", {
    DirectionalSound: function(a, b, c) {
        Beat.call(this, a), this.sound.panner = M.audioEngine.context.createPanner(), this.sound.volume.disconnect(), 
        this.sound.volume.connect(this.sound.panner), this.sound.panner.connect(M.audioEngine.volume), 
        this.mesh = c.mesh, this.sound.panner.coneInnerAngle = b.innerAngleInDegrees, this.sound.panner.coneOuterAngle = b.outerAngleInDegrees, 
        this.sound.panner.coneOuterGain = b.outerGainFactor, c.effect && (this.convolver = M.audioEngine.context.createConvolver(), 
        this.mixer = M.audioEngine.createGain(), this.sound.panner.disconnect(), this.sound.panner.connect(this.mixer), 
        this.plainGain = M.audioEngine.context.createGain(), this.convolverGain = M.audioEngine.context.createGain(), 
        this.mixer.connect(plainGain), this.mixer.connect(convolverGain), this.plainGain.connect(M.audioEngine.volume), 
        this.convolverGain.connect(M.audioEngine.volume), this.convolver.buffer = M.audioEngine.get(c.effect), 
        this.convolverGain.gain.value = .7, this.plainGain.gain.value = .3), (c.autoplay || !1) && this.start(), 
        M.audioEngine.add(this);
    },
    update: function(a) {
        var b = new THREE.Vector3();
        b.setFromMatrixPosition(this.mesh.matrixWorld);
        var c = b.x, d = b.y, e = b.z;
        this.mesh.updateMatrixWorld();
        var f = new THREE.Vector3();
        f.setFromMatrixPosition(this.mesh.matrixWorld);
        var g = f.x - c, h = f.y - d, i = f.z - e;
        this.sound.panner.setPosition(f.x, f.y, f.z), this.sound.panner.setVelocity(g / a, h / a, i / a);
        var j = new THREE.Vector3(0, 0, 1), k = this.mesh.matrixWorld, l = k.elements[12], m = k.elements[13], n = k.elements[14];
        k.elements[12] = k.elements[13] = k.elements[14] = 0, j.applyProjection(k), j.normalize(), 
        this.sound.panner.setOrientation(j.x, j.y, j.z), k.elements[12] = l, k.elements[13] = m, 
        k.elements[14] = n;
    }
})._extends("Beat"), Class("BackgroundSound", {
    BackgroundSound: function(a, b) {
        Beat.call(this, a), this.sound.source.loop = b.loop || !0, this.mesh = b.mesh, b.effect && (this.convolver = M.audioEngine.context.createConvolver(), 
        this.mixer = M.audioEngine.context.createGain(), this.sound.panner.disconnect(), 
        this.sound.panner.connect(this.mixer), this.plainGain = M.audioEngine.context.createGain(), 
        this.convolverGain = M.audioEngine.context.createGain(), this.mixer.connect(plainGain), 
        this.mixer.connect(convolverGain), this.plainGain.connect(M.audioEngine.volume), 
        this.convolverGain.connect(M.audioEngine.volume), this.convolver.buffer = M.audioEngine.get(b.effect), 
        this.convolverGain.gain.value = .7, this.plainGain.gain.value = .3), (b.autoplay || !0) && this.start(), 
        M.audioEngine.add(this);
    },
    update: function(a) {}
})._extends("Beat"), Class("Shader", {
    Shader: function(a, b, c, d) {
        if (this.shader = M.fx.shadersEngine.get(a), this.shader.instance) this.instance = this.shader.instance; else {
            this.name = this.shader.name, this.vertex = this.shader.vertex, this.fragment = this.shader.fragment, 
            this.attributes = b || this.shader.attributes, this.uniforms = c || this.shader.uniforms;
            var e = {
                attributes: this.attributes,
                uniforms: this.uniforms,
                vertexShader: this.shader.vertex,
                fragmentShader: this.shader.fragment
            }, f = d || this.shader.options;
            for (o in f) e[o] = f[o];
            this.material = new THREE.ShaderMaterial(e);
        }
    }
}), THREE.FlyControls = function(a, b) {
    function c(a, b) {
        return function() {
            b.apply(a, arguments);
        };
    }
    this.object = a, this.domElement = void 0 !== b ? b : document, b && this.domElement.setAttribute("tabindex", -1), 
    this.movementSpeed = 1, this.rollSpeed = .005, this.dragToLook = !1, this.autoForward = !1, 
    this.tmpQuaternion = new THREE.Quaternion(), this.mouseStatus = 0, this.moveState = {
        up: 0,
        down: 0,
        left: 0,
        right: 0,
        forward: 0,
        back: 0,
        pitchUp: 0,
        pitchDown: 0,
        yawLeft: 0,
        yawRight: 0,
        rollLeft: 0,
        rollRight: 0
    }, this.moveVector = new THREE.Vector3(0, 0, 0), this.rotationVector = new THREE.Vector3(0, 0, 0), 
    this.handleEvent = function(a) {
        "function" == typeof this[a.type] && this[a.type](a);
    }, this.keydown = function(a) {
        if (!a.altKey) {
            switch (a.keyCode) {
              case 16:
                this.movementSpeedMultiplier = .1;
                break;

              case 87:
                this.moveState.forward = 1;
                break;

              case 83:
                this.moveState.back = 1;
                break;

              case 65:
                this.moveState.left = 1;
                break;

              case 68:
                this.moveState.right = 1;
                break;

              case 82:
                this.moveState.up = 1;
                break;

              case 70:
                this.moveState.down = 1;
                break;

              case 38:
                this.moveState.pitchUp = 1;
                break;

              case 40:
                this.moveState.pitchDown = 1;
                break;

              case 37:
                this.moveState.yawLeft = 1;
                break;

              case 39:
                this.moveState.yawRight = 1;
                break;

              case 81:
                this.moveState.rollLeft = 1;
                break;

              case 69:
                this.moveState.rollRight = 1;
            }
            this.updateMovementVector(), this.updateRotationVector();
        }
    }, this.keyup = function(a) {
        switch (a.keyCode) {
          case 16:
            this.movementSpeedMultiplier = 1;
            break;

          case 87:
            this.moveState.forward = 0;
            break;

          case 83:
            this.moveState.back = 0;
            break;

          case 65:
            this.moveState.left = 0;
            break;

          case 68:
            this.moveState.right = 0;
            break;

          case 82:
            this.moveState.up = 0;
            break;

          case 70:
            this.moveState.down = 0;
            break;

          case 38:
            this.moveState.pitchUp = 0;
            break;

          case 40:
            this.moveState.pitchDown = 0;
            break;

          case 37:
            this.moveState.yawLeft = 0;
            break;

          case 39:
            this.moveState.yawRight = 0;
            break;

          case 81:
            this.moveState.rollLeft = 0;
            break;

          case 69:
            this.moveState.rollRight = 0;
        }
        this.updateMovementVector(), this.updateRotationVector();
    }, this.mousedown = function(a) {
        if (this.domElement !== document && this.domElement.focus(), a.preventDefault(), 
        a.stopPropagation(), this.dragToLook) this.mouseStatus++; else {
            switch (a.button) {
              case 0:
                this.moveState.forward = 1;
                break;

              case 2:
                this.moveState.back = 1;
            }
            this.updateMovementVector();
        }
    }, this.mousemove = function(a) {
        if (!this.dragToLook || this.mouseStatus > 0) {
            var b = this.getContainerDimensions(), c = b.size[0] / 2, d = b.size[1] / 2;
            this.moveState.yawLeft = -(a.pageX - b.offset[0] - c) / c, this.moveState.pitchDown = (a.pageY - b.offset[1] - d) / d, 
            this.updateRotationVector();
        }
    }, this.mouseup = function(a) {
        if (a.preventDefault(), a.stopPropagation(), this.dragToLook) this.mouseStatus--, 
        this.moveState.yawLeft = this.moveState.pitchDown = 0; else {
            switch (a.button) {
              case 0:
                this.moveState.forward = 0;
                break;

              case 2:
                this.moveState.back = 0;
            }
            this.updateMovementVector();
        }
        this.updateRotationVector();
    }, this.update = function(a) {
        var b = a * this.movementSpeed, c = a * this.rollSpeed;
        this.object.translateX(this.moveVector.x * b), this.object.translateY(this.moveVector.y * b), 
        this.object.translateZ(this.moveVector.z * b), this.tmpQuaternion.set(this.rotationVector.x * c, this.rotationVector.y * c, this.rotationVector.z * c, 1).normalize(), 
        this.object.quaternion.multiply(this.tmpQuaternion), this.object.rotation.setFromQuaternion(this.object.quaternion, this.object.rotation.order);
    }, this.updateMovementVector = function() {
        var a = this.moveState.forward || this.autoForward && !this.moveState.back ? 1 : 0;
        this.moveVector.x = -this.moveState.left + this.moveState.right, this.moveVector.y = -this.moveState.down + this.moveState.up, 
        this.moveVector.z = -a + this.moveState.back;
    }, this.updateRotationVector = function() {
        this.rotationVector.x = -this.moveState.pitchDown + this.moveState.pitchUp, this.rotationVector.y = -this.moveState.yawRight + this.moveState.yawLeft, 
        this.rotationVector.z = -this.moveState.rollRight + this.moveState.rollLeft;
    }, this.getContainerDimensions = function() {
        return this.domElement != document ? {
            size: [ this.domElement.offsetWidth, this.domElement.offsetHeight ],
            offset: [ this.domElement.offsetLeft, this.domElement.offsetTop ]
        } : {
            size: [ window.innerWidth, window.innerHeight ],
            offset: [ 0, 0 ]
        };
    }, this.domElement.addEventListener("contextmenu", function(a) {
        a.preventDefault();
    }, !1), this.domElement.addEventListener("mousemove", c(this, this.mousemove), !1), 
    this.domElement.addEventListener("mousedown", c(this, this.mousedown), !1), this.domElement.addEventListener("mouseup", c(this, this.mouseup), !1), 
    this.domElement.addEventListener("keydown", c(this, this.keydown), !1), this.domElement.addEventListener("keyup", c(this, this.keyup), !1), 
    this.updateMovementVector(), this.updateRotationVector();
}, THREE.PointerLockControls = function(a) {
    var b = this;
    a.rotation.set(0, 0, 0);
    var c = new THREE.Object3D();
    c.add(a);
    var d = new THREE.Object3D();
    d.position.y = 10, d.add(c);
    var e = !1, f = !1, g = !1, h = !1, i = !1, j = !1, k = new THREE.Vector3(), m = Math.PI / 2, n = function(a) {
        if (!1 !== b.enabled) {
            var e = a.movementX || a.mozMovementX || a.webkitMovementX || 0, f = a.movementY || a.mozMovementY || a.webkitMovementY || 0;
            d.rotation.y -= .002 * e, c.rotation.x -= .002 * f, c.rotation.x = Math.max(-m, Math.min(m, c.rotation.x));
        }
    }, o = function(a) {
        switch (l("inside pointer lock controls onKeyDown " + a.keyCode), a.keyCode) {
          case 38:
          case 87:
            e = !0;
            break;

          case 37:
          case 65:
            g = !0;
            break;

          case 40:
          case 83:
            f = !0;
            break;

          case 39:
          case 68:
            h = !0;
            break;

          case 32:
            !0 === j && (k.y += 10), j = !1;
        }
    }, p = function(a) {
        switch (a.keyCode) {
          case 38:
          case 87:
            e = !1;
            break;

          case 37:
          case 65:
            g = !1;
            break;

          case 40:
          case 83:
            f = !1;
            break;

          case 39:
          case 68:
            h = !1;
        }
    };
    document.addEventListener("mousemove", n, !1), document.addEventListener("keydown", o, !1), 
    document.addEventListener("keyup", p, !1), this.enabled = !1, this.getObject = function() {
        return d;
    }, this.isOnObject = function(a) {
        i = a, j = a;
    }, this.getDirection = function() {
        var a = new THREE.Vector3(0, 0, -1), b = new THREE.Euler(0, 0, 0, "YXZ");
        return function(e) {
            return b.set(c.rotation.x, d.rotation.y, 0), e.copy(a).applyEuler(b), e;
        };
    }(), this.update = function(a) {
        if (!1 === b.enabled) return void l("pointerlock not enabled. please enable it.");
        a *= .1, k.y -= .25 * a;
        var c = .1;
        e && (k.z = -c), f && (k.z = c), f || e || (k.z = 0), g && (k.x = -c), h && (k.x = c), 
        h || g || (k.x = 0), !0 === i && (k.y = Math.max(0, k.y)), d.translateX(k.x), d.translateY(k.y), 
        d.translateZ(k.z), d.position.y < 10 && (k.y = 0, d.position.y = 10, j = !0);
    };
}, Class("Entity", {
    Entity: function() {},
    start: function() {},
    update: function() {},
    render: function() {
        this.mesh && this.mesh.render && this.mesh.render();
    },
    addScript: function(a, b) {
        var c = M.game.SCRIPTS_DIR + (b || "");
        "/" != c[c.length - 1] && (c += "/"), M.game.attachScriptToObject(this, a, c);
    },
    __loadScript: function(a) {
        for (var b in a) this[b] = a[b];
        try {
            this.start();
        } catch (b) {
            console.log("I told you, man. Check your start method inside your " + a.name + ".js script");
        }
    },
    addSound: function(a, b) {
        var c = b.autoplay || !1;
        this.isPlayingSound = c, this.sound = new Sound(a, {
            mesh: this.mesh,
            autoplay: c,
            effect: b.effect
        });
    },
    addDirectionalSound: function(a, b) {
        var c = b.autoplay || !1;
        this.isPlayingSound = c, this.sound = new DirectionalSound(a, {
            mesh: this.mesh,
            autoplay: c,
            effect: b.effect
        });
    },
    addAmbientSound: function(a, b) {
        var c = b.autoplay || !1, d = b.loop || !1;
        this.isPlayingSound = c, this.sound = new AmbientSound(a, {
            mesh: this.mesh,
            autoplay: c,
            loop: d,
            effect: b.effect
        });
    },
    addMesh: function(a) {
        this.mesh.add(a);
    },
    addLight: function(a, b, c) {
        var d = {
            x: this.mesh.position.x,
            y: this.mesh.position.y,
            z: this.mesh.position.z
        };
        this.light = new PointLight(a, b, c, d), this.addMesh(this.light.mesh.mesh);
    },
    playSound: function() {
        this.sound && (this.isPlayingSound || (this.sound.start(), this.isPlayingSound = !0));
    },
    stopSound: function() {
        this.sound && this.isPlayingSound && (this.sound.stop(), this.isPlayingSound = !1);
    },
    scale: function(a, b, c) {
        this.mesh && this.mesh.scale.set(a, b, c);
    }
}), Class("Camera", {
    Camera: function(a) {
        Entity.call(this), this.options = a, this.object = new THREE.PerspectiveCamera(a.fov, a.ratio, a.near, a.far);
    }
})._extends("Entity"), Class("Mesh", {
    Mesh: function(a, b, c) {
        if (Entity.call(this), this.geometry = a, this.material = b, this.script = {}, this.hasScript = !1, 
        this.mesh = new THREE.Mesh(a, b), app.util.cast_shadow && (this.mesh.castShadow = !0, 
        this.mesh.receiveShadow = !0), app.add(this.mesh, this), c) for (var d in c) this[d] = c[d], 
        "script" == d && (this.hasScript = !0, this.addScript(c[d], c.dir));
    }
})._extends("Entity"), Class("ShaderMesh", {
    ShaderMesh: function(a, b, c, d, e) {
        Entity.call(this), this.geometry = a, this.attributes = c, this.uniforms = d, this.shaderName = b;
        var f = new Shader(this.shaderName, this.attributes, this.uniforms, e);
        if (f.shader && !f.shader.instance ? (c || (this.attributes = f.attributes), d || (this.uniforms = f.uniforms), 
        this.script = {}, this.hasScript = !1, this.mesh = new THREE.Mesh(a, f.material)) : this.mesh = f.shader.instance(app.renderer, app.camera.object, app.scene, e), 
        app.add(this.mesh, this), e) for (var g in e) this[g] = e[g], "script" == g && (this.hasScript = !0, 
        this.addScript(e[g], e.dir));
    }
})._extends("Entity"), Class("AnimatedMesh", {
    AnimatedMesh: function(a, b, c) {
        Entity.call(this), this.animations = {}, this.weightSchedule = [], this.warpSchedule = [];
        var d = b[0];
        d.skinning = !0, this.meshVisible = !0, this.mesh = new THREE.SkinnedMesh(a, d), 
        this.mesh.visible = this.meshVisible, app.add(this.mesh, this);
        for (var e = 0; e < a.animations.length; ++e) {
            var f = a.animations[e].name;
            this.animations[f] = new THREE.Animation(this.mesh, a.animations[e]);
        }
        if (this.skeleton = new THREE.SkeletonHelper(this.mesh), this.skeleton.material.linediwth = 3, 
        this.mesh.add(this.skeleton), this.skeletonVisible = !1, this.skeleton.visible = this.skeletonVisible, 
        c) for (var g in c) this[g] = c[g], "script" == g && (this.hasScript = !0, this.addScript(c[g], c.dir));
    },
    toggleSkeleton: function() {
        this.skeletonVisible = !this.skeletonVisible, this.skeleton.visible = this.skeletonVisible;
    },
    toggleModel: function() {
        this.meshVisible = !this.meshVisible, this.mesh.visible = this.meshVisible;
    },
    setWeights: function(a) {
        for (name in a) this.animations[name] && (this.animations[name].weight = a[name]);
    },
    update: function(a) {
        this.animate(a);
    },
    animate: function(a) {
        for (var b = this.weightSchedule.length - 1; b >= 0; --b) {
            var c = this.weightSchedule[b];
            c.timeElapsed += a, c.timeElapsed > c.duration ? (c.anim.weight = c.endWeight, this.weightSchedule.splice(b, 1), 
            0 == c.anim.weight && c.anim.stop(0)) : c.anim.weight = c.startWeight + (c.endWeight - c.startWeight) * c.timeElapsed / c.duration;
        }
        this.updateWarps(a), this.skeleton.update(), THREE.AnimationHandler.update(a);
    },
    updateWarps: function(a) {
        for (var b = this.warpSchedule.length - 1; b >= 0; --b) {
            var c = this.warpSchedule[b];
            if (c.timeElapsed += a, c.timeElapsed > c.duration) c.to.weight = 1, c.to.timeScale = 1, 
            c.from.weight = 0, c.from.timeScale = 1, c.from.stop(0), this.warpSchedule.splice(b, 1); else {
                var d = c.timeElapsed / c.duration, e = c.from.data.length, f = c.to.data.length, g = e / f, h = f / e;
                c.from.timeScale = 1 - d + g * d, c.to.timeScale = d + h * (1 - d), c.from.weight = 1 - d, 
                c.to.weight = d;
            }
        }
    },
    play: function(a) {
        var b = void 0 === this.animations[a].weight ? this.animations[a] : 1;
        this.animations[a].play(0, b);
    },
    crossfade: function(a, b, c) {
        var d = this.animations[a], e = this.animations[b];
        d.play(0, 1), e.play(0, 0), this.weightSchedule.push({
            anim: d,
            startWeight: 1,
            endWeight: 0,
            timeElapsed: 0,
            duration: c
        }), this.weightSchedule.push({
            anim: e,
            startWeight: 0,
            endWeight: 1,
            timeElapsed: 0,
            duration: c
        });
    },
    warp: function(a, b, c) {
        var d = this.animations[a], e = this.animations[b];
        d.play(0, 1), e.play(0, 0), this.warpSchedule.push({
            from: d,
            to: e,
            timeElapsed: 0,
            duration: c
        });
    },
    applyWeight: function(a, b) {
        this.animations[a].weight = b;
    },
    pauseAll: function() {
        for (var a in this.animations) this.animations[a].isPlaying && this.animations[a].stop();
    },
    unPauseAll: function() {
        for (var a in this.animations) this.animations[a].isPlaying && this.animations[a].isPaused && this.animations[a].pause();
    },
    stopAll: function() {
        for (a in this.animations) this.animations[a].isPlaying && this.animations[a].stop(0), 
        this.animations[a].weight = 0;
        this.weightSchedule.length = 0, this.warpSchedule.length = 0;
    },
    getForward: function() {
        var a = new THREE.Vector3();
        return function() {
            return a.set(-this.matrix.elements[8], -this.matrix.elements[9], -this.matrix.elements[10]), 
            a;
        };
    }
})._extends("Entity"), Class("Light", {
    Light: function(a, b, c) {
        Entity.call(this), this.color = a, this.intensity = b, this.position = c || {
            x: 0,
            y: 0,
            z: 0
        }, this.isLightOn = !1, this.mesh = void 0, M.lightEngine.add(this);
    },
    on: function() {
        if (this.light) {
            var a = this, b = function() {
                a.light.intensity += M.lightEngine.delayFactor, a.light.intensity < a.intensity ? setTimeout(b, M.lightEngine.delayStep) : a.isLightOn = !0;
            };
            b();
        } else console.log("You should create your light, first");
    },
    off: function() {
        if (this.light) {
            var a = this, b = function() {
                a.light.intensity -= M.lightEngine.delayFactor, a.light.intensity > 0 ? setTimeout(b, M.lightEngine.delayStep) : a.isLightOn = !1;
            };
            b();
        } else console.log("You should create your light, first");
    }
})._extends("Entity"), Class("AmbientLight", {
    AmbientLight: function(a, b, c) {
        var d = b || 1, e = c || new THREE.Vector3(0, 0, 0);
        Light.call(this, a, d, e), this.light = new THREE.AmbientLight(a), app.add(this.light, this);
    }
})._extends("Light"), Class("PointLight", {
    PointLight: function(a, b, c, d) {
        Light.call(this, a, b, d), this.geometry = new THREE.SphereGeometry(M.lightEngine.holderRadius, M.lightEngine.holderSegment, M.lightEngine.holderSegment), 
        this.material = new THREE.MeshPhongMaterial({
            color: this.color
        }), this.mesh = new Mesh(this.geometry, this.material), this.light = new THREE.PointLight(a, b, c), 
        this.mesh.mesh.position.set(this.position.x, this.position.y, this.position.z), 
        this.light.position = this.mesh.mesh.position, this.mesh.mesh.add(this.light);
    }
})._extends("Light"), Class("DirectionalLight", {
    DirectionalLight: function(a, b, c, d, e) {
        Light.call(this, a, b, d), this.light = new THREE.DirectionalLight(a, b), e && this.light.target.position.copy(e.position), 
        this.light.position.set(d.x, d.y, d.z), this.light.castShadow = !0, this.light.shadow.mapSize.width = 512, 
        this.light.shadow.mapSize.height = 512;
        var f = 300;
        this.light.shadow.camera.left = -f, this.light.shadow.camera.right = f, this.light.shadow.camera.top = f, 
        this.light.shadow.camera.bottom = -f, this.light.shadow.camera.far = 1e3, app.add(this.light, this);
    }
})._extends("Light"), window.M = window.M || {}, M.loader = M.loader || {}, M.loader.lights = {
    load: function(a) {
        for (var b = 0; b < a.length; b++) {
            var c = a[b];
            parsedLight = M.loader.lights._parseLight(c), "DirectionalLight" == c.light.object.type ? M.loader.lights._loadDirectionalLight(parsedLight) : "AmbientLight" == c.light.object.type ? M.loader.lights._loadAmbientLight(parsedLight) : "PointLight" == c.light.object.type && M.loader.lights._loadPointLight(parsedLight);
        }
    },
    _parseLight: function(a) {
        return {
            holder: !!a.holder && app.loader.parse(a.holder),
            target: !!a.target && app.loader.parse(a.target),
            light: !!a.light && app.loader.parse(a.light)
        };
    },
    _loadDirectionalLight: function(a) {
        new DirectionalLight(a.light.color, a.light.intensity, a.light.distance, a.light.position, a.target);
    },
    _loadAmbientLight: function(a) {
        new AmbientLight(a.light.color, a.light.intensity, a.light.position);
    },
    _loadPointLight: function(a) {
        var b = 200, c = a.holder ? a.holder.position : a.light.position, d = new PointLight(a.light.color, a.light.intensity, b, c);
        d.light.castShadow = !0, d.light.shadow.camera.left = -b, d.light.shadow.camera.right = b, 
        d.light.shadow.camera.top = b, d.light.shadow.camera.bottom = -b, d.light.shadow.camera.far = app.util.camera.far, 
        d.light.shadow.darkness = .2;
    }
}, window.M = window.M || {}, M.loader = M.loader || {}, M.loader.meshes = {
    load: function(a) {
        for (var b = 0; b < a.length; b++) {
            var c = a[b], d = M.loader.meshes._parseShader(c), e = M.loader.meshes._parseScript(c), f = M.loader.meshes._parseMesh(c);
            f.name.indexOf("_camera") > -1 ? M.loader.meshes._loadCamera(f, e) : M.loader.meshes._loadMesh(c, f, e, d);
        }
    },
    _parseMesh: function(a) {
        return app.loader.parse(a);
    },
    _parseScript: function(a) {
        var b = !!a.object.userData && a.object.userData.script, c = !1, d = !1;
        return b && (b = b.slice(b.lastIndexOf("scripts/") + 8), c = b.slice(0, b.indexOf("/")), 
        d = b.slice(b.indexOf("/") + 1)), {
            script: b,
            dir: c,
            file: d
        };
    },
    _parseShader: function(a) {
        var b = !!a.object.userData && a.object.userData.shader_name, c = !!a.object.userData && JSON.parse(a.object.userData.shader_options);
        if (b) {
            var d = {};
            for (var e in c) Object.assign(d, c[e]);
        }
        return {
            name: b,
            options: d
        };
    },
    _loadCamera: function(a, b) {
        var c = a.name.replace("_", "").toLowerCase();
        app.camera.object.type.toLowerCase() === c && (app.camera.object.position.set(a.position.x, a.position.y, a.position.z), 
        app.camera.object.rotation.set(a.rotation.x, a.rotation.y, a.rotation.z), app.camera.object.scale.set(a.scale.x, a.scale.y, a.scale.z), 
        M.loader.meshes._attachScript(app.camera, b));
    },
    _loadMesh: function(a, b, c, d) {
        if (d && d.name && d.options) var e = new ShaderMesh({}, d.name, {}, {}, d.options); else {
            b.castShadow = !0, b.receiveShadow = !0;
            var e = new Mesh(b.geometry, b.material);
            if (e.mesh.position.set(b.position.x, b.position.y, b.position.z), e.mesh.rotation.set(b.rotation.x, b.rotation.y, b.rotation.z), 
            e.mesh.scale.set(b.scale.x, b.scale.y, b.scale.z), e.mesh.castShadow = !0, e.mesh.receiveShadow = !0, 
            a.textureKey) {
                var f = M.imagesEngine.get(a.textureKey);
                f.wrapS = THREE.RepeatWrapping, f.wrapT = THREE.RepeatWrapping, f.repeat.set(1, 1), 
                e.mesh.material.map = f;
            }
        }
        M.loader.meshes._attachScript(e, c);
    },
    _attachScript: function(a, b) {
        b.dir && b.file && a.addScript(b.file.replace(".js", ""), b.dir);
    }
};